{"ast":null,"code":"import { GraphQLList, getNamedType } from 'graphql';\nimport DataLoader from 'dataloader';\nimport { delegateToSchema } from '@graphql-tools/delegate';\nconst cache = new WeakMap();\n\nfunction createBatchFn(options) {\n  var _a;\n\n  const argsFromKeys = (_a = options.argsFromKeys) !== null && _a !== void 0 ? _a : keys => ({\n    ids: keys\n  });\n  const {\n    valuesFromResults,\n    lazyOptionsFn\n  } = options;\n  return async keys => {\n    const results = await delegateToSchema({\n      returnType: new GraphQLList(getNamedType(options.info.returnType)),\n      args: argsFromKeys(keys),\n      ...(lazyOptionsFn == null ? options : lazyOptionsFn(options))\n    });\n    const values = valuesFromResults == null ? results : valuesFromResults(results, keys);\n    return Array.isArray(values) ? values : keys.map(() => values);\n  };\n}\n\nfunction createLoader(options) {\n  const batchFn = createBatchFn(options);\n  const newValue = new DataLoader(keys => batchFn(keys), options.dataLoaderOptions);\n  cache.set(options.info.fieldNodes, newValue);\n  return newValue;\n}\n\nfunction getLoader(options) {\n  const cachedValue = cache.get(options.info.fieldNodes);\n\n  if (cachedValue === undefined) {\n    return createLoader(options);\n  }\n\n  return cachedValue;\n}\n\nfunction batchDelegateToSchema(options) {\n  const key = options.key;\n\n  if (key == null) {\n    return null;\n  } else if (Array.isArray(key) && !key.length) {\n    return [];\n  }\n\n  const loader = getLoader(options);\n  return Array.isArray(key) ? loader.loadMany(key) : loader.load(key);\n}\n\nfunction createBatchDelegateFn(optionsOrArgsFromKeys, lazyOptionsFn, dataLoaderOptions, valuesFromResults) {\n  return typeof optionsOrArgsFromKeys === 'function' ? createBatchDelegateFnImpl({\n    argsFromKeys: optionsOrArgsFromKeys,\n    lazyOptionsFn,\n    dataLoaderOptions,\n    valuesFromResults\n  }) : createBatchDelegateFnImpl(optionsOrArgsFromKeys);\n}\n\nfunction createBatchDelegateFnImpl(options) {\n  return batchDelegateOptions => {\n    const loader = getLoader({ ...options,\n      ...batchDelegateOptions\n    });\n    return loader.load(batchDelegateOptions.key);\n  };\n}\n\nexport { batchDelegateToSchema, createBatchDelegateFn };","map":{"version":3,"sources":["../../../dist/batch-delegate/src/getLoader.js","../../../dist/batch-delegate/src/batchDelegateToSchema.js","../../../dist/batch-delegate/src/createBatchDelegateFn.js"],"names":[],"mappings":";;;AAGA,MAAM,KAAK,GAAG,IAAI,OAAJ,EAAd;;AACA,SAAS,aAAT,CAAuB,OAAvB,EAAgC;AAC5B,MAAI,EAAJ;;AACA,QAAM,YAAY,GAAG,CAAC,EAAE,GAAG,OAAO,CAAC,YAAd,MAAgC,IAAhC,IAAwC,EAAE,KAAK,KAAK,CAApD,GAAwD,EAAxD,GAA+D,IAAD,KAAW;AAAE,IAAA,GAAG,EAAE;AAAP,GAAX,CAAnF;AACA,QAAM;AAAE,IAAA,iBAAF;AAAqB,IAAA;AAArB,MAAuC,OAA7C;AACA,SAAO,MAAO,IAAP,IAAgB;AACnB,UAAM,OAAO,GAAG,MAAM,gBAAgB,CAAC;AACnC,MAAA,UAAU,EAAE,IAAI,WAAJ,CAAgB,YAAY,CAAC,OAAO,CAAC,IAAR,CAAa,UAAd,CAA5B,CADuB;AAEnC,MAAA,IAAI,EAAE,YAAY,CAAC,IAAD,CAFiB;AAGnC,UAAI,aAAa,IAAI,IAAjB,GAAwB,OAAxB,GAAkC,aAAa,CAAC,OAAD,CAAnD;AAHmC,KAAD,CAAtC;AAKA,UAAM,MAAM,GAAG,iBAAiB,IAAI,IAArB,GAA4B,OAA5B,GAAsC,iBAAiB,CAAC,OAAD,EAAU,IAAV,CAAtE;AACA,WAAO,KAAK,CAAC,OAAN,CAAc,MAAd,IAAwB,MAAxB,GAAiC,IAAI,CAAC,GAAL,CAAS,MAAM,MAAf,CAAxC;AACH,GARD;AASH;;AACD,SAAS,YAAT,CAAsB,OAAtB,EAA+B;AAC3B,QAAM,OAAO,GAAG,aAAa,CAAC,OAAD,CAA7B;AACA,QAAM,QAAQ,GAAG,IAAI,UAAJ,CAAe,IAAI,IAAI,OAAO,CAAC,IAAD,CAA9B,EAAsC,OAAO,CAAC,iBAA9C,CAAjB;AACA,EAAA,KAAK,CAAC,GAAN,CAAU,OAAO,CAAC,IAAR,CAAa,UAAvB,EAAmC,QAAnC;AACA,SAAO,QAAP;AACH;;AACM,SAAS,SAAT,CAAmB,OAAnB,EAA4B;AAC/B,QAAM,WAAW,GAAG,KAAK,CAAC,GAAN,CAAU,OAAO,CAAC,IAAR,CAAa,UAAvB,CAApB;;AACA,MAAI,WAAW,KAAK,SAApB,EAA+B;AAC3B,WAAO,YAAY,CAAC,OAAD,CAAnB;AACH;;AACD,SAAO,WAAP;AACJ;;AC7BO,SAAS,qBAAT,CAA+B,OAA/B,EAAwC;AAC3C,QAAM,GAAG,GAAG,OAAO,CAAC,GAApB;;AACA,MAAI,GAAG,IAAI,IAAX,EAAiB;AACb,WAAO,IAAP;AACH,GAFD,MAGK,IAAI,KAAK,CAAC,OAAN,CAAc,GAAd,KAAsB,CAAC,GAAG,CAAC,MAA/B,EAAuC;AACxC,WAAO,EAAP;AACH;;AACD,QAAM,MAAM,GAAG,SAAS,CAAC,OAAD,CAAxB;AACA,SAAO,KAAK,CAAC,OAAN,CAAc,GAAd,IAAqB,MAAM,CAAC,QAAP,CAAgB,GAAhB,CAArB,GAA4C,MAAM,CAAC,IAAP,CAAY,GAAZ,CAAnD;AACJ;;ACVO,SAAS,qBAAT,CAA+B,qBAA/B,EAAsD,aAAtD,EAAqE,iBAArE,EAAwF,iBAAxF,EAA2G;AAC9G,SAAO,OAAO,qBAAP,KAAiC,UAAjC,GACD,yBAAyB,CAAC;AACxB,IAAA,YAAY,EAAE,qBADU;AAExB,IAAA,aAFwB;AAGxB,IAAA,iBAHwB;AAIxB,IAAA;AAJwB,GAAD,CADxB,GAOD,yBAAyB,CAAC,qBAAD,CAP/B;AAQH;;AACD,SAAS,yBAAT,CAAmC,OAAnC,EAA4C;AACxC,SAAO,oBAAoB,IAAI;AAC3B,UAAM,MAAM,GAAG,SAAS,CAAC,EACrB,GAAG,OADkB;AAErB,SAAG;AAFkB,KAAD,CAAxB;AAIA,WAAO,MAAM,CAAC,IAAP,CAAY,oBAAoB,CAAC,GAAjC,CAAP;AACH,GAND;AAOJ","sourcesContent":["import { getNamedType, GraphQLList } from 'graphql';\nimport DataLoader from 'dataloader';\nimport { delegateToSchema } from '@graphql-tools/delegate';\nconst cache = new WeakMap();\nfunction createBatchFn(options) {\n    var _a;\n    const argsFromKeys = (_a = options.argsFromKeys) !== null && _a !== void 0 ? _a : ((keys) => ({ ids: keys }));\n    const { valuesFromResults, lazyOptionsFn } = options;\n    return async (keys) => {\n        const results = await delegateToSchema({\n            returnType: new GraphQLList(getNamedType(options.info.returnType)),\n            args: argsFromKeys(keys),\n            ...(lazyOptionsFn == null ? options : lazyOptionsFn(options)),\n        });\n        const values = valuesFromResults == null ? results : valuesFromResults(results, keys);\n        return Array.isArray(values) ? values : keys.map(() => values);\n    };\n}\nfunction createLoader(options) {\n    const batchFn = createBatchFn(options);\n    const newValue = new DataLoader(keys => batchFn(keys), options.dataLoaderOptions);\n    cache.set(options.info.fieldNodes, newValue);\n    return newValue;\n}\nexport function getLoader(options) {\n    const cachedValue = cache.get(options.info.fieldNodes);\n    if (cachedValue === undefined) {\n        return createLoader(options);\n    }\n    return cachedValue;\n}\n//# sourceMappingURL=getLoader.js.map","import { getLoader } from './getLoader';\nexport function batchDelegateToSchema(options) {\n    const key = options.key;\n    if (key == null) {\n        return null;\n    }\n    else if (Array.isArray(key) && !key.length) {\n        return [];\n    }\n    const loader = getLoader(options);\n    return Array.isArray(key) ? loader.loadMany(key) : loader.load(key);\n}\n//# sourceMappingURL=batchDelegateToSchema.js.map","import { getLoader } from './getLoader';\nexport function createBatchDelegateFn(optionsOrArgsFromKeys, lazyOptionsFn, dataLoaderOptions, valuesFromResults) {\n    return typeof optionsOrArgsFromKeys === 'function'\n        ? createBatchDelegateFnImpl({\n            argsFromKeys: optionsOrArgsFromKeys,\n            lazyOptionsFn,\n            dataLoaderOptions,\n            valuesFromResults,\n        })\n        : createBatchDelegateFnImpl(optionsOrArgsFromKeys);\n}\nfunction createBatchDelegateFnImpl(options) {\n    return batchDelegateOptions => {\n        const loader = getLoader({\n            ...options,\n            ...batchDelegateOptions,\n        });\n        return loader.load(batchDelegateOptions.key);\n    };\n}\n//# sourceMappingURL=createBatchDelegateFn.js.map"]},"metadata":{},"sourceType":"module"}