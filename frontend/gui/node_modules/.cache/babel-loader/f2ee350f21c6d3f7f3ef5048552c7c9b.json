{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\programs\\\\django+react\\\\tutorials\\\\graphql_django\\\\frontend\\\\gui\\\\src\\\\components\\\\Posts\\\\PostEdit.js\";\nimport React, { useState, useRef, useEffect } from 'react';\nimport { Button, Form } from 'semantic-ui-react';\nimport { useMutation } from '@apollo/react-hooks';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { POST_EDIT_MUTATION, POST_FIND_MUTATION } from '../api/post';\n\nconst PostEdit = () => {\n  const [allowButton, setAllowButton] = useState(false);\n  const [inputValue, setInputValue] = useState(); //const [ inputValue, setInputValue ] = useState()\n\n  const titleRef = useRef();\n  const contentRef = useRef();\n  const {\n    id\n  } = useParams();\n  const history = useHistory();\n  const [postEdit] = useMutation(POST_EDIT_MUTATION);\n  const [postFind, {\n    data: detailData\n  }] = useMutation(POST_FIND_MUTATION);\n  useEffect(() => {\n    postFind({\n      variables: {\n        id: id\n      }\n    });\n  }, [id]);\n  useEffect(() => {\n    console.log(detailData);\n  }, [detailData]);\n\n  const handleOnSubmit = () => {\n    const titleValue = titleRef.current.value;\n    const contentValue = contentRef.current.value;\n    postEdit({\n      variables: {\n        id: id,\n        title: titleValue,\n        content: contentValue\n      }\n    });\n    history.push('/');\n  };\n\n  const checkForm = () => {\n    if (titleRef.current.value && contentRef.current.value) {\n      setAllowButton(true);\n    } else {\n      setAllowButton(false);\n    }\n  };\n\n  const onInputChange = value => {\n    setInputValue(value);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"post-create-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }, detailData ? /*#__PURE__*/React.createElement(Form, {\n    onChange: checkForm,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Form.Field, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 25\n    }\n  }, \"Title\"), /*#__PURE__*/React.createElement(\"input\", {\n    onChange: event => onInputChange(event.target.value),\n    value: inputValue,\n    ref: titleRef,\n    placeholder: \"Title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(Form.Field, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 25\n    }\n  }, \"Content\"), /*#__PURE__*/React.createElement(\"textarea\", {\n    ref: contentRef,\n    placeholder: \"Enter something...\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 25\n    }\n  })), allowButton ? /*#__PURE__*/React.createElement(Button, {\n    onClick: handleOnSubmit,\n    className: \"submit-button\",\n    type: \"button\",\n    primary: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 25\n    }\n  }, \"Edit\") : /*#__PURE__*/React.createElement(Button, {\n    disabled: true,\n    onClick: handleOnSubmit,\n    className: \"submit-button\",\n    type: \"button\",\n    primary: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 25\n    }\n  }, \"Edit\")) : null);\n};\n\nexport default PostEdit;","map":{"version":3,"sources":["C:/Users/Admin/programs/django+react/tutorials/graphql_django/frontend/gui/src/components/Posts/PostEdit.js"],"names":["React","useState","useRef","useEffect","Button","Form","useMutation","useHistory","useParams","POST_EDIT_MUTATION","POST_FIND_MUTATION","PostEdit","allowButton","setAllowButton","inputValue","setInputValue","titleRef","contentRef","id","history","postEdit","postFind","data","detailData","variables","console","log","handleOnSubmit","titleValue","current","value","contentValue","title","content","push","checkForm","onInputChange","event","target"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from 'react'\r\nimport { Button, Form } from 'semantic-ui-react'\r\nimport { useMutation } from '@apollo/react-hooks'\r\nimport { useHistory, useParams } from 'react-router-dom'\r\n\r\nimport { POST_EDIT_MUTATION, POST_FIND_MUTATION } from '../api/post' \r\n\r\nconst PostEdit = () => {    \r\n    const [ allowButton, setAllowButton ] = useState(false)\r\n    const [ inputValue, setInputValue ] = useState()\r\n    //const [ inputValue, setInputValue ] = useState()\r\n    const titleRef = useRef()\r\n    const contentRef = useRef()\r\n    \r\n    const { id } = useParams()\r\n    const history = useHistory()\r\n    const [ postEdit ] = useMutation(POST_EDIT_MUTATION) \r\n    const [ postFind, { data: detailData } ] = useMutation(POST_FIND_MUTATION)\r\n\r\n    \r\n    useEffect(() => {\r\n        postFind({variables: { id: id }})\r\n    }, [id])\r\n\r\n    useEffect(() => {\r\n        console.log(detailData)\r\n    }, [detailData])\r\n\r\n\r\n    const handleOnSubmit = () => {\r\n        const titleValue = titleRef.current.value\r\n        const contentValue = contentRef.current.value\r\n\r\n        postEdit({ variables: { id: id, title: titleValue, content: contentValue } })\r\n        history.push('/')\r\n    }\r\n\r\n    const checkForm = () => {\r\n        if (titleRef.current.value && contentRef.current.value) {\r\n            setAllowButton(true)\r\n        }\r\n\r\n        else {\r\n            setAllowButton(false)\r\n        }\r\n    }\r\n\r\n    const onInputChange = (value) => {\r\n        setInputValue(value)\r\n    }\r\n    \r\n    return (\r\n        <div className=\"post-create-container\">\r\n            {(detailData) ? (\r\n                <Form onChange={checkForm}>\r\n                    <Form.Field>\r\n                        <label>Title</label>\r\n                        <input onChange={event => onInputChange(event.target.value)} value={inputValue} ref={titleRef} placeholder=\"Title\" />\r\n                    </Form.Field>\r\n                    <Form.Field>\r\n                        <label>Content</label>\r\n                        <textarea ref={contentRef} placeholder='Enter something...' />\r\n                    </Form.Field>\r\n                    {(allowButton) ? (\r\n                        <Button onClick={handleOnSubmit} className=\"submit-button\" type='button' primary>Edit</Button>\r\n                    ) : (\r\n                        <Button disabled onClick={handleOnSubmit} className=\"submit-button\" type='button' primary>Edit</Button>\r\n                    )}\r\n                </Form>\r\n            ) : null }\r\n        </div> \r\n    )\r\n}\r\n\r\nexport default PostEdit\r\n"]},"metadata":{},"sourceType":"module"}