{"ast":null,"code":"'use strict';\n\nconst {\n  GraphQLScalarType,\n  GraphQLError\n} = require('graphql');\n\nconst Upload = require('./Upload');\n/**\n * A GraphQL `Upload` scalar that can be used in a\n * [`GraphQLSchema`](https://graphql.org/graphql-js/type/#graphqlschema).\n * It’s value in resolvers is a promise that resolves\n * [file upload details]{@link FileUpload} for processing and storage.\n * @kind class\n * @name GraphQLUpload\n * @example <caption>Ways to `import`.</caption>\n * ```js\n * import { GraphQLUpload } from 'graphql-upload';\n * ```\n *\n * ```js\n * import GraphQLUpload from 'graphql-upload/public/GraphQLUpload.js';\n * ```\n * @example <caption>Ways to `require`.</caption>\n * ```js\n * const { GraphQLUpload } = require('graphql-upload');\n * ```\n *\n * ```js\n * const GraphQLUpload = require('graphql-upload/public/GraphQLUpload');\n * ```\n * @example <caption>Setup for a schema built with [`makeExecutableSchema`](https://apollographql.com/docs/graphql-tools/generate-schema#makeExecutableSchema).</caption>\n * ```js\n * const { makeExecutableSchema } = require('graphql-tools');\n * const { GraphQLUpload } = require('graphql-upload');\n *\n * const schema = makeExecutableSchema({\n *   typeDefs: /* GraphQL *\\/ `\n *     scalar Upload\n *   `,\n *   resolvers: {\n *     Upload: GraphQLUpload,\n *   },\n * });\n * ```\n * @example <caption>A manually constructed schema with an image upload mutation.</caption>\n * ```js\n * const {\n *   GraphQLSchema,\n *   GraphQLObjectType,\n *   GraphQLBoolean,\n * } = require('graphql');\n * const { GraphQLUpload } = require('graphql-upload');\n *\n * const schema = new GraphQLSchema({\n *   mutation: new GraphQLObjectType({\n *     name: 'Mutation',\n *     fields: {\n *       uploadImage: {\n *         description: 'Uploads an image.',\n *         type: GraphQLBoolean,\n *         args: {\n *           image: {\n *             description: 'Image file.',\n *             type: GraphQLUpload,\n *           },\n *         },\n *         async resolve(parent, { image }) {\n *           const { filename, mimetype, createReadStream } = await image;\n *           const stream = createReadStream();\n *           // Promisify the stream and store the file, then…\n *           return true;\n *         },\n *       },\n *     },\n *   }),\n * });\n * ```\n */\n\n\nmodule.exports = new GraphQLScalarType({\n  name: 'Upload',\n  description: 'The `Upload` scalar type represents a file upload.',\n\n  parseValue(value) {\n    if (value instanceof Upload) return value.promise;\n    throw new GraphQLError('Upload value invalid.');\n  },\n\n  parseLiteral(ast) {\n    throw new GraphQLError('Upload literal unsupported.', ast);\n  },\n\n  serialize() {\n    throw new GraphQLError('Upload serialization unsupported.');\n  }\n\n});","map":{"version":3,"sources":["C:/Users/Admin/programs/django+react/tutorials/graphql_django/frontend/gui/node_modules/graphql-upload/public/GraphQLUpload.js"],"names":["GraphQLScalarType","GraphQLError","require","Upload","module","exports","name","description","parseValue","value","promise","parseLiteral","ast","serialize"],"mappings":"AAAA;;AAEA,MAAM;AAAEA,EAAAA,iBAAF;AAAqBC,EAAAA;AAArB,IAAsCC,OAAO,CAAC,SAAD,CAAnD;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,UAAD,CAAtB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuEAE,MAAM,CAACC,OAAP,GAAiB,IAAIL,iBAAJ,CAAsB;AACrCM,EAAAA,IAAI,EAAE,QAD+B;AAErCC,EAAAA,WAAW,EAAE,oDAFwB;;AAGrCC,EAAAA,UAAU,CAACC,KAAD,EAAQ;AAChB,QAAIA,KAAK,YAAYN,MAArB,EAA6B,OAAOM,KAAK,CAACC,OAAb;AAC7B,UAAM,IAAIT,YAAJ,CAAiB,uBAAjB,CAAN;AACD,GANoC;;AAOrCU,EAAAA,YAAY,CAACC,GAAD,EAAM;AAChB,UAAM,IAAIX,YAAJ,CAAiB,6BAAjB,EAAgDW,GAAhD,CAAN;AACD,GAToC;;AAUrCC,EAAAA,SAAS,GAAG;AACV,UAAM,IAAIZ,YAAJ,CAAiB,mCAAjB,CAAN;AACD;;AAZoC,CAAtB,CAAjB","sourcesContent":["'use strict';\n\nconst { GraphQLScalarType, GraphQLError } = require('graphql');\nconst Upload = require('./Upload');\n\n/**\n * A GraphQL `Upload` scalar that can be used in a\n * [`GraphQLSchema`](https://graphql.org/graphql-js/type/#graphqlschema).\n * It’s value in resolvers is a promise that resolves\n * [file upload details]{@link FileUpload} for processing and storage.\n * @kind class\n * @name GraphQLUpload\n * @example <caption>Ways to `import`.</caption>\n * ```js\n * import { GraphQLUpload } from 'graphql-upload';\n * ```\n *\n * ```js\n * import GraphQLUpload from 'graphql-upload/public/GraphQLUpload.js';\n * ```\n * @example <caption>Ways to `require`.</caption>\n * ```js\n * const { GraphQLUpload } = require('graphql-upload');\n * ```\n *\n * ```js\n * const GraphQLUpload = require('graphql-upload/public/GraphQLUpload');\n * ```\n * @example <caption>Setup for a schema built with [`makeExecutableSchema`](https://apollographql.com/docs/graphql-tools/generate-schema#makeExecutableSchema).</caption>\n * ```js\n * const { makeExecutableSchema } = require('graphql-tools');\n * const { GraphQLUpload } = require('graphql-upload');\n *\n * const schema = makeExecutableSchema({\n *   typeDefs: /* GraphQL *\\/ `\n *     scalar Upload\n *   `,\n *   resolvers: {\n *     Upload: GraphQLUpload,\n *   },\n * });\n * ```\n * @example <caption>A manually constructed schema with an image upload mutation.</caption>\n * ```js\n * const {\n *   GraphQLSchema,\n *   GraphQLObjectType,\n *   GraphQLBoolean,\n * } = require('graphql');\n * const { GraphQLUpload } = require('graphql-upload');\n *\n * const schema = new GraphQLSchema({\n *   mutation: new GraphQLObjectType({\n *     name: 'Mutation',\n *     fields: {\n *       uploadImage: {\n *         description: 'Uploads an image.',\n *         type: GraphQLBoolean,\n *         args: {\n *           image: {\n *             description: 'Image file.',\n *             type: GraphQLUpload,\n *           },\n *         },\n *         async resolve(parent, { image }) {\n *           const { filename, mimetype, createReadStream } = await image;\n *           const stream = createReadStream();\n *           // Promisify the stream and store the file, then…\n *           return true;\n *         },\n *       },\n *     },\n *   }),\n * });\n * ```\n */\nmodule.exports = new GraphQLScalarType({\n  name: 'Upload',\n  description: 'The `Upload` scalar type represents a file upload.',\n  parseValue(value) {\n    if (value instanceof Upload) return value.promise;\n    throw new GraphQLError('Upload value invalid.');\n  },\n  parseLiteral(ast) {\n    throw new GraphQLError('Upload literal unsupported.', ast);\n  },\n  serialize() {\n    throw new GraphQLError('Upload serialization unsupported.');\n  },\n});\n"]},"metadata":{},"sourceType":"script"}