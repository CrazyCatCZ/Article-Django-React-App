{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar _require = require('./CompilerError'),\n    createCompilerError = _require.createCompilerError;\n\nvar ID = 'id';\n/**\n * @public\n *\n * Determine if an AST node contains a fragment/operation definition.\n */\n\nfunction isExecutableDefinitionAST(ast) {\n  return ast.kind === 'FragmentDefinition' || ast.kind === 'OperationDefinition';\n}\n/**\n * @public\n *\n * Determine if an AST node contains a schema definition.\n */\n\n\nfunction isSchemaDefinitionAST(ast) {\n  return ast.kind === 'SchemaDefinition' || ast.kind === 'ScalarTypeDefinition' || ast.kind === 'ObjectTypeDefinition' || ast.kind === 'InterfaceTypeDefinition' || ast.kind === 'UnionTypeDefinition' || ast.kind === 'EnumTypeDefinition' || ast.kind === 'InputObjectTypeDefinition' || ast.kind === 'DirectiveDefinition' || ast.kind === 'ScalarTypeExtension' || ast.kind === 'ObjectTypeExtension' || ast.kind === 'InterfaceTypeExtension' || ast.kind === 'UnionTypeExtension' || ast.kind === 'EnumTypeExtension' || ast.kind === 'InputObjectTypeExtension';\n}\n/**\n * Generates an id field on the given type.\n */\n\n\nfunction generateIDField(schema, type) {\n  var idField = schema.getFieldByName(type, 'id');\n\n  if (idField == null) {\n    throw new createCompilerError(\"Expected an 'id' field on type '\".concat(schema.getTypeString(type), \"'.\"));\n  }\n\n  var idType = schema.assertScalarFieldType(schema.getFieldType(idField));\n  return {\n    kind: 'ScalarField',\n    alias: ID,\n    args: [],\n    directives: [],\n    handles: null,\n    loc: {\n      kind: 'Generated'\n    },\n    metadata: null,\n    name: ID,\n    type: idType\n  };\n}\n\nfunction getNullableBooleanInput(schema) {\n  return schema.assertInputType(schema.expectBooleanType());\n}\n\nfunction getNonNullBooleanInput(schema) {\n  return schema.assertInputType(schema.getNonNullType(schema.expectBooleanType()));\n}\n\nfunction getNullableStringInput(schema) {\n  return schema.assertInputType(schema.expectStringType());\n}\n\nfunction getNonNullStringInput(schema) {\n  return schema.assertInputType(schema.getNonNullType(schema.expectStringType()));\n}\n\nfunction getNullableIdInput(schema) {\n  return schema.assertInputType(schema.expectIdType());\n}\n\nfunction getNonNullIdInput(schema) {\n  return schema.assertInputType(schema.getNonNullType(schema.expectIdType()));\n}\n\nmodule.exports = {\n  generateIDField: generateIDField,\n  isExecutableDefinitionAST: isExecutableDefinitionAST,\n  isSchemaDefinitionAST: isSchemaDefinitionAST,\n  getNullableBooleanInput: getNullableBooleanInput,\n  getNonNullBooleanInput: getNonNullBooleanInput,\n  getNullableStringInput: getNullableStringInput,\n  getNonNullStringInput: getNonNullStringInput,\n  getNullableIdInput: getNullableIdInput,\n  getNonNullIdInput: getNonNullIdInput\n};","map":{"version":3,"sources":["C:/Users/Admin/programs/django+react/tutorials/graphql_django/frontend/gui/node_modules/relay-compiler/lib/core/SchemaUtils.js"],"names":["_require","require","createCompilerError","ID","isExecutableDefinitionAST","ast","kind","isSchemaDefinitionAST","generateIDField","schema","type","idField","getFieldByName","concat","getTypeString","idType","assertScalarFieldType","getFieldType","alias","args","directives","handles","loc","metadata","name","getNullableBooleanInput","assertInputType","expectBooleanType","getNonNullBooleanInput","getNonNullType","getNullableStringInput","expectStringType","getNonNullStringInput","getNullableIdInput","expectIdType","getNonNullIdInput","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar _require = require('./CompilerError'),\n    createCompilerError = _require.createCompilerError;\n\nvar ID = 'id';\n/**\n * @public\n *\n * Determine if an AST node contains a fragment/operation definition.\n */\n\nfunction isExecutableDefinitionAST(ast) {\n  return ast.kind === 'FragmentDefinition' || ast.kind === 'OperationDefinition';\n}\n/**\n * @public\n *\n * Determine if an AST node contains a schema definition.\n */\n\n\nfunction isSchemaDefinitionAST(ast) {\n  return ast.kind === 'SchemaDefinition' || ast.kind === 'ScalarTypeDefinition' || ast.kind === 'ObjectTypeDefinition' || ast.kind === 'InterfaceTypeDefinition' || ast.kind === 'UnionTypeDefinition' || ast.kind === 'EnumTypeDefinition' || ast.kind === 'InputObjectTypeDefinition' || ast.kind === 'DirectiveDefinition' || ast.kind === 'ScalarTypeExtension' || ast.kind === 'ObjectTypeExtension' || ast.kind === 'InterfaceTypeExtension' || ast.kind === 'UnionTypeExtension' || ast.kind === 'EnumTypeExtension' || ast.kind === 'InputObjectTypeExtension';\n}\n/**\n * Generates an id field on the given type.\n */\n\n\nfunction generateIDField(schema, type) {\n  var idField = schema.getFieldByName(type, 'id');\n\n  if (idField == null) {\n    throw new createCompilerError(\"Expected an 'id' field on type '\".concat(schema.getTypeString(type), \"'.\"));\n  }\n\n  var idType = schema.assertScalarFieldType(schema.getFieldType(idField));\n  return {\n    kind: 'ScalarField',\n    alias: ID,\n    args: [],\n    directives: [],\n    handles: null,\n    loc: {\n      kind: 'Generated'\n    },\n    metadata: null,\n    name: ID,\n    type: idType\n  };\n}\n\nfunction getNullableBooleanInput(schema) {\n  return schema.assertInputType(schema.expectBooleanType());\n}\n\nfunction getNonNullBooleanInput(schema) {\n  return schema.assertInputType(schema.getNonNullType(schema.expectBooleanType()));\n}\n\nfunction getNullableStringInput(schema) {\n  return schema.assertInputType(schema.expectStringType());\n}\n\nfunction getNonNullStringInput(schema) {\n  return schema.assertInputType(schema.getNonNullType(schema.expectStringType()));\n}\n\nfunction getNullableIdInput(schema) {\n  return schema.assertInputType(schema.expectIdType());\n}\n\nfunction getNonNullIdInput(schema) {\n  return schema.assertInputType(schema.getNonNullType(schema.expectIdType()));\n}\n\nmodule.exports = {\n  generateIDField: generateIDField,\n  isExecutableDefinitionAST: isExecutableDefinitionAST,\n  isSchemaDefinitionAST: isSchemaDefinitionAST,\n  getNullableBooleanInput: getNullableBooleanInput,\n  getNonNullBooleanInput: getNonNullBooleanInput,\n  getNullableStringInput: getNullableStringInput,\n  getNonNullStringInput: getNonNullStringInput,\n  getNullableIdInput: getNullableIdInput,\n  getNonNullIdInput: getNonNullIdInput\n};"]},"metadata":{},"sourceType":"script"}