{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\programs\\\\django+react\\\\tutorials\\\\graphql_django\\\\frontend\\\\gui\\\\src\\\\components\\\\Posts\\\\PostDetail\\\\PostDetail.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Item, Button, Comment, Header, Form } from 'semantic-ui-react';\nimport { useMutation } from '@apollo/react-hooks';\nimport { useParams } from 'react-router-dom';\nimport { POST_FIND_MUTATION } from '../../api/post';\nimport { COMMENT_ADD_MUTATION } from '../../api/comment';\nimport CommentsMap from '../../Comments/CommentsMap';\nimport CommentCreateForm from '../../Comments/CommentCreateForm';\nimport PostButtons from './PostButtons';\nconst DEFAULT_IMAGE = 'https://miro.medium.com/max/550/1*TxgjUE2uJuiRUVVmE_kU6g.png';\n\nconst PostDetail = () => {\n  const {\n    id\n  } = useParams();\n  const user = localStorage.getItem('user'); //set likes temporarily on frontend\n\n  const [likes, setLikes] = useState(0);\n  const [postFind, {\n    data: detailData\n  }] = useMutation(POST_FIND_MUTATION);\n  const [commentAdd] = useMutation(COMMENT_ADD_MUTATION);\n  const commentRef = useRef();\n  const [allowButton, setAllowButton] = useState(false);\n  useEffect(() => {\n    if (detailData) {\n      setLikes(detailData.findPost.post.totalLikes);\n    }\n  }, [detailData]);\n  useEffect(() => {\n    if (id !== 'login' && id !== 'profile') {\n      postFind({\n        variables: {\n          id: id\n        }\n      });\n    }\n  }, [id]);\n\n  const handleOnComment = () => {\n    const contentValue = commentRef.current.value;\n    commentAdd({\n      variables: {\n        id: id,\n        user: user,\n        content: contentValue\n      }\n    });\n    window.location.reload(false);\n  };\n\n  const checkForm = () => {\n    if (commentRef.current.value) {\n      setAllowButton(true);\n    } else {\n      setAllowButton(false);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }, detailData ? /*#__PURE__*/React.createElement(Item.Group, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Item, {\n    className: \"post-detail-item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Item.Image, {\n    size: \"small\",\n    src: DEFAULT_IMAGE,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(Item.Content, {\n    className: \"post-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Item.Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 25\n    }\n  }, detailData.findPost.post.title), /*#__PURE__*/React.createElement(Item.Meta, {\n    className: \"post-user\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"a\", {\n    href: `profile/${detailData.findPost.post.user.username}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 29\n    }\n  }, detailData.findPost.post.user.username)), /*#__PURE__*/React.createElement(Item.Meta, {\n    className: \"post-user\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 25\n    }\n  }, detailData.findPost.post.posted), /*#__PURE__*/React.createElement(Item.Description, {\n    className: \"post-textfield\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 25\n    }\n  }, detailData.findPost.post.content), /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(PostButtons, {\n    id: id,\n    detailData: detailData,\n    likes: likes,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"comments-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(CommentsMap, {\n    detailData: detailData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(React.Fragment, null))))) : null);\n};\n\nexport default PostDetail;","map":{"version":3,"sources":["C:/Users/Admin/programs/django+react/tutorials/graphql_django/frontend/gui/src/components/Posts/PostDetail/PostDetail.js"],"names":["React","useState","useEffect","useRef","Item","Button","Comment","Header","Form","useMutation","useParams","POST_FIND_MUTATION","COMMENT_ADD_MUTATION","CommentsMap","CommentCreateForm","PostButtons","DEFAULT_IMAGE","PostDetail","id","user","localStorage","getItem","likes","setLikes","postFind","data","detailData","commentAdd","commentRef","allowButton","setAllowButton","findPost","post","totalLikes","variables","handleOnComment","contentValue","current","value","content","window","location","reload","checkForm","title","username","posted"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,SAASC,IAAT,EAAeC,MAAf,EAAuBC,OAAvB,EAAgCC,MAAhC,EAAwCC,IAAxC,QAAoD,mBAApD;AACA,SAASC,WAAT,QAA4B,qBAA5B;AACA,SAASC,SAAT,QAA0B,kBAA1B;AAEA,SAASC,kBAAT,QAAmC,gBAAnC;AACA,SAASC,oBAAT,QAAqC,mBAArC;AAEA,OAAOC,WAAP,MAAwB,4BAAxB;AACA,OAAOC,iBAAP,MAA8B,kCAA9B;AACA,OAAOC,WAAP,MAAwB,eAAxB;AAEA,MAAMC,aAAa,GAAG,8DAAtB;;AAEA,MAAMC,UAAU,GAAG,MAAM;AACrB,QAAM;AAAEC,IAAAA;AAAF,MAASR,SAAS,EAAxB;AAEA,QAAMS,IAAI,GAAGC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAb,CAHqB,CAIrB;;AACA,QAAM,CAAEC,KAAF,EAASC,QAAT,IAAsBtB,QAAQ,CAAC,CAAD,CAApC;AAEA,QAAM,CAAEuB,QAAF,EAAY;AAAEC,IAAAA,IAAI,EAAEC;AAAR,GAAZ,IAAqCjB,WAAW,CAACE,kBAAD,CAAtD;AACA,QAAM,CAAEgB,UAAF,IAAiBlB,WAAW,CAACG,oBAAD,CAAlC;AAEA,QAAMgB,UAAU,GAAGzB,MAAM,EAAzB;AACA,QAAM,CAAE0B,WAAF,EAAeC,cAAf,IAAkC7B,QAAQ,CAAC,KAAD,CAAhD;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIwB,UAAJ,EAAgB;AACZH,MAAAA,QAAQ,CAACG,UAAU,CAACK,QAAX,CAAoBC,IAApB,CAAyBC,UAA1B,CAAR;AACH;AACJ,GAJQ,EAIN,CAACP,UAAD,CAJM,CAAT;AAMAxB,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIgB,EAAE,KAAK,OAAP,IAAkBA,EAAE,KAAK,SAA7B,EAAwC;AACpCM,MAAAA,QAAQ,CAAC;AAAEU,QAAAA,SAAS,EAAE;AAAEhB,UAAAA,EAAE,EAAEA;AAAN;AAAb,OAAD,CAAR;AACH;AACJ,GAJQ,EAIN,CAACA,EAAD,CAJM,CAAT;;AAMA,QAAMiB,eAAe,GAAG,MAAM;AAC1B,UAAMC,YAAY,GAAGR,UAAU,CAACS,OAAX,CAAmBC,KAAxC;AACAX,IAAAA,UAAU,CAAC;AAAEO,MAAAA,SAAS,EAAE;AAAEhB,QAAAA,EAAE,EAAEA,EAAN;AAAUC,QAAAA,IAAI,EAAEA,IAAhB;AAAsBoB,QAAAA,OAAO,EAAEH;AAA/B;AAAb,KAAD,CAAV;AACAI,IAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuB,KAAvB;AACH,GAJD;;AAMA,QAAMC,SAAS,GAAG,MAAM;AACpB,QAAIf,UAAU,CAACS,OAAX,CAAmBC,KAAvB,EAA8B;AAC1BR,MAAAA,cAAc,CAAC,IAAD,CAAd;AACH,KAFD,MAIK;AACDA,MAAAA,cAAc,CAAC,KAAD,CAAd;AACH;AACJ,GARD;;AAUA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACMJ,UAAD,gBACD,oBAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,IAAD;AAAM,IAAA,SAAS,EAAC,kBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,IAAD,CAAM,KAAN;AAAY,IAAA,IAAI,EAAC,OAAjB;AAAyB,IAAA,GAAG,EAAEV,aAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAEI,oBAAC,IAAD,CAAM,OAAN;AAAc,IAAA,SAAS,EAAC,cAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,IAAD,CAAM,MAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAcU,UAAU,CAACK,QAAX,CAAoBC,IAApB,CAAyBY,KAAvC,CADJ,eAEI,oBAAC,IAAD,CAAM,IAAN;AAAW,IAAA,SAAS,EAAC,WAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAG,IAAA,IAAI,EAAG,WAAUlB,UAAU,CAACK,QAAX,CAAoBC,IAApB,CAAyBb,IAAzB,CAA8B0B,QAAS,EAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKnB,UAAU,CAACK,QAAX,CAAoBC,IAApB,CAAyBb,IAAzB,CAA8B0B,QADnC,CADJ,CAFJ,eAOI,oBAAC,IAAD,CAAM,IAAN;AAAW,IAAA,SAAS,EAAC,WAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAkCnB,UAAU,CAACK,QAAX,CAAoBC,IAApB,CAAyBc,MAA3D,CAPJ,eAQI,oBAAC,IAAD,CAAM,WAAN;AAAkB,IAAA,SAAS,EAAC,gBAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA8CpB,UAAU,CAACK,QAAX,CAAoBC,IAApB,CAAyBO,OAAvE,CARJ,eAUI,uDACI,oBAAC,WAAD;AAAa,IAAA,EAAE,EAAErB,EAAjB;AAAqB,IAAA,UAAU,EAAEQ,UAAjC;AAA6C,IAAA,KAAK,EAAEJ,KAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CAVJ,eAaI;AAAK,IAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,WAAD;AAAa,IAAA,UAAU,EAAEI,UAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAEI,yCAFJ,CAbJ,CAFJ,CADJ,CADC,GA0BD,IA3BJ,CADJ;AA+BH,CAxED;;AA0EA,eAAeT,UAAf","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\r\nimport { Item, Button, Comment, Header, Form } from 'semantic-ui-react'\r\nimport { useMutation } from '@apollo/react-hooks'\r\nimport { useParams } from 'react-router-dom'\r\n\r\nimport { POST_FIND_MUTATION } from '../../api/post'\r\nimport { COMMENT_ADD_MUTATION } from '../../api/comment'\r\n\r\nimport CommentsMap from '../../Comments/CommentsMap'\r\nimport CommentCreateForm from '../../Comments/CommentCreateForm'\r\nimport PostButtons from './PostButtons'\r\n\r\nconst DEFAULT_IMAGE = 'https://miro.medium.com/max/550/1*TxgjUE2uJuiRUVVmE_kU6g.png'\r\n\r\nconst PostDetail = () => {\r\n    const { id } = useParams()\r\n    \r\n    const user = localStorage.getItem('user')\r\n    //set likes temporarily on frontend\r\n    const [ likes, setLikes ] = useState(0)\r\n    \r\n    const [ postFind, { data: detailData } ] = useMutation(POST_FIND_MUTATION)\r\n    const [ commentAdd ] = useMutation(COMMENT_ADD_MUTATION)\r\n\r\n    const commentRef = useRef()\r\n    const [ allowButton, setAllowButton ] = useState(false)\r\n    \r\n    useEffect(() => {\r\n        if (detailData) {\r\n            setLikes(detailData.findPost.post.totalLikes)\r\n        }\r\n    }, [detailData])\r\n\r\n    useEffect(() => {\r\n        if (id !== 'login' && id !== 'profile') {\r\n            postFind({ variables: { id: id } })\r\n        }\r\n    }, [id])\r\n\r\n    const handleOnComment = () => {\r\n        const contentValue = commentRef.current.value\r\n        commentAdd({ variables: { id: id, user: user, content: contentValue } })\r\n        window.location.reload(false);\r\n    }\r\n\r\n    const checkForm = () => {\r\n        if (commentRef.current.value) {\r\n            setAllowButton(true)\r\n        }\r\n\r\n        else {\r\n            setAllowButton(false)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {(detailData) ? (\r\n            <Item.Group>\r\n                <Item className=\"post-detail-item\">\r\n                    <Item.Image size='small' src={DEFAULT_IMAGE} />\r\n                    <Item.Content className=\"post-content\">\r\n                        <Item.Header>{detailData.findPost.post.title}</Item.Header>\r\n                        <Item.Meta className=\"post-user\">\r\n                            <a href={`profile/${detailData.findPost.post.user.username}`}>\r\n                                {detailData.findPost.post.user.username}\r\n                            </a>\r\n                        </Item.Meta>\r\n                        <Item.Meta className=\"post-user\">{detailData.findPost.post.posted}</Item.Meta>\r\n                        <Item.Description className=\"post-textfield\">{detailData.findPost.post.content}</Item.Description>\r\n                        {/*Includes like, edit and delete buttons*/}\r\n                        <>\r\n                            <PostButtons id={id} detailData={detailData} likes={likes} />\r\n                        </>\r\n                        <div className=\"comments-container\">\r\n                            <CommentsMap detailData={detailData} />\r\n                            <>\r\n                                \r\n                            </>\r\n                        </div>\r\n                    </Item.Content>\r\n                </Item>\r\n            </Item.Group>\r\n        ) : null} \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PostDetail\r\n"]},"metadata":{},"sourceType":"module"}