{"ast":null,"code":"'use strict';\n\nconst defaultProcessRequest = require('./processRequest');\n/**\n * Creates [Express](https://expressjs.com) middleware that processes\n * [GraphQL multipart requests](https://github.com/jaydenseric/graphql-multipart-request-spec)\n * using [`processRequest`]{@link processRequest}, ignoring non-multipart\n * requests. It sets the request body to be\n * [similar to a conventional GraphQL POST request]{@link GraphQLOperation} for\n * following GraphQL middleware to consume.\n * @kind function\n * @name graphqlUploadExpress\n * @param {ProcessRequestOptions} options Middleware options. Any [`ProcessRequestOptions`]{@link ProcessRequestOptions} can be used.\n * @param {ProcessRequestFunction} [options.processRequest=processRequest] Used to process [GraphQL multipart requests](https://github.com/jaydenseric/graphql-multipart-request-spec).\n * @returns {Function} Express middleware.\n * @example <caption>Ways to `import`.</caption>\n * ```js\n * import { graphqlUploadExpress } from 'graphql-upload';\n * ```\n *\n * ```js\n * import graphqlUploadExpress from 'graphql-upload/public/graphqlUploadExpress.js';\n * ```\n * @example <caption>Ways to `require`.</caption>\n * ```js\n * const { graphqlUploadExpress } = require('graphql-upload');\n * ```\n *\n * ```js\n * const graphqlUploadExpress = require('graphql-upload/public/graphqlUploadExpress');\n * ```\n * @example <caption>Basic [`express-graphql`](https://npm.im/express-graphql) setup.</caption>\n * ```js\n * const express = require('express');\n * const graphqlHTTP = require('express-graphql');\n * const { graphqlUploadExpress } = require('graphql-upload');\n * const schema = require('./schema');\n *\n * express()\n *   .use(\n *     '/graphql',\n *     graphqlUploadExpress({ maxFileSize: 10000000, maxFiles: 10 }),\n *     graphqlHTTP({ schema })\n *   )\n *   .listen(3000);\n * ```\n */\n\n\nmodule.exports = function graphqlUploadExpress({\n  processRequest = defaultProcessRequest,\n  ...processRequestOptions\n} = {}) {\n  return function graphqlUploadExpressMiddleware(request, response, next) {\n    if (!request.is('multipart/form-data')) return next();\n    const finished = new Promise(resolve => request.on('end', resolve));\n    const {\n      send\n    } = response;\n\n    response.send = (...args) => {\n      finished.then(() => {\n        response.send = send;\n        response.send(...args);\n      });\n    };\n\n    processRequest(request, response, processRequestOptions).then(body => {\n      request.body = body;\n      next();\n    }).catch(error => {\n      if (error.status && error.expose) response.status(error.status);\n      next(error);\n    });\n  };\n};","map":{"version":3,"sources":["C:/Users/Admin/programs/django+react/tutorials/graphql_django/frontend/gui/node_modules/graphql-upload/public/graphqlUploadExpress.js"],"names":["defaultProcessRequest","require","module","exports","graphqlUploadExpress","processRequest","processRequestOptions","graphqlUploadExpressMiddleware","request","response","next","is","finished","Promise","resolve","on","send","args","then","body","catch","error","status","expose"],"mappings":"AAAA;;AAEA,MAAMA,qBAAqB,GAAGC,OAAO,CAAC,kBAAD,CAArC;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4CAC,MAAM,CAACC,OAAP,GAAiB,SAASC,oBAAT,CAA8B;AAC7CC,EAAAA,cAAc,GAAGL,qBAD4B;AAE7C,KAAGM;AAF0C,IAG3C,EAHa,EAGT;AACN,SAAO,SAASC,8BAAT,CAAwCC,OAAxC,EAAiDC,QAAjD,EAA2DC,IAA3D,EAAiE;AACtE,QAAI,CAACF,OAAO,CAACG,EAAR,CAAW,qBAAX,CAAL,EAAwC,OAAOD,IAAI,EAAX;AAExC,UAAME,QAAQ,GAAG,IAAIC,OAAJ,CAAaC,OAAD,IAAaN,OAAO,CAACO,EAAR,CAAW,KAAX,EAAkBD,OAAlB,CAAzB,CAAjB;AACA,UAAM;AAAEE,MAAAA;AAAF,QAAWP,QAAjB;;AAEAA,IAAAA,QAAQ,CAACO,IAAT,GAAgB,CAAC,GAAGC,IAAJ,KAAa;AAC3BL,MAAAA,QAAQ,CAACM,IAAT,CAAc,MAAM;AAClBT,QAAAA,QAAQ,CAACO,IAAT,GAAgBA,IAAhB;AACAP,QAAAA,QAAQ,CAACO,IAAT,CAAc,GAAGC,IAAjB;AACD,OAHD;AAID,KALD;;AAOAZ,IAAAA,cAAc,CAACG,OAAD,EAAUC,QAAV,EAAoBH,qBAApB,CAAd,CACGY,IADH,CACSC,IAAD,IAAU;AACdX,MAAAA,OAAO,CAACW,IAAR,GAAeA,IAAf;AACAT,MAAAA,IAAI;AACL,KAJH,EAKGU,KALH,CAKUC,KAAD,IAAW;AAChB,UAAIA,KAAK,CAACC,MAAN,IAAgBD,KAAK,CAACE,MAA1B,EAAkCd,QAAQ,CAACa,MAAT,CAAgBD,KAAK,CAACC,MAAtB;AAClCZ,MAAAA,IAAI,CAACW,KAAD,CAAJ;AACD,KARH;AASD,GAtBD;AAuBD,CA3BD","sourcesContent":["'use strict';\n\nconst defaultProcessRequest = require('./processRequest');\n\n/**\n * Creates [Express](https://expressjs.com) middleware that processes\n * [GraphQL multipart requests](https://github.com/jaydenseric/graphql-multipart-request-spec)\n * using [`processRequest`]{@link processRequest}, ignoring non-multipart\n * requests. It sets the request body to be\n * [similar to a conventional GraphQL POST request]{@link GraphQLOperation} for\n * following GraphQL middleware to consume.\n * @kind function\n * @name graphqlUploadExpress\n * @param {ProcessRequestOptions} options Middleware options. Any [`ProcessRequestOptions`]{@link ProcessRequestOptions} can be used.\n * @param {ProcessRequestFunction} [options.processRequest=processRequest] Used to process [GraphQL multipart requests](https://github.com/jaydenseric/graphql-multipart-request-spec).\n * @returns {Function} Express middleware.\n * @example <caption>Ways to `import`.</caption>\n * ```js\n * import { graphqlUploadExpress } from 'graphql-upload';\n * ```\n *\n * ```js\n * import graphqlUploadExpress from 'graphql-upload/public/graphqlUploadExpress.js';\n * ```\n * @example <caption>Ways to `require`.</caption>\n * ```js\n * const { graphqlUploadExpress } = require('graphql-upload');\n * ```\n *\n * ```js\n * const graphqlUploadExpress = require('graphql-upload/public/graphqlUploadExpress');\n * ```\n * @example <caption>Basic [`express-graphql`](https://npm.im/express-graphql) setup.</caption>\n * ```js\n * const express = require('express');\n * const graphqlHTTP = require('express-graphql');\n * const { graphqlUploadExpress } = require('graphql-upload');\n * const schema = require('./schema');\n *\n * express()\n *   .use(\n *     '/graphql',\n *     graphqlUploadExpress({ maxFileSize: 10000000, maxFiles: 10 }),\n *     graphqlHTTP({ schema })\n *   )\n *   .listen(3000);\n * ```\n */\nmodule.exports = function graphqlUploadExpress({\n  processRequest = defaultProcessRequest,\n  ...processRequestOptions\n} = {}) {\n  return function graphqlUploadExpressMiddleware(request, response, next) {\n    if (!request.is('multipart/form-data')) return next();\n\n    const finished = new Promise((resolve) => request.on('end', resolve));\n    const { send } = response;\n\n    response.send = (...args) => {\n      finished.then(() => {\n        response.send = send;\n        response.send(...args);\n      });\n    };\n\n    processRequest(request, response, processRequestOptions)\n      .then((body) => {\n        request.body = body;\n        next();\n      })\n      .catch((error) => {\n        if (error.status && error.expose) response.status(error.status);\n        next(error);\n      });\n  };\n};\n"]},"metadata":{},"sourceType":"script"}