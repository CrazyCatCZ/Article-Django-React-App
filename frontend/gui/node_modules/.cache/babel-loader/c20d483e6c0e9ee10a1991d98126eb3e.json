{"ast":null,"code":"'use strict';\n\nconst defaultProcessRequest = require('./processRequest');\n/**\n * Creates [Koa](https://koajs.com) middleware that processes\n * [GraphQL multipart requests](https://github.com/jaydenseric/graphql-multipart-request-spec)\n * using [`processRequest`]{@link processRequest}, ignoring non-multipart\n * requests. It sets the request body to be\n * [similar to a conventional GraphQL POST request]{@link GraphQLOperation} for\n * following GraphQL middleware to consume.\n * @kind function\n * @name graphqlUploadKoa\n * @param {ProcessRequestOptions} options Middleware options. Any [`ProcessRequestOptions`]{@link ProcessRequestOptions} can be used.\n * @param {ProcessRequestFunction} [options.processRequest=processRequest] Used to process [GraphQL multipart requests](https://github.com/jaydenseric/graphql-multipart-request-spec).\n * @returns {Function} Koa middleware.\n * @example <caption>Ways to `import`.</caption>\n * ```js\n * import { graphqlUploadKoa } from 'graphql-upload';\n * ```\n *\n * ```js\n * import graphqlUploadKoa from 'graphql-upload/public/graphqlUploadKoa.js';\n * ```\n * @example <caption>Ways to `require`.</caption>\n * ```js\n * const { graphqlUploadKoa } = require('graphql-upload');\n * ```\n *\n * ```js\n * const graphqlUploadKoa = require('graphql-upload/public/graphqlUploadKoa');\n * ```\n * @example <caption>Basic [`graphql-api-koa`](https://npm.im/graphql-api-koa) setup.</caption>\n * ```js\n * const Koa = require('koa');\n * const bodyParser = require('koa-bodyparser');\n * const { errorHandler, execute } = require('graphql-api-koa');\n * const { graphqlUploadKoa } = require('graphql-upload');\n * const schema = require('./schema');\n *\n * new Koa()\n *   .use(errorHandler())\n *   .use(bodyParser())\n *   .use(graphqlUploadKoa({ maxFileSize: 10000000, maxFiles: 10 }))\n *   .use(execute({ schema }))\n *   .listen(3000);\n * ```\n */\n\n\nmodule.exports = function graphqlUploadKoa({\n  processRequest = defaultProcessRequest,\n  ...processRequestOptions\n} = {}) {\n  return async function graphqlUploadKoaMiddleware(ctx, next) {\n    if (!ctx.request.is('multipart/form-data')) return next();\n    const finished = new Promise(resolve => ctx.req.on('end', resolve));\n\n    try {\n      ctx.request.body = await processRequest(ctx.req, ctx.res, processRequestOptions);\n      await next();\n    } finally {\n      await finished;\n    }\n  };\n};","map":{"version":3,"sources":["C:/Users/Admin/programs/django+react/tutorials/graphql_django/frontend/gui/node_modules/graphql-upload/public/graphqlUploadKoa.js"],"names":["defaultProcessRequest","require","module","exports","graphqlUploadKoa","processRequest","processRequestOptions","graphqlUploadKoaMiddleware","ctx","next","request","is","finished","Promise","resolve","req","on","body","res"],"mappings":"AAAA;;AAEA,MAAMA,qBAAqB,GAAGC,OAAO,CAAC,kBAAD,CAArC;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4CAC,MAAM,CAACC,OAAP,GAAiB,SAASC,gBAAT,CAA0B;AACzCC,EAAAA,cAAc,GAAGL,qBADwB;AAEzC,KAAGM;AAFsC,IAGvC,EAHa,EAGT;AACN,SAAO,eAAeC,0BAAf,CAA0CC,GAA1C,EAA+CC,IAA/C,EAAqD;AAC1D,QAAI,CAACD,GAAG,CAACE,OAAJ,CAAYC,EAAZ,CAAe,qBAAf,CAAL,EAA4C,OAAOF,IAAI,EAAX;AAE5C,UAAMG,QAAQ,GAAG,IAAIC,OAAJ,CAAaC,OAAD,IAAaN,GAAG,CAACO,GAAJ,CAAQC,EAAR,CAAW,KAAX,EAAkBF,OAAlB,CAAzB,CAAjB;;AAEA,QAAI;AACFN,MAAAA,GAAG,CAACE,OAAJ,CAAYO,IAAZ,GAAmB,MAAMZ,cAAc,CACrCG,GAAG,CAACO,GADiC,EAErCP,GAAG,CAACU,GAFiC,EAGrCZ,qBAHqC,CAAvC;AAKA,YAAMG,IAAI,EAAV;AACD,KAPD,SAOU;AACR,YAAMG,QAAN;AACD;AACF,GAfD;AAgBD,CApBD","sourcesContent":["'use strict';\n\nconst defaultProcessRequest = require('./processRequest');\n\n/**\n * Creates [Koa](https://koajs.com) middleware that processes\n * [GraphQL multipart requests](https://github.com/jaydenseric/graphql-multipart-request-spec)\n * using [`processRequest`]{@link processRequest}, ignoring non-multipart\n * requests. It sets the request body to be\n * [similar to a conventional GraphQL POST request]{@link GraphQLOperation} for\n * following GraphQL middleware to consume.\n * @kind function\n * @name graphqlUploadKoa\n * @param {ProcessRequestOptions} options Middleware options. Any [`ProcessRequestOptions`]{@link ProcessRequestOptions} can be used.\n * @param {ProcessRequestFunction} [options.processRequest=processRequest] Used to process [GraphQL multipart requests](https://github.com/jaydenseric/graphql-multipart-request-spec).\n * @returns {Function} Koa middleware.\n * @example <caption>Ways to `import`.</caption>\n * ```js\n * import { graphqlUploadKoa } from 'graphql-upload';\n * ```\n *\n * ```js\n * import graphqlUploadKoa from 'graphql-upload/public/graphqlUploadKoa.js';\n * ```\n * @example <caption>Ways to `require`.</caption>\n * ```js\n * const { graphqlUploadKoa } = require('graphql-upload');\n * ```\n *\n * ```js\n * const graphqlUploadKoa = require('graphql-upload/public/graphqlUploadKoa');\n * ```\n * @example <caption>Basic [`graphql-api-koa`](https://npm.im/graphql-api-koa) setup.</caption>\n * ```js\n * const Koa = require('koa');\n * const bodyParser = require('koa-bodyparser');\n * const { errorHandler, execute } = require('graphql-api-koa');\n * const { graphqlUploadKoa } = require('graphql-upload');\n * const schema = require('./schema');\n *\n * new Koa()\n *   .use(errorHandler())\n *   .use(bodyParser())\n *   .use(graphqlUploadKoa({ maxFileSize: 10000000, maxFiles: 10 }))\n *   .use(execute({ schema }))\n *   .listen(3000);\n * ```\n */\nmodule.exports = function graphqlUploadKoa({\n  processRequest = defaultProcessRequest,\n  ...processRequestOptions\n} = {}) {\n  return async function graphqlUploadKoaMiddleware(ctx, next) {\n    if (!ctx.request.is('multipart/form-data')) return next();\n\n    const finished = new Promise((resolve) => ctx.req.on('end', resolve));\n\n    try {\n      ctx.request.body = await processRequest(\n        ctx.req,\n        ctx.res,\n        processRequestOptions\n      );\n      await next();\n    } finally {\n      await finished;\n    }\n  };\n};\n"]},"metadata":{},"sourceType":"script"}