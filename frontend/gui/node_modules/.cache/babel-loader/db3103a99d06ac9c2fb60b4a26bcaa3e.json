{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar _require = require('./CompilerError'),\n    createUserError = _require.createUserError,\n    eachWithCombinedError = _require.eachWithCombinedError;\n/**\n * Creates a scope for a `Root`, with each argument mapped to a variable of the\n * same name. Example:\n *\n * Query:\n * query Foo($id: ID, $size: Int = 42) { ... }\n *\n * Scope:\n * {\n *   id: $id,\n *   size: $size,\n * }\n *\n * Note that even though a default value is defined for $size, the scope must\n * assume that this could be overridden at runtime. The value cannot be decided\n * statically and therefore is set to a variable.\n */\n\n\nfunction getRootScope(definitions) {\n  var scope = {};\n  definitions.forEach(function (definition) {\n    scope[definition.name] = {\n      kind: 'Variable',\n      loc: definition.loc,\n      variableName: definition.name,\n      type: definition.type\n    };\n  });\n  return scope;\n}\n/**\n * Creates a scope for a `Fragment` by translating fragment spread arguments in\n * the context of a parent scope into a new scope and validating them against\n * the argument definitions.\n *\n *\n * Parent Scope:\n * {\n *   active: $parentActive\n * }\n *\n * Fragment Spread:\n * ...Bar(size: 42, enabled: $active)\n *\n * Fragment:\n * fragment Bar on Foo @argumentDefinitions(\n *   id: {type: \"ID\"}\n *   size: {type: \"Int\"}\n *   enabled: {type: \"Boolean}\n *   scale: {type: \"Int\", imports: \"pixelRatio\"}\n * )\n *\n * Scope:\n * {\n *   // No argument is provided for $id, it gets the default value which in this\n *   // case is `null`:\n *   id: null,\n *\n *   // The parent passes 42 as a literal value for $size:\n *   size: 42,\n *\n *   // The parent passes a variable as the value of $enabled. This variable is\n *   // resolved in the parent scope to the value $parentActive, which becomes\n *   // the value of $enabled:\n *   $enabled: $parentActive,\n *\n *   // $scale imports pixelRatio from the root scope. Since any argument in a\n *   // root scope maps to a variable of the same name, that means the value of\n *   // pixelRatio in the root is $pixelRatio:\n *   $scale: $pixelRatio,\n * }\n */\n\n\nfunction getFragmentScope(schema, definitions, args, parentScope, spread) {\n  var argMap = new Map();\n  args.forEach(function (arg) {\n    if (arg.value.kind === 'Literal') {\n      argMap.set(arg.name, arg.value);\n    } else if (arg.value.kind === 'Variable') {\n      argMap.set(arg.name, parentScope[arg.value.variableName]);\n    }\n  });\n  var fragmentScope = {};\n  eachWithCombinedError(definitions, function (definition) {\n    if (definition.kind === 'RootArgumentDefinition') {\n      if (argMap.has(definition.name)) {\n        var _argNode$loc;\n\n        var argNode = args.find(function (a) {\n          return a.name === definition.name;\n        });\n        throw createUserError(\"Unexpected argument '\".concat(definition.name, \"' supplied to fragment '\").concat(spread.name, \"'. @arguments may only be provided for variables defined in the fragment's @argumentDefinitions.\"), [(_argNode$loc = argNode === null || argNode === void 0 ? void 0 : argNode.loc) !== null && _argNode$loc !== void 0 ? _argNode$loc : spread.loc]);\n      }\n\n      fragmentScope[definition.name] = {\n        kind: 'Variable',\n        loc: definition.loc,\n        variableName: definition.name,\n        type: definition.type\n      };\n    } else {\n      var arg = argMap.get(definition.name);\n\n      if (arg == null || arg.kind === 'Literal' && arg.value == null) {\n        // No variable or literal null was passed, fall back to default\n        // value.\n        if (definition.defaultValue == null && schema.isNonNull(definition.type)) {\n          var _argNode$loc2;\n\n          var _argNode = args.find(function (a) {\n            return a.name === definition.name;\n          });\n\n          throw createUserError(\"No value found for required argument '\".concat(definition.name, \": \").concat(schema.getTypeString(definition.type), \"' on fragment '\").concat(spread.name, \"'.\"), [(_argNode$loc2 = _argNode === null || _argNode === void 0 ? void 0 : _argNode.loc) !== null && _argNode$loc2 !== void 0 ? _argNode$loc2 : spread.loc]);\n        }\n\n        fragmentScope[definition.name] = {\n          kind: 'Literal',\n          value: definition.defaultValue\n        };\n      } else {\n        // Variable or non-null literal.\n        fragmentScope[definition.name] = arg;\n      }\n    }\n  });\n  return fragmentScope;\n}\n\nmodule.exports = {\n  getFragmentScope: getFragmentScope,\n  getRootScope: getRootScope\n};","map":{"version":3,"sources":["C:/Users/Admin/programs/django+react/tutorials/graphql_django/frontend/gui/node_modules/relay-compiler/lib/core/RelayCompilerScope.js"],"names":["_require","require","createUserError","eachWithCombinedError","getRootScope","definitions","scope","forEach","definition","name","kind","loc","variableName","type","getFragmentScope","schema","args","parentScope","spread","argMap","Map","arg","value","set","fragmentScope","has","_argNode$loc","argNode","find","a","concat","get","defaultValue","isNonNull","_argNode$loc2","_argNode","getTypeString","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar _require = require('./CompilerError'),\n    createUserError = _require.createUserError,\n    eachWithCombinedError = _require.eachWithCombinedError;\n\n/**\n * Creates a scope for a `Root`, with each argument mapped to a variable of the\n * same name. Example:\n *\n * Query:\n * query Foo($id: ID, $size: Int = 42) { ... }\n *\n * Scope:\n * {\n *   id: $id,\n *   size: $size,\n * }\n *\n * Note that even though a default value is defined for $size, the scope must\n * assume that this could be overridden at runtime. The value cannot be decided\n * statically and therefore is set to a variable.\n */\nfunction getRootScope(definitions) {\n  var scope = {};\n  definitions.forEach(function (definition) {\n    scope[definition.name] = {\n      kind: 'Variable',\n      loc: definition.loc,\n      variableName: definition.name,\n      type: definition.type\n    };\n  });\n  return scope;\n}\n/**\n * Creates a scope for a `Fragment` by translating fragment spread arguments in\n * the context of a parent scope into a new scope and validating them against\n * the argument definitions.\n *\n *\n * Parent Scope:\n * {\n *   active: $parentActive\n * }\n *\n * Fragment Spread:\n * ...Bar(size: 42, enabled: $active)\n *\n * Fragment:\n * fragment Bar on Foo @argumentDefinitions(\n *   id: {type: \"ID\"}\n *   size: {type: \"Int\"}\n *   enabled: {type: \"Boolean}\n *   scale: {type: \"Int\", imports: \"pixelRatio\"}\n * )\n *\n * Scope:\n * {\n *   // No argument is provided for $id, it gets the default value which in this\n *   // case is `null`:\n *   id: null,\n *\n *   // The parent passes 42 as a literal value for $size:\n *   size: 42,\n *\n *   // The parent passes a variable as the value of $enabled. This variable is\n *   // resolved in the parent scope to the value $parentActive, which becomes\n *   // the value of $enabled:\n *   $enabled: $parentActive,\n *\n *   // $scale imports pixelRatio from the root scope. Since any argument in a\n *   // root scope maps to a variable of the same name, that means the value of\n *   // pixelRatio in the root is $pixelRatio:\n *   $scale: $pixelRatio,\n * }\n */\n\n\nfunction getFragmentScope(schema, definitions, args, parentScope, spread) {\n  var argMap = new Map();\n  args.forEach(function (arg) {\n    if (arg.value.kind === 'Literal') {\n      argMap.set(arg.name, arg.value);\n    } else if (arg.value.kind === 'Variable') {\n      argMap.set(arg.name, parentScope[arg.value.variableName]);\n    }\n  });\n  var fragmentScope = {};\n  eachWithCombinedError(definitions, function (definition) {\n    if (definition.kind === 'RootArgumentDefinition') {\n      if (argMap.has(definition.name)) {\n        var _argNode$loc;\n\n        var argNode = args.find(function (a) {\n          return a.name === definition.name;\n        });\n        throw createUserError(\"Unexpected argument '\".concat(definition.name, \"' supplied to fragment '\").concat(spread.name, \"'. @arguments may only be provided for variables defined in the fragment's @argumentDefinitions.\"), [(_argNode$loc = argNode === null || argNode === void 0 ? void 0 : argNode.loc) !== null && _argNode$loc !== void 0 ? _argNode$loc : spread.loc]);\n      }\n\n      fragmentScope[definition.name] = {\n        kind: 'Variable',\n        loc: definition.loc,\n        variableName: definition.name,\n        type: definition.type\n      };\n    } else {\n      var arg = argMap.get(definition.name);\n\n      if (arg == null || arg.kind === 'Literal' && arg.value == null) {\n        // No variable or literal null was passed, fall back to default\n        // value.\n        if (definition.defaultValue == null && schema.isNonNull(definition.type)) {\n          var _argNode$loc2;\n\n          var _argNode = args.find(function (a) {\n            return a.name === definition.name;\n          });\n\n          throw createUserError(\"No value found for required argument '\".concat(definition.name, \": \").concat(schema.getTypeString(definition.type), \"' on fragment '\").concat(spread.name, \"'.\"), [(_argNode$loc2 = _argNode === null || _argNode === void 0 ? void 0 : _argNode.loc) !== null && _argNode$loc2 !== void 0 ? _argNode$loc2 : spread.loc]);\n        }\n\n        fragmentScope[definition.name] = {\n          kind: 'Literal',\n          value: definition.defaultValue\n        };\n      } else {\n        // Variable or non-null literal.\n        fragmentScope[definition.name] = arg;\n      }\n    }\n  });\n  return fragmentScope;\n}\n\nmodule.exports = {\n  getFragmentScope: getFragmentScope,\n  getRootScope: getRootScope\n};"]},"metadata":{},"sourceType":"script"}