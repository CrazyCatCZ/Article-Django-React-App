{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\programs\\\\django+react\\\\tutorials\\\\graphql_django\\\\frontend\\\\gui\\\\src\\\\components\\\\Posts\\\\PostCreate\\\\PostCreate.js\";\nimport React, { useState, useRef, useCallback } from 'react';\nimport { Button, Form } from 'semantic-ui-react';\nimport { useMutation } from '@apollo/react-hooks';\nimport { useHistory } from 'react-router-dom';\nimport { POST_CREATE_MUTATION, POST_LIST_QUERY } from '../../Api/post'; //import styles from './Posts.module.css'\n\nconst PostCreate = ({\n  isPublic = false\n}) => {\n  const [allowButton, setAllowButton] = useState(false);\n  const [titleInput, setTitleInput] = useState('');\n  const [textareaInput, setTextareaInput] = useState('');\n  const history = useHistory();\n  const [createPost] = useMutation(POST_CREATE_MUTATION);\n  const handleOnSubmit = useCallback(() => {\n    const user = localStorage.getItem('user');\n    const titleValue = titleRef.current.value;\n    const contentValue = contentRef.current.value;\n    createPost({\n      variables: {\n        title: titleValue,\n        content: contentValue,\n        user: user\n      }\n    });\n    history.push('/');\n  }); //check if title and content were filled\n\n  const checkForm = () => {\n    if (titleRef.current.value) {\n      setAllowButton(true);\n    } else {\n      setAllowButton(false);\n    }\n  };\n\n  console.log(textareaInput);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"post-create-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    onChange: checkForm,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Form.Field, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 21\n    }\n  }, \"Title\"), /*#__PURE__*/React.createElement(\"input\", {\n    onC: true,\n    placeholder: \"Title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(Form.Field, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 21\n    }\n  }, \"Content\"), /*#__PURE__*/React.createElement(\"textarea\", {\n    onChange: event => setTextareaInput(event.target.value),\n    value: textareaInput,\n    className: \"post-create-content-container\",\n    placeholder: \"Enter something...\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 21\n    }\n  })), allowButton ? /*#__PURE__*/React.createElement(Button, {\n    onClick: handleOnSubmit,\n    className: \"submit-button\",\n    primary: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 21\n    }\n  }, \"Create\") : /*#__PURE__*/React.createElement(Button, {\n    disabled: true,\n    onClick: handleOnSubmit,\n    className: \"submit-button\",\n    primary: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 21\n    }\n  }, \"Create\")));\n};\n\nexport default PostCreate;","map":{"version":3,"sources":["C:/Users/Admin/programs/django+react/tutorials/graphql_django/frontend/gui/src/components/Posts/PostCreate/PostCreate.js"],"names":["React","useState","useRef","useCallback","Button","Form","useMutation","useHistory","POST_CREATE_MUTATION","POST_LIST_QUERY","PostCreate","isPublic","allowButton","setAllowButton","titleInput","setTitleInput","textareaInput","setTextareaInput","history","createPost","handleOnSubmit","user","localStorage","getItem","titleValue","titleRef","current","value","contentValue","contentRef","variables","title","content","push","checkForm","console","log","event","target"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useCallback } from 'react'\r\nimport { Button, Form } from 'semantic-ui-react'\r\nimport { useMutation } from '@apollo/react-hooks'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nimport { POST_CREATE_MUTATION, POST_LIST_QUERY } from '../../Api/post'\r\n\r\n//import styles from './Posts.module.css'\r\n\r\nconst PostCreate = ({ isPublic=false }) => {\r\n    const [ allowButton, setAllowButton ] = useState(false)\r\n\r\n    const [ titleInput, setTitleInput ] = useState('')\r\n    const [ textareaInput, setTextareaInput ] = useState('')\r\n\r\n    const history = useHistory()\r\n    const [ createPost ] = useMutation(POST_CREATE_MUTATION)\r\n  \r\n\r\n    const handleOnSubmit = useCallback(() => {\r\n            const user = localStorage.getItem('user')\r\n            const titleValue = titleRef.current.value\r\n            const contentValue = contentRef.current.value\r\n            \r\n            createPost({ variables: { title: titleValue, content: contentValue, user: user }})\r\n            history.push('/')\r\n        }\r\n    )\r\n\r\n    \r\n\r\n    //check if title and content were filled\r\n    const checkForm = () => {\r\n        if (titleRef.current.value) {\r\n            setAllowButton(true)\r\n        }\r\n\r\n        else {\r\n            setAllowButton(false)\r\n        }\r\n    }\r\n\r\n\r\n    console.log(textareaInput)\r\n\r\n    return (\r\n        <div className=\"post-create-container\">\r\n            <Form onChange={checkForm}>\r\n                <Form.Field>\r\n                    <label>Title</label>\r\n                    <input onC placeholder='Title' />\r\n                </Form.Field>\r\n                <Form.Field>\r\n                    <label>Content</label>\r\n                    <textarea \r\n                        onChange={(event) => setTextareaInput(event.target.value)}\r\n                        value={textareaInput}\r\n                        className=\"post-create-content-container\"\r\n                        placeholder='Enter something...' \r\n                    />\r\n                </Form.Field>\r\n                {(allowButton) ? (\r\n                    <Button onClick={handleOnSubmit} className=\"submit-button\" primary>Create</Button>\r\n                ) : (\r\n                    <Button disabled onClick={handleOnSubmit} className=\"submit-button\" primary>Create</Button>\r\n                ) }\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PostCreate\r\n"]},"metadata":{},"sourceType":"module"}