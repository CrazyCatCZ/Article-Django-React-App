{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\programs\\\\django+react\\\\tutorials\\\\graphql_django\\\\frontend\\\\gui\\\\src\\\\components\\\\Posts\\\\PostEdit.js\";\nimport React, { useState, useRef, useEffect } from 'react';\nimport { Button, Form } from 'semantic-ui-react';\nimport { useMutation } from '@apollo/react-hooks';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { POST_EDIT_MUTATION, POST_FIND_MUTATION } from '../api/post';\n\nconst PostEdit = () => {\n  const [allowButton, setAllowButton] = useState(false);\n  const [inputValue, setInputValue] = useState();\n  const [textareaValue, setTextAreaValue] = useState();\n  const titleRef = useRef();\n  const contentRef = useRef();\n  const {\n    id\n  } = useParams();\n  const history = useHistory();\n  const [postEdit] = useMutation(POST_EDIT_MUTATION);\n  const [postFind, {\n    data: detailData\n  }] = useMutation(POST_FIND_MUTATION);\n  useEffect(() => {\n    postFind({\n      variables: {\n        id: id\n      }\n    });\n  }, [id]);\n  useEffect(() => {\n    if (detailData) {\n      setInputValue(detailData.findPost.post.title);\n      setTextAreaValue(detailData.findPost.post.content);\n    }\n  }, [detailData]);\n\n  const handleOnSubmit = () => {\n    const titleValue = titleRef.current.value;\n    const contentValue = contentRef.current.value;\n    postEdit({\n      variables: {\n        id: id,\n        title: titleValue,\n        content: contentValue\n      }\n    });\n    history.push('/');\n  };\n\n  const checkForm = () => {\n    if (titleRef.current.value && contentRef.current.value) {\n      setAllowButton(true);\n    } else {\n      setAllowButton(false);\n    }\n  };\n\n  const onInputChange = value => {\n    setInputValue(value);\n  };\n\n  const onTextAreaChange = value => {\n    setTextAreaValue(value);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"post-create-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }, detailData ? /*#__PURE__*/React.createElement(Form, {\n    onChange: checkForm,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Form.Field, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 25\n    }\n  }, \"Title\"), /*#__PURE__*/React.createElement(\"input\", {\n    onChange: event => onInputChange(event.target.value),\n    value: inputValue,\n    ref: titleRef,\n    placeholder: \"Title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(Form.Field, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 25\n    }\n  }, \"Content\"), /*#__PURE__*/React.createElement(\"textarea\", {\n    onChange: event => onTextAreaChange(event.target.value),\n    value: textareaValue,\n    ref: contentRef,\n    placeholder: \"Enter something...\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 25\n    }\n  })), allowButton ? /*#__PURE__*/React.createElement(Button, {\n    onClick: handleOnSubmit,\n    className: \"submit-button\",\n    type: \"button\",\n    primary: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 25\n    }\n  }, \"Edit\") : /*#__PURE__*/React.createElement(Button, {\n    disabled: true,\n    onClick: handleOnSubmit,\n    className: \"submit-button\",\n    type: \"button\",\n    primary: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 25\n    }\n  }, \"Edit\")) : null);\n};\n\nexport default PostEdit;","map":{"version":3,"sources":["C:/Users/Admin/programs/django+react/tutorials/graphql_django/frontend/gui/src/components/Posts/PostEdit.js"],"names":["React","useState","useRef","useEffect","Button","Form","useMutation","useHistory","useParams","POST_EDIT_MUTATION","POST_FIND_MUTATION","PostEdit","allowButton","setAllowButton","inputValue","setInputValue","textareaValue","setTextAreaValue","titleRef","contentRef","id","history","postEdit","postFind","data","detailData","variables","findPost","post","title","content","handleOnSubmit","titleValue","current","value","contentValue","push","checkForm","onInputChange","onTextAreaChange","event","target"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from 'react'\r\nimport { Button, Form } from 'semantic-ui-react'\r\nimport { useMutation } from '@apollo/react-hooks'\r\nimport { useHistory, useParams } from 'react-router-dom'\r\n\r\nimport { POST_EDIT_MUTATION, POST_FIND_MUTATION } from '../api/post' \r\n\r\nconst PostEdit = () => {    \r\n    const [ allowButton, setAllowButton ] = useState(false)\r\n    const [ inputValue, setInputValue ] = useState()\r\n    const [ textareaValue, setTextAreaValue ] = useState()\r\n    const titleRef = useRef()\r\n    const contentRef = useRef()\r\n    \r\n    const { id } = useParams()\r\n    const history = useHistory()\r\n    const [ postEdit ] = useMutation(POST_EDIT_MUTATION) \r\n    const [ postFind, { data: detailData } ] = useMutation(POST_FIND_MUTATION)\r\n\r\n    \r\n    useEffect(() => {\r\n        postFind({variables: { id: id }})\r\n    }, [id])\r\n    \r\n    useEffect(() => {\r\n        if (detailData) {\r\n            setInputValue(detailData.findPost.post.title)\r\n            setTextAreaValue(detailData.findPost.post.content)\r\n        }\r\n    }, [detailData])\r\n\r\n\r\n    const handleOnSubmit = () => {\r\n        const titleValue = titleRef.current.value\r\n        const contentValue = contentRef.current.value\r\n\r\n        postEdit({ variables: { id: id, title: titleValue, content: contentValue } })\r\n        history.push('/')\r\n    }\r\n\r\n    const checkForm = () => {\r\n        if (titleRef.current.value && contentRef.current.value) {\r\n            setAllowButton(true)\r\n        }\r\n\r\n        else {\r\n            setAllowButton(false)\r\n        }\r\n    }\r\n\r\n    const onInputChange = (value) => {\r\n        setInputValue(value)\r\n    }\r\n\r\n    const onTextAreaChange = (value) => {\r\n        setTextAreaValue(value)\r\n    }\r\n    \r\n    return (\r\n        <div className=\"post-create-container\">\r\n            {(detailData) ? (\r\n                <Form onChange={checkForm}>\r\n                    <Form.Field>\r\n                        <label>Title</label>\r\n                        <input onChange={event => onInputChange(event.target.value)} value={inputValue} ref={titleRef} placeholder=\"Title\" />\r\n                    </Form.Field>\r\n                    <Form.Field>\r\n                        <label>Content</label>\r\n                        <textarea onChange={event => onTextAreaChange(event.target.value)} value={textareaValue} ref={contentRef} placeholder='Enter something...' />\r\n                    </Form.Field>\r\n                    {(allowButton) ? (\r\n                        <Button onClick={handleOnSubmit} className=\"submit-button\" type='button' primary>Edit</Button>\r\n                    ) : (\r\n                        <Button disabled onClick={handleOnSubmit} className=\"submit-button\" type='button' primary>Edit</Button>\r\n                    )}\r\n                </Form>\r\n            ) : null }\r\n        </div> \r\n    )\r\n}\r\n\r\nexport default PostEdit\r\n"]},"metadata":{},"sourceType":"module"}