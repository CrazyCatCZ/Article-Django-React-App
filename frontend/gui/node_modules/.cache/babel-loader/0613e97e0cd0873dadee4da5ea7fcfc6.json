{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar invariant = require(\"fbjs/lib/invariant\");\n/**\n * Generates an identifier for an argument value. The identifier is based on the\n * structure/order of items and keys in the value.\n */\n\n\nfunction getIdentifierForArgumentValue(value) {\n  switch (value.kind) {\n    case 'Variable':\n      return {\n        variable: value.variableName\n      };\n\n    case 'Literal':\n      return {\n        value: value.value\n      };\n\n    case 'ListValue':\n      return {\n        list: value.items.map(function (item) {\n          return getIdentifierForArgumentValue(item);\n        })\n      };\n\n    case 'ObjectValue':\n      return {\n        object: value.fields.map(function (field) {\n          return {\n            name: field.name,\n            value: getIdentifierForArgumentValue(field.value)\n          };\n        })\n      };\n\n    default:\n      !false ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'getIdentifierForArgumentValue(): Unsupported AST kind `%s`.', value.kind) : invariant(false) : void 0;\n  }\n}\n\nmodule.exports = getIdentifierForArgumentValue;","map":{"version":3,"sources":["C:/Users/Admin/programs/django+react/tutorials/graphql_django/frontend/gui/node_modules/relay-compiler/lib/core/getIdentifierForArgumentValue.js"],"names":["invariant","require","getIdentifierForArgumentValue","value","kind","variable","variableName","list","items","map","item","object","fields","field","name","process","env","NODE_ENV","module","exports"],"mappings":"AAAA;;;;;;;;;AASA;AACA;;AAEA,IAAIA,SAAS,GAAGC,OAAO,CAAC,oBAAD,CAAvB;AAEA;;;;;;AAIA,SAASC,6BAAT,CAAuCC,KAAvC,EAA8C;AAC5C,UAAQA,KAAK,CAACC,IAAd;AACE,SAAK,UAAL;AACE,aAAO;AACLC,QAAAA,QAAQ,EAAEF,KAAK,CAACG;AADX,OAAP;;AAIF,SAAK,SAAL;AACE,aAAO;AACLH,QAAAA,KAAK,EAAEA,KAAK,CAACA;AADR,OAAP;;AAIF,SAAK,WAAL;AACE,aAAO;AACLI,QAAAA,IAAI,EAAEJ,KAAK,CAACK,KAAN,CAAYC,GAAZ,CAAgB,UAAUC,IAAV,EAAgB;AACpC,iBAAOR,6BAA6B,CAACQ,IAAD,CAApC;AACD,SAFK;AADD,OAAP;;AAMF,SAAK,aAAL;AACE,aAAO;AACLC,QAAAA,MAAM,EAAER,KAAK,CAACS,MAAN,CAAaH,GAAb,CAAiB,UAAUI,KAAV,EAAiB;AACxC,iBAAO;AACLC,YAAAA,IAAI,EAAED,KAAK,CAACC,IADP;AAELX,YAAAA,KAAK,EAAED,6BAA6B,CAACW,KAAK,CAACV,KAAP;AAF/B,WAAP;AAID,SALO;AADH,OAAP;;AASF;AACE,OAAC,KAAD,GAASY,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCjB,SAAS,CAAC,KAAD,EAAQ,6DAAR,EAAuEG,KAAK,CAACC,IAA7E,CAAjD,GAAsIJ,SAAS,CAAC,KAAD,CAAxJ,GAAkK,KAAK,CAAvK;AA7BJ;AA+BD;;AAEDkB,MAAM,CAACC,OAAP,GAAiBjB,6BAAjB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar invariant = require(\"fbjs/lib/invariant\");\n\n/**\n * Generates an identifier for an argument value. The identifier is based on the\n * structure/order of items and keys in the value.\n */\nfunction getIdentifierForArgumentValue(value) {\n  switch (value.kind) {\n    case 'Variable':\n      return {\n        variable: value.variableName\n      };\n\n    case 'Literal':\n      return {\n        value: value.value\n      };\n\n    case 'ListValue':\n      return {\n        list: value.items.map(function (item) {\n          return getIdentifierForArgumentValue(item);\n        })\n      };\n\n    case 'ObjectValue':\n      return {\n        object: value.fields.map(function (field) {\n          return {\n            name: field.name,\n            value: getIdentifierForArgumentValue(field.value)\n          };\n        })\n      };\n\n    default:\n      !false ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'getIdentifierForArgumentValue(): Unsupported AST kind `%s`.', value.kind) : invariant(false) : void 0;\n  }\n}\n\nmodule.exports = getIdentifierForArgumentValue;"]},"metadata":{},"sourceType":"script"}