{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\programs\\\\django+react\\\\tutorials\\\\graphql_django\\\\frontend\\\\gui\\\\src\\\\components\\\\Messages\\\\MessagesContainer.js\";\nimport React, { useEffect } from 'react';\nimport { useMutation } from '@apollo/react-hooks';\nimport { useParams } from 'react-router-dom';\nimport { MESSAGES_LIST_MUTATION } from '../Api/message';\nimport Message from './Message';\n\nconst MessagesContainer = () => {\n  const user = localStorage.getItem('user');\n  const {\n    chatUser\n  } = useParams();\n  const [queryUserMessages, {\n    data: messagesData\n  }] = useMutation(MESSAGES_LIST_MUTATION); //query all chat room messages\n\n  useEffect(() => {\n    queryUserMessages({\n      variables: {\n        user: user,\n        chatUser: chatUser\n      }\n    });\n  }, [chatUser]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chat-room-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 9\n    }\n  }, messagesData && messagesData.queryUserMessages.messages.length !== 0 ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 17\n    }\n  }, messagesData.queryUserMessages.messages.map(({\n    id,\n    content,\n    user: {\n      username: usersMessage\n    }\n  }) => {\n    return /*#__PURE__*/React.createElement(Message, {\n      key: id,\n      id: id,\n      usersMessage: usersMessage,\n      content: content,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 29\n      }\n    });\n  })) : null);\n};\n\nexport default MessagesContainer;","map":{"version":3,"sources":["C:/Users/Admin/programs/django+react/tutorials/graphql_django/frontend/gui/src/components/Messages/MessagesContainer.js"],"names":["React","useEffect","useMutation","useParams","MESSAGES_LIST_MUTATION","Message","MessagesContainer","user","localStorage","getItem","chatUser","queryUserMessages","data","messagesData","variables","messages","length","map","id","content","username","usersMessage"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,QAA4B,qBAA5B;AACA,SAASC,SAAT,QAA0B,kBAA1B;AAEA,SAASC,sBAAT,QAAuC,gBAAvC;AACA,OAAOC,OAAP,MAAoB,WAApB;;AAEA,MAAMC,iBAAiB,GAAG,MAAM;AAC5B,QAAMC,IAAI,GAAGC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAb;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAeP,SAAS,EAA9B;AAEA,QAAM,CAAEQ,iBAAF,EAAqB;AAAEC,IAAAA,IAAI,EAAEC;AAAR,GAArB,IAA+CX,WAAW,CAACE,sBAAD,CAAhE,CAJ4B,CAM5B;;AACAH,EAAAA,SAAS,CAAC,MAAM;AACZU,IAAAA,iBAAiB,CAAC;AAAEG,MAAAA,SAAS,EAAE;AAACP,QAAAA,IAAI,EAAEA,IAAP;AAAaG,QAAAA,QAAQ,EAAEA;AAAvB;AAAb,KAAD,CAAjB;AACH,GAFQ,EAEN,CAACA,QAAD,CAFM,CAAT;AAMA,sBACI;AAAK,IAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEKG,YAAY,IAAIA,YAAY,CAACF,iBAAb,CAA+BI,QAA/B,CAAwCC,MAAxC,KAAmD,CAAnE,gBACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEKH,YAAY,CAACF,iBAAb,CAA+BI,QAA/B,CAAwCE,GAAxC,CAA4C,CAAC;AAAEC,IAAAA,EAAF;AAAMC,IAAAA,OAAN;AAAeZ,IAAAA,IAAI,EAAE;AAAEa,MAAAA,QAAQ,EAAEC;AAAZ;AAArB,GAAD,KAAuD;AAChG,wBACI,oBAAC,OAAD;AACI,MAAA,GAAG,EAAEH,EADT;AAEI,MAAA,EAAE,EAAEA,EAFR;AAGI,MAAA,YAAY,EAAEG,YAHlB;AAII,MAAA,OAAO,EAAEF,OAJb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AAQH,GATA,CAFL,CADH,GAcG,IAhBR,CADJ;AAoBH,CAjCD;;AAmCA,eAAeb,iBAAf","sourcesContent":["import React, { useEffect } from 'react'\r\nimport { useMutation } from '@apollo/react-hooks'\r\nimport { useParams } from 'react-router-dom'\r\n\r\nimport { MESSAGES_LIST_MUTATION } from '../Api/message'\r\nimport Message from './Message'\r\n\r\nconst MessagesContainer = () => {\r\n    const user = localStorage.getItem('user')\r\n    const { chatUser } = useParams()\r\n\r\n    const [ queryUserMessages, { data: messagesData }] = useMutation(MESSAGES_LIST_MUTATION)\r\n\r\n    //query all chat room messages\r\n    useEffect(() => {\r\n        queryUserMessages({ variables: {user: user, chatUser: chatUser} })\r\n    }, [chatUser])\r\n    \r\n\r\n\r\n    return (\r\n        <div className=\"chat-room-container\">\r\n            {/*If messagesData and user and chat_user messages*/}\r\n            {messagesData && messagesData.queryUserMessages.messages.length !== 0 ? (\r\n                <div>\r\n                    {/*Map all messages*/}\r\n                    {messagesData.queryUserMessages.messages.map(({ id, content, user: { username: usersMessage } }) => {\r\n                        return (\r\n                            <Message\r\n                                key={id}\r\n                                id={id}\r\n                                usersMessage={usersMessage} \r\n                                content={content}\r\n                            />\r\n                        )\r\n                    })}\r\n                </div>\r\n            ) : null }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MessagesContainer\r\n  "]},"metadata":{},"sourceType":"module"}