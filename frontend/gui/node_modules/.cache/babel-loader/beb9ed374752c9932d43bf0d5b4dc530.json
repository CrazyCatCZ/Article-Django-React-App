{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\plech\\\\github\\\\programs\\\\django+react\\\\tutorials\\\\graphql_django\\\\frontend\\\\gui\\\\src\\\\components\\\\Authentication\\\\Register.js\";\nimport React, { useState, useRef } from 'react';\nimport { useMutation } from '@apollo/react-hooks';\nimport { useHistory } from 'react-router-dom';\nimport { Button, Form, Message } from 'semantic-ui-react';\nimport { USER_REGISTER_MUTATION } from '../query'; //const authenticationList = ['username', 'email', 'password', 'passwordConfirm']\n\nconst Register = () => {\n  const username = useRef();\n  const email = useRef();\n  const password = useRef();\n  const passwordConfirm = useRef();\n  const history = useHistory();\n  const [message, setMessage] = useState({\n    type: '',\n    text: []\n  });\n  const [registerUser, {\n    data\n  }] = useMutation(USER_REGISTER_MUTATION);\n\n  const handleOnSubmit = () => {\n    const usernameValue = username.current.value;\n    const emailValue = email.current.value;\n    const passwordValue = password.current.value;\n    const passwordConfirmValue = passwordConfirm.current.value;\n    registerUser({\n      variables: {\n        email: emailValue,\n        username: usernameValue,\n        password1: passwordValue,\n        password2: passwordConfirmValue\n      }\n    });\n\n    if (data) {\n      const messageBoolean = data.register.success;\n      const errors = Objects.entries(data.register.errors);\n      console.log(errors);\n\n      if (messageBoolean === false) {\n        errors.map(error => {\n          const messageError = error[1][0].message;\n          setMessage({\n            type: 'error',\n            text: [messageError]\n          });\n        });\n      } else {\n        history.push('/');\n      }\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"register-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    }\n  }, message.type ? /*#__PURE__*/React.createElement(Message, {\n    className: \"message-container\",\n    error: true,\n    header: message.text,\n    list: ['You must include both a upper and lower case letters in your password.', 'You need to select your home country.'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }) : null, /*#__PURE__*/React.createElement(Form, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Form.Field, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 11\n    }\n  }, \"Username\"), /*#__PURE__*/React.createElement(\"input\", {\n    ref: username,\n    placeholder: \"Username\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Form.Field, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 11\n    }\n  }, \"Email\"), /*#__PURE__*/React.createElement(\"input\", {\n    ref: email,\n    placeholder: \"Email\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Form.Field, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 11\n    }\n  }, \"Password\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"password\",\n    ref: password,\n    placeholder: \"Password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Form.Field, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 11\n    }\n  }, \"Confirm Password\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"password\",\n    ref: passwordConfirm,\n    placeholder: \"Confirm Password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    onClick: handleOnSubmit,\n    className: \"submit-button\",\n    type: \"submit\",\n    primary: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }, \"Register\")));\n};\n\nexport default Register;","map":{"version":3,"sources":["C:/Users/plech/github/programs/django+react/tutorials/graphql_django/frontend/gui/src/components/Authentication/Register.js"],"names":["React","useState","useRef","useMutation","useHistory","Button","Form","Message","USER_REGISTER_MUTATION","Register","username","email","password","passwordConfirm","history","message","setMessage","type","text","registerUser","data","handleOnSubmit","usernameValue","current","value","emailValue","passwordValue","passwordConfirmValue","variables","password1","password2","messageBoolean","register","success","errors","Objects","entries","console","log","map","error","messageError","push"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from 'react'\r\nimport { useMutation } from '@apollo/react-hooks'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { Button, Form, Message } from 'semantic-ui-react'\r\n\r\nimport { USER_REGISTER_MUTATION } from '../query'\r\n\r\n//const authenticationList = ['username', 'email', 'password', 'passwordConfirm']\r\n\r\nconst Register = () => {\r\n  const username = useRef()\r\n  const email = useRef()\r\n  const password = useRef()\r\n  const passwordConfirm = useRef()\r\n  \r\n  const history = useHistory()\r\n  const [ message, setMessage ] = useState({type: '', text: []}) \r\n  const [ registerUser, { data } ] = useMutation(USER_REGISTER_MUTATION);\r\n\r\n  const handleOnSubmit = () => {\r\n    const usernameValue = username.current.value\r\n    const emailValue = email.current.value\r\n    const passwordValue = password.current.value\r\n    const passwordConfirmValue = passwordConfirm.current.value\r\n\r\n    registerUser({ variables: {\r\n      email: emailValue, username: usernameValue,\r\n      password1: passwordValue, password2: passwordConfirmValue\r\n    }})\r\n\r\n    \r\n    if (data) {\r\n      const messageBoolean = data.register.success\r\n      const errors = Objects.entries(data.register.errors)\r\n\r\n      console.log(errors)\r\n\r\n      if (messageBoolean === false) {\r\n        errors.map(error => {\r\n          const messageError = error[1][0].message\r\n          \r\n\r\n          setMessage({\r\n            type: 'error',\r\n            text: [messageError]\r\n          })  \r\n        })\r\n      }\r\n      \r\n\r\n      else {\r\n        history.push('/')\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"register-container\">\r\n      {(message.type) ? (\r\n        <Message\r\n          className=\"message-container\"\r\n          error\r\n          header={message.text}\r\n          list={[\r\n            'You must include both a upper and lower case letters in your password.',\r\n            'You need to select your home country.',\r\n          ]}\r\n        />\r\n      ) : null }\r\n      <Form>\r\n        <Form.Field>\r\n          <label>Username</label>\r\n          <input ref={username} placeholder='Username' />\r\n        </Form.Field>\r\n        <Form.Field>\r\n          <label>Email</label>\r\n          <input ref={email} placeholder='Email' />\r\n        </Form.Field>\r\n        <Form.Field>\r\n          <label>Password</label>\r\n          <input type=\"password\" ref={password} placeholder='Password' />\r\n        </Form.Field>\r\n        <Form.Field>\r\n          <label>Confirm Password</label>\r\n          <input type=\"password\" ref={passwordConfirm} placeholder='Confirm Password' />\r\n        </Form.Field>\r\n        <Button onClick={handleOnSubmit} className=\"submit-button\" type='submit' primary>Register</Button>\r\n      </Form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Register\r\n"]},"metadata":{},"sourceType":"module"}