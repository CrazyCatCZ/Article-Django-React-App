{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar Profiler = require('./GraphQLCompilerProfiler');\n\nvar invariant = require(\"fbjs/lib/invariant\");\n\nvar _require = require('./CompilerError'),\n    createUserError = _require.createUserError; // $FlowFixMe[untyped-import] - immutable.js is not flow-typed\n\n\nvar _require2 = require('immutable'),\n    ImmutableOrderedMap = _require2.OrderedMap;\n/**\n * An immutable representation of a corpus of documents being compiled together.\n * For each document, the context stores the IR and any validation errors.\n */\n\n\nvar CompilerContext = /*#__PURE__*/function () {\n  function CompilerContext(schema) {\n    this._isMutable = false;\n    this._documents = new ImmutableOrderedMap();\n    this._withTransform = new WeakMap();\n    this._schema = schema;\n  }\n  /**\n   * Returns the documents for the context in the order they were added.\n   */\n\n\n  var _proto = CompilerContext.prototype;\n\n  _proto.documents = function documents() {\n    return this._documents.toArray();\n  };\n\n  _proto.forEachDocument = function forEachDocument(fn) {\n    this._documents.forEach(fn);\n  };\n\n  _proto.replace = function replace(node) {\n    return this._update(this._documents.update(node.name, function (existing) {\n      !existing ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'CompilerContext: Expected to replace existing node %s, but ' + 'one was not found in the context.', node.name) : invariant(false) : void 0;\n      return node;\n    }));\n  };\n\n  _proto.add = function add(node) {\n    return this._update(this._documents.update(node.name, function (existing) {\n      !!existing ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'CompilerContext: Duplicate document named `%s`. GraphQL ' + 'fragments and roots must have unique names.', node.name) : invariant(false) : void 0;\n      return node;\n    }));\n  };\n\n  _proto.addAll = function addAll(nodes) {\n    return this.withMutations(function (mutable) {\n      return nodes.reduce(function (ctx, definition) {\n        return ctx.add(definition);\n      }, mutable);\n    });\n  }\n  /**\n   * Apply a list of compiler transforms and return a new compiler context.\n   */\n  ;\n\n  _proto.applyTransforms = function applyTransforms(transforms, reporter) {\n    var _this = this;\n\n    return Profiler.run('applyTransforms', function () {\n      return transforms.reduce(function (ctx, transform) {\n        return ctx.applyTransform(transform, reporter);\n      }, _this);\n    });\n  }\n  /**\n   * Applies a transform to this context, returning a new context.\n   *\n   * This is memoized such that applying the same sequence of transforms will\n   * not result in duplicated work.\n   */\n  ;\n\n  _proto.applyTransform = function applyTransform(transform, reporter) {\n    var transformed = this._withTransform.get(transform);\n\n    if (!transformed) {\n      var start = process.hrtime();\n      transformed = Profiler.instrument(transform)(this);\n      var delta = process.hrtime(start);\n      var deltaMs = Math.round((delta[0] * 1e9 + delta[1]) / 1e6);\n      reporter && reporter.reportTime(transform.name, deltaMs);\n\n      this._withTransform.set(transform, transformed);\n    }\n\n    return transformed;\n  };\n\n  _proto.get = function get(name) {\n    return this._documents.get(name);\n  };\n\n  _proto.getFragment = function getFragment(name, referencedFrom) {\n    var node = this._documents.get(name);\n\n    if (node == null) {\n      throw createUserError(\"Cannot find fragment '\".concat(name, \"'.\"), referencedFrom != null ? [referencedFrom] : null);\n    } else if (node.kind !== 'Fragment') {\n      throw createUserError(\"Cannot find fragment '\".concat(name, \"', a document with this name exists \") + 'but is not a fragment.', [node.loc, referencedFrom].filter(Boolean));\n    }\n\n    return node;\n  };\n\n  _proto.getRoot = function getRoot(name) {\n    var node = this._documents.get(name);\n\n    if (node == null) {\n      throw createUserError(\"Cannot find root '\".concat(name, \"'.\"));\n    } else if (node.kind !== 'Root') {\n      throw createUserError(\"Cannot find root '\".concat(name, \"', a document with this name exists but \") + 'is not a root.', [node.loc]);\n    }\n\n    return node;\n  };\n\n  _proto.remove = function remove(name) {\n    return this._update(this._documents[\"delete\"](name));\n  };\n\n  _proto.withMutations = function withMutations(fn) {\n    var mutableCopy = this._update(this._documents.asMutable());\n\n    mutableCopy._isMutable = true;\n    var result = fn(mutableCopy);\n    result._isMutable = false;\n    result._documents = result._documents.asImmutable();\n    return this._documents === result._documents ? this : result;\n  };\n\n  _proto._update = function _update(documents) {\n    var context = this._isMutable ? this : new CompilerContext(this.getSchema());\n    context._documents = documents;\n    return context;\n  };\n\n  _proto.getSchema = function getSchema() {\n    return this._schema;\n  };\n\n  return CompilerContext;\n}();\n\nmodule.exports = CompilerContext;","map":{"version":3,"sources":["C:/Users/Admin/programs/django+react/tutorials/graphql_django/frontend/gui/node_modules/relay-compiler/lib/core/CompilerContext.js"],"names":["Profiler","require","invariant","_require","createUserError","_require2","ImmutableOrderedMap","OrderedMap","CompilerContext","schema","_isMutable","_documents","_withTransform","WeakMap","_schema","_proto","prototype","documents","toArray","forEachDocument","fn","forEach","replace","node","_update","update","name","existing","process","env","NODE_ENV","add","addAll","nodes","withMutations","mutable","reduce","ctx","definition","applyTransforms","transforms","reporter","_this","run","transform","applyTransform","transformed","get","start","hrtime","instrument","delta","deltaMs","Math","round","reportTime","set","getFragment","referencedFrom","concat","kind","loc","filter","Boolean","getRoot","remove","mutableCopy","asMutable","result","asImmutable","context","getSchema","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar Profiler = require('./GraphQLCompilerProfiler');\n\nvar invariant = require(\"fbjs/lib/invariant\");\n\nvar _require = require('./CompilerError'),\n    createUserError = _require.createUserError; // $FlowFixMe[untyped-import] - immutable.js is not flow-typed\n\n\nvar _require2 = require('immutable'),\n    ImmutableOrderedMap = _require2.OrderedMap;\n\n/**\n * An immutable representation of a corpus of documents being compiled together.\n * For each document, the context stores the IR and any validation errors.\n */\nvar CompilerContext = /*#__PURE__*/function () {\n  function CompilerContext(schema) {\n    this._isMutable = false;\n    this._documents = new ImmutableOrderedMap();\n    this._withTransform = new WeakMap();\n    this._schema = schema;\n  }\n  /**\n   * Returns the documents for the context in the order they were added.\n   */\n\n\n  var _proto = CompilerContext.prototype;\n\n  _proto.documents = function documents() {\n    return this._documents.toArray();\n  };\n\n  _proto.forEachDocument = function forEachDocument(fn) {\n    this._documents.forEach(fn);\n  };\n\n  _proto.replace = function replace(node) {\n    return this._update(this._documents.update(node.name, function (existing) {\n      !existing ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'CompilerContext: Expected to replace existing node %s, but ' + 'one was not found in the context.', node.name) : invariant(false) : void 0;\n      return node;\n    }));\n  };\n\n  _proto.add = function add(node) {\n    return this._update(this._documents.update(node.name, function (existing) {\n      !!existing ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'CompilerContext: Duplicate document named `%s`. GraphQL ' + 'fragments and roots must have unique names.', node.name) : invariant(false) : void 0;\n      return node;\n    }));\n  };\n\n  _proto.addAll = function addAll(nodes) {\n    return this.withMutations(function (mutable) {\n      return nodes.reduce(function (ctx, definition) {\n        return ctx.add(definition);\n      }, mutable);\n    });\n  }\n  /**\n   * Apply a list of compiler transforms and return a new compiler context.\n   */\n  ;\n\n  _proto.applyTransforms = function applyTransforms(transforms, reporter) {\n    var _this = this;\n\n    return Profiler.run('applyTransforms', function () {\n      return transforms.reduce(function (ctx, transform) {\n        return ctx.applyTransform(transform, reporter);\n      }, _this);\n    });\n  }\n  /**\n   * Applies a transform to this context, returning a new context.\n   *\n   * This is memoized such that applying the same sequence of transforms will\n   * not result in duplicated work.\n   */\n  ;\n\n  _proto.applyTransform = function applyTransform(transform, reporter) {\n    var transformed = this._withTransform.get(transform);\n\n    if (!transformed) {\n      var start = process.hrtime();\n      transformed = Profiler.instrument(transform)(this);\n      var delta = process.hrtime(start);\n      var deltaMs = Math.round((delta[0] * 1e9 + delta[1]) / 1e6);\n      reporter && reporter.reportTime(transform.name, deltaMs);\n\n      this._withTransform.set(transform, transformed);\n    }\n\n    return transformed;\n  };\n\n  _proto.get = function get(name) {\n    return this._documents.get(name);\n  };\n\n  _proto.getFragment = function getFragment(name, referencedFrom) {\n    var node = this._documents.get(name);\n\n    if (node == null) {\n      throw createUserError(\"Cannot find fragment '\".concat(name, \"'.\"), referencedFrom != null ? [referencedFrom] : null);\n    } else if (node.kind !== 'Fragment') {\n      throw createUserError(\"Cannot find fragment '\".concat(name, \"', a document with this name exists \") + 'but is not a fragment.', [node.loc, referencedFrom].filter(Boolean));\n    }\n\n    return node;\n  };\n\n  _proto.getRoot = function getRoot(name) {\n    var node = this._documents.get(name);\n\n    if (node == null) {\n      throw createUserError(\"Cannot find root '\".concat(name, \"'.\"));\n    } else if (node.kind !== 'Root') {\n      throw createUserError(\"Cannot find root '\".concat(name, \"', a document with this name exists but \") + 'is not a root.', [node.loc]);\n    }\n\n    return node;\n  };\n\n  _proto.remove = function remove(name) {\n    return this._update(this._documents[\"delete\"](name));\n  };\n\n  _proto.withMutations = function withMutations(fn) {\n    var mutableCopy = this._update(this._documents.asMutable());\n\n    mutableCopy._isMutable = true;\n    var result = fn(mutableCopy);\n    result._isMutable = false;\n    result._documents = result._documents.asImmutable();\n    return this._documents === result._documents ? this : result;\n  };\n\n  _proto._update = function _update(documents) {\n    var context = this._isMutable ? this : new CompilerContext(this.getSchema());\n    context._documents = documents;\n    return context;\n  };\n\n  _proto.getSchema = function getSchema() {\n    return this._schema;\n  };\n\n  return CompilerContext;\n}();\n\nmodule.exports = CompilerContext;"]},"metadata":{},"sourceType":"script"}