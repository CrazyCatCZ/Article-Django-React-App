{"ast":null,"code":"'use strict';\n/**\n * A file expected to be uploaded as it has been declared in the `map` field of\n * a [GraphQL multipart request](https://github.com/jaydenseric/graphql-multipart-request-spec).\n * The [`processRequest`]{@link processRequest} function places references to an\n * instance of this class wherever the file is expected in the\n * [GraphQL operation]{@link GraphQLOperation}. The\n * [`Upload` scalar]{@link GraphQLUpload} derives it’s value from the\n * [`promise`]{@link Upload#promise} property.\n * @kind class\n * @name Upload\n * @example <caption>Ways to `import`.</caption>\n * ```js\n * import { Upload } from 'graphql-upload';\n * ```\n *\n * ```js\n * import Upload from 'graphql-upload/public/Upload.js';\n * ```\n * @example <caption>Ways to `require`.</caption>\n * ```js\n * const { Upload } = require('graphql-upload');\n * ```\n *\n * ```js\n * const Upload = require('graphql-upload/public/Upload');\n * ```\n */\n\nmodule.exports = class Upload {\n  constructor() {\n    /**\n     * Promise that resolves file upload details. This should only be utilized\n     * by [`GraphQLUpload`]{@link GraphQLUpload}.\n     * @kind member\n     * @name Upload#promise\n     * @type {Promise<FileUpload>}\n     */\n    this.promise = new Promise((resolve, reject) => {\n      /**\n       * Resolves the upload promise with the file upload details. This should\n       * only be utilized by [`processRequest`]{@link processRequest}.\n       * @kind function\n       * @name Upload#resolve\n       * @param {FileUpload} file File upload details.\n       */\n      this.resolve = file => {\n        /**\n         * The file upload details, available when the\n         * [upload promise]{@link Upload#promise} resolves. This should only be\n         * utilized by [`processRequest`]{@link processRequest}.\n         * @kind member\n         * @name Upload#file\n         * @type {undefined|FileUpload}\n         */\n        this.file = file;\n        resolve(file);\n      };\n      /**\n       * Rejects the upload promise with an error. This should only be\n       * utilized by [`processRequest`]{@link processRequest}.\n       * @kind function\n       * @name Upload#reject\n       * @param {object} error Error instance.\n       */\n\n\n      this.reject = reject;\n    }); // Prevent errors crashing Node.js, see:\n    // https://github.com/nodejs/node/issues/20392\n\n    this.promise.catch(() => {});\n  }\n\n};","map":{"version":3,"sources":["C:/Users/Admin/programs/django+react/tutorials/graphql_django/frontend/gui/node_modules/graphql-upload/public/Upload.js"],"names":["module","exports","Upload","constructor","promise","Promise","resolve","reject","file","catch"],"mappings":"AAAA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BAA,MAAM,CAACC,OAAP,GAAiB,MAAMC,MAAN,CAAa;AAC5BC,EAAAA,WAAW,GAAG;AACZ;;;;;;;AAOA,SAAKC,OAAL,GAAe,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC9C;;;;;;;AAOA,WAAKD,OAAL,GAAgBE,IAAD,IAAU;AACvB;;;;;;;;AAQA,aAAKA,IAAL,GAAYA,IAAZ;AAEAF,QAAAA,OAAO,CAACE,IAAD,CAAP;AACD,OAZD;AAcA;;;;;;;;;AAOA,WAAKD,MAAL,GAAcA,MAAd;AACD,KA9Bc,CAAf,CARY,CAwCZ;AACA;;AACA,SAAKH,OAAL,CAAaK,KAAb,CAAmB,MAAM,CAAE,CAA3B;AACD;;AA5C2B,CAA9B","sourcesContent":["'use strict';\n\n/**\n * A file expected to be uploaded as it has been declared in the `map` field of\n * a [GraphQL multipart request](https://github.com/jaydenseric/graphql-multipart-request-spec).\n * The [`processRequest`]{@link processRequest} function places references to an\n * instance of this class wherever the file is expected in the\n * [GraphQL operation]{@link GraphQLOperation}. The\n * [`Upload` scalar]{@link GraphQLUpload} derives it’s value from the\n * [`promise`]{@link Upload#promise} property.\n * @kind class\n * @name Upload\n * @example <caption>Ways to `import`.</caption>\n * ```js\n * import { Upload } from 'graphql-upload';\n * ```\n *\n * ```js\n * import Upload from 'graphql-upload/public/Upload.js';\n * ```\n * @example <caption>Ways to `require`.</caption>\n * ```js\n * const { Upload } = require('graphql-upload');\n * ```\n *\n * ```js\n * const Upload = require('graphql-upload/public/Upload');\n * ```\n */\nmodule.exports = class Upload {\n  constructor() {\n    /**\n     * Promise that resolves file upload details. This should only be utilized\n     * by [`GraphQLUpload`]{@link GraphQLUpload}.\n     * @kind member\n     * @name Upload#promise\n     * @type {Promise<FileUpload>}\n     */\n    this.promise = new Promise((resolve, reject) => {\n      /**\n       * Resolves the upload promise with the file upload details. This should\n       * only be utilized by [`processRequest`]{@link processRequest}.\n       * @kind function\n       * @name Upload#resolve\n       * @param {FileUpload} file File upload details.\n       */\n      this.resolve = (file) => {\n        /**\n         * The file upload details, available when the\n         * [upload promise]{@link Upload#promise} resolves. This should only be\n         * utilized by [`processRequest`]{@link processRequest}.\n         * @kind member\n         * @name Upload#file\n         * @type {undefined|FileUpload}\n         */\n        this.file = file;\n\n        resolve(file);\n      };\n\n      /**\n       * Rejects the upload promise with an error. This should only be\n       * utilized by [`processRequest`]{@link processRequest}.\n       * @kind function\n       * @name Upload#reject\n       * @param {object} error Error instance.\n       */\n      this.reject = reject;\n    });\n\n    // Prevent errors crashing Node.js, see:\n    // https://github.com/nodejs/node/issues/20392\n    this.promise.catch(() => {});\n  }\n};\n"]},"metadata":{},"sourceType":"script"}