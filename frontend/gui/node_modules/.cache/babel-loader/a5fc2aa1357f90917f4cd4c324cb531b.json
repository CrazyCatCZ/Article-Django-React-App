{"ast":null,"code":"import { gql } from \"@apollo/client\"; //Query\n\nexport const USER_LIST_QUERY = gql`\n    query {\n        allUsers {\n            username\n            email\n        }\n    }\n`; //Mutation\n\nexport const USER_REGISTER_MUTATION = gql`\n    mutation registerUser ($email: String!, $username: String!, $password1: String!, $password2: String!) {\n        register (email: $email, username: $username, password1: $password1, password2: $password2) {\n            success\n            errors\n            token\n        }\n    }\n`;\nexport const USER_LOGIN_MUTATION = gql`\n    mutation loginUser ($username: String!, $password: String!) {\n        tokenAuth (username: $username, password: $password) {\n            success\n            errors\n            token\n        }   \n    }\n`;\nexport const USER_REFRESH_TOKEN_MUTATION = gql`\n    mutation verifyToken ($token: String!) {\n        verifyToken(token: $token) {\n            success\n            errors\n        }\n    }\n`;\nexport const USER_PROFILE_INFO_MUTATION = gql`\n    mutation profileInfo ($user: String!) {\n        profileInfo(input: {user: $user}) {\n            profile {\n                image\n                user {\n                    username\n                    email\n                }\n            }\n        }\n    }\n`;\nexport const USER_CHECK_PROFILE_MUTATION = gql`\n    mutation checkUserProfile ($user: String!) {\n        checkUserProfile(input: {user: $user}) {\n            profile {\n                id\n            }\n        }\n    }\n`;\nexport const USER_UPDATE_MUTATION = gql`\n    mutation ($user: String!, $newUser: String!, $newEmail: String!){\n        profileUpdate(input: {user: $user, newUser: $newUser, newEmail: $newEmail}) {\n            message\n        }\n    }\n`;","map":{"version":3,"sources":["C:/Users/Admin/programs/django+react/tutorials/graphql_django/frontend/gui/src/components/api/user.js"],"names":["gql","USER_LIST_QUERY","USER_REGISTER_MUTATION","USER_LOGIN_MUTATION","USER_REFRESH_TOKEN_MUTATION","USER_PROFILE_INFO_MUTATION","USER_CHECK_PROFILE_MUTATION","USER_UPDATE_MUTATION"],"mappings":"AAAA,SAASA,GAAT,QAAoB,gBAApB,C,CAEA;;AACA,OAAO,MAAMC,eAAe,GAAGD,GAAI;;;;;;;CAA5B,C,CASP;;AACA,OAAO,MAAME,sBAAsB,GAAGF,GAAI;;;;;;;;CAAnC;AAUP,OAAO,MAAMG,mBAAmB,GAAGH,GAAI;;;;;;;;CAAhC;AAUP,OAAO,MAAMI,2BAA2B,GAAGJ,GAAI;;;;;;;CAAxC;AASP,OAAO,MAAMK,0BAA0B,GAAGL,GAAI;;;;;;;;;;;;CAAvC;AAcP,OAAO,MAAMM,2BAA2B,GAAGN,GAAI;;;;;;;;CAAxC;AAWP,OAAO,MAAMO,oBAAoB,GAAGP,GAAI;;;;;;CAAjC","sourcesContent":["import { gql } from \"@apollo/client\";\r\n\r\n//Query\r\nexport const USER_LIST_QUERY = gql`\r\n    query {\r\n        allUsers {\r\n            username\r\n            email\r\n        }\r\n    }\r\n`\r\n\r\n//Mutation\r\nexport const USER_REGISTER_MUTATION = gql`\r\n    mutation registerUser ($email: String!, $username: String!, $password1: String!, $password2: String!) {\r\n        register (email: $email, username: $username, password1: $password1, password2: $password2) {\r\n            success\r\n            errors\r\n            token\r\n        }\r\n    }\r\n`\r\n\r\nexport const USER_LOGIN_MUTATION = gql`\r\n    mutation loginUser ($username: String!, $password: String!) {\r\n        tokenAuth (username: $username, password: $password) {\r\n            success\r\n            errors\r\n            token\r\n        }   \r\n    }\r\n`\r\n\r\nexport const USER_REFRESH_TOKEN_MUTATION = gql`\r\n    mutation verifyToken ($token: String!) {\r\n        verifyToken(token: $token) {\r\n            success\r\n            errors\r\n        }\r\n    }\r\n`\r\n\r\nexport const USER_PROFILE_INFO_MUTATION = gql`\r\n    mutation profileInfo ($user: String!) {\r\n        profileInfo(input: {user: $user}) {\r\n            profile {\r\n                image\r\n                user {\r\n                    username\r\n                    email\r\n                }\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const USER_CHECK_PROFILE_MUTATION = gql`\r\n    mutation checkUserProfile ($user: String!) {\r\n        checkUserProfile(input: {user: $user}) {\r\n            profile {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\n\r\nexport const USER_UPDATE_MUTATION = gql`\r\n    mutation ($user: String!, $newUser: String!, $newEmail: String!){\r\n        profileUpdate(input: {user: $user, newUser: $newUser, newEmail: $newEmail}) {\r\n            message\r\n        }\r\n    }\r\n`\r\n"]},"metadata":{},"sourceType":"module"}