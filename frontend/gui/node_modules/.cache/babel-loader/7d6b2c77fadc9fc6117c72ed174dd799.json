{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar invariant = require(\"fbjs/lib/invariant\");\n\nvar _require = require('./IRPrinter'),\n    printArguments = _require.printArguments,\n    printDirectives = _require.printDirectives;\n/**\n * Generates an identifier that is unique to a given selection: the alias for\n * fields, the type for inline fragments, and a summary of the condition\n * variable and passing value for conditions.\n */\n\n\nfunction getIdentifierForSelection(schema, node) {\n  if (node.kind === 'LinkedField' || node.kind === 'ScalarField') {\n    return 'Field: ' + node.directives.length === 0 ? node.alias : node.alias + printDirectives(schema, node.directives);\n  } else if (node.kind === 'FragmentSpread') {\n    return 'FragmentSpread:' + node.args.length === 0 ? node.name : node.name + printArguments(schema, node.args);\n  } else if (node.kind === 'ModuleImport') {\n    return 'ModuleImport:';\n  } else if (node.kind === 'Defer') {\n    return 'Defer:' + node.label;\n  } else if (node.kind === 'Stream') {\n    return 'Stream:' + node.label;\n  } else if (node.kind === 'InlineFragment') {\n    return 'InlineFragment:' + schema.getTypeString(node.typeCondition) + printDirectives(schema, node.directives);\n  } else if (node.kind === 'ClientExtension') {\n    return 'ClientExtension:';\n  } else if (node.kind === 'InlineDataFragmentSpread') {\n    return 'InlineDataFragment:' + node.name;\n  } else if (node.kind === 'Condition') {\n    return 'Condition:' + (node.condition.kind === 'Variable' ? '$' + node.condition.variableName : String(node.condition.value)) + String(node.passingValue);\n  } else {\n    !false ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'getIdentifierForSelection: Unexpected kind `%s`.', node.kind) : invariant(false) : void 0;\n  }\n}\n\nmodule.exports = getIdentifierForSelection;","map":{"version":3,"sources":["C:/Users/Admin/programs/django+react/tutorials/graphql_django/frontend/gui/node_modules/relay-compiler/lib/core/getIdentifierForSelection.js"],"names":["invariant","require","_require","printArguments","printDirectives","getIdentifierForSelection","schema","node","kind","directives","length","alias","args","name","label","getTypeString","typeCondition","condition","variableName","String","value","passingValue","process","env","NODE_ENV","module","exports"],"mappings":"AAAA;;;;;;;;;AASA;AACA;;AAEA,IAAIA,SAAS,GAAGC,OAAO,CAAC,oBAAD,CAAvB;;AAEA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,aAAD,CAAtB;AAAA,IACIE,cAAc,GAAGD,QAAQ,CAACC,cAD9B;AAAA,IAEIC,eAAe,GAAGF,QAAQ,CAACE,eAF/B;AAIA;;;;;;;AAKA,SAASC,yBAAT,CAAmCC,MAAnC,EAA2CC,IAA3C,EAAiD;AAC/C,MAAIA,IAAI,CAACC,IAAL,KAAc,aAAd,IAA+BD,IAAI,CAACC,IAAL,KAAc,aAAjD,EAAgE;AAC9D,WAAO,YAAYD,IAAI,CAACE,UAAL,CAAgBC,MAA5B,KAAuC,CAAvC,GAA2CH,IAAI,CAACI,KAAhD,GAAwDJ,IAAI,CAACI,KAAL,GAAaP,eAAe,CAACE,MAAD,EAASC,IAAI,CAACE,UAAd,CAA3F;AACD,GAFD,MAEO,IAAIF,IAAI,CAACC,IAAL,KAAc,gBAAlB,EAAoC;AACzC,WAAO,oBAAoBD,IAAI,CAACK,IAAL,CAAUF,MAA9B,KAAyC,CAAzC,GAA6CH,IAAI,CAACM,IAAlD,GAAyDN,IAAI,CAACM,IAAL,GAAYV,cAAc,CAACG,MAAD,EAASC,IAAI,CAACK,IAAd,CAA1F;AACD,GAFM,MAEA,IAAIL,IAAI,CAACC,IAAL,KAAc,cAAlB,EAAkC;AACvC,WAAO,eAAP;AACD,GAFM,MAEA,IAAID,IAAI,CAACC,IAAL,KAAc,OAAlB,EAA2B;AAChC,WAAO,WAAWD,IAAI,CAACO,KAAvB;AACD,GAFM,MAEA,IAAIP,IAAI,CAACC,IAAL,KAAc,QAAlB,EAA4B;AACjC,WAAO,YAAYD,IAAI,CAACO,KAAxB;AACD,GAFM,MAEA,IAAIP,IAAI,CAACC,IAAL,KAAc,gBAAlB,EAAoC;AACzC,WAAO,oBAAoBF,MAAM,CAACS,aAAP,CAAqBR,IAAI,CAACS,aAA1B,CAApB,GAA+DZ,eAAe,CAACE,MAAD,EAASC,IAAI,CAACE,UAAd,CAArF;AACD,GAFM,MAEA,IAAIF,IAAI,CAACC,IAAL,KAAc,iBAAlB,EAAqC;AAC1C,WAAO,kBAAP;AACD,GAFM,MAEA,IAAID,IAAI,CAACC,IAAL,KAAc,0BAAlB,EAA8C;AACnD,WAAO,wBAAwBD,IAAI,CAACM,IAApC;AACD,GAFM,MAEA,IAAIN,IAAI,CAACC,IAAL,KAAc,WAAlB,EAA+B;AACpC,WAAO,gBAAgBD,IAAI,CAACU,SAAL,CAAeT,IAAf,KAAwB,UAAxB,GAAqC,MAAMD,IAAI,CAACU,SAAL,CAAeC,YAA1D,GAAyEC,MAAM,CAACZ,IAAI,CAACU,SAAL,CAAeG,KAAhB,CAA/F,IAAyHD,MAAM,CAACZ,IAAI,CAACc,YAAN,CAAtI;AACD,GAFM,MAEA;AACL,KAAC,KAAD,GAASC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCxB,SAAS,CAAC,KAAD,EAAQ,kDAAR,EAA4DO,IAAI,CAACC,IAAjE,CAAjD,GAA0HR,SAAS,CAAC,KAAD,CAA5I,GAAsJ,KAAK,CAA3J;AACD;AACF;;AAEDyB,MAAM,CAACC,OAAP,GAAiBrB,yBAAjB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar invariant = require(\"fbjs/lib/invariant\");\n\nvar _require = require('./IRPrinter'),\n    printArguments = _require.printArguments,\n    printDirectives = _require.printDirectives;\n\n/**\n * Generates an identifier that is unique to a given selection: the alias for\n * fields, the type for inline fragments, and a summary of the condition\n * variable and passing value for conditions.\n */\nfunction getIdentifierForSelection(schema, node) {\n  if (node.kind === 'LinkedField' || node.kind === 'ScalarField') {\n    return 'Field: ' + node.directives.length === 0 ? node.alias : node.alias + printDirectives(schema, node.directives);\n  } else if (node.kind === 'FragmentSpread') {\n    return 'FragmentSpread:' + node.args.length === 0 ? node.name : node.name + printArguments(schema, node.args);\n  } else if (node.kind === 'ModuleImport') {\n    return 'ModuleImport:';\n  } else if (node.kind === 'Defer') {\n    return 'Defer:' + node.label;\n  } else if (node.kind === 'Stream') {\n    return 'Stream:' + node.label;\n  } else if (node.kind === 'InlineFragment') {\n    return 'InlineFragment:' + schema.getTypeString(node.typeCondition) + printDirectives(schema, node.directives);\n  } else if (node.kind === 'ClientExtension') {\n    return 'ClientExtension:';\n  } else if (node.kind === 'InlineDataFragmentSpread') {\n    return 'InlineDataFragment:' + node.name;\n  } else if (node.kind === 'Condition') {\n    return 'Condition:' + (node.condition.kind === 'Variable' ? '$' + node.condition.variableName : String(node.condition.value)) + String(node.passingValue);\n  } else {\n    !false ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'getIdentifierForSelection: Unexpected kind `%s`.', node.kind) : invariant(false) : void 0;\n  }\n}\n\nmodule.exports = getIdentifierForSelection;"]},"metadata":{},"sourceType":"script"}