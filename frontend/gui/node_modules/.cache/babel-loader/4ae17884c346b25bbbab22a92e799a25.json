{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\plech\\\\github\\\\programs\\\\django+react\\\\tutorials\\\\graphql_django\\\\frontend\\\\gui\\\\src\\\\components\\\\Posts\\\\PostEdit.js\";\nimport React, { useState, useRef } from 'react';\nimport { Button, Form } from 'semantic-ui-react';\nimport { useMutation } from '@apollo/react-hooks';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { POST_EDIT_MUTATION } from '../api/post';\n\nconst PostEdit = () => {\n  const [allowButton, setAllowButton] = useState(false);\n  const titleRef = useRef();\n  const contentRef = useRef();\n  const {\n    id\n  } = useParams();\n  const history = useHistory();\n  const [postEdit] = useMutation(POST_EDIT_MUTATION);\n\n  const handleOnSubmit = () => {\n    const titleValue = titleRef.current.value;\n    const contentValue = contentRef.current.value;\n    postEdit({\n      variables: {\n        id: id,\n        title: titleValue,\n        content: contentValue\n      }\n    });\n    history.push('/');\n  };\n\n  const checkForm = () => {\n    if (titleRef.current.value && contentRef.current.value) {\n      setAllowButton(true);\n    } else {\n      setAllowButton(false);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"post-create-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    onChange: checkForm,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Form.Field, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 21\n    }\n  }, \"Title\"), /*#__PURE__*/React.createElement(\"input\", {\n    ref: titleRef,\n    placeholder: \"Title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(Form.Field, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 21\n    }\n  }, \"Content\"), /*#__PURE__*/React.createElement(\"textarea\", {\n    ref: contentRef,\n    placeholder: \"Enter something...\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    onClick: handleOnSubmit,\n    className: \"submit-button\",\n    type: \"button\",\n    primary: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 17\n    }\n  }, \"Edit\")));\n};\n\nexport default PostEdit;","map":{"version":3,"sources":["C:/Users/plech/github/programs/django+react/tutorials/graphql_django/frontend/gui/src/components/Posts/PostEdit.js"],"names":["React","useState","useRef","Button","Form","useMutation","useHistory","useParams","POST_EDIT_MUTATION","PostEdit","allowButton","setAllowButton","titleRef","contentRef","id","history","postEdit","handleOnSubmit","titleValue","current","value","contentValue","variables","title","content","push","checkForm"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,QAAwC,OAAxC;AACA,SAASC,MAAT,EAAiBC,IAAjB,QAA6B,mBAA7B;AACA,SAASC,WAAT,QAA4B,qBAA5B;AACA,SAASC,UAAT,EAAqBC,SAArB,QAAsC,kBAAtC;AAEA,SAASC,kBAAT,QAAmC,aAAnC;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AACnB,QAAM,CAAEC,WAAF,EAAeC,cAAf,IAAkCV,QAAQ,CAAC,KAAD,CAAhD;AACA,QAAMW,QAAQ,GAAGV,MAAM,EAAvB;AACA,QAAMW,UAAU,GAAGX,MAAM,EAAzB;AAEA,QAAM;AAAEY,IAAAA;AAAF,MAASP,SAAS,EAAxB;AACA,QAAMQ,OAAO,GAAGT,UAAU,EAA1B;AACA,QAAM,CAAEU,QAAF,IAAeX,WAAW,CAACG,kBAAD,CAAhC;;AAEA,QAAMS,cAAc,GAAG,MAAM;AAEzB,UAAMC,UAAU,GAAGN,QAAQ,CAACO,OAAT,CAAiBC,KAApC;AACA,UAAMC,YAAY,GAAGR,UAAU,CAACM,OAAX,CAAmBC,KAAxC;AAEAJ,IAAAA,QAAQ,CAAC;AAAEM,MAAAA,SAAS,EAAE;AAAER,QAAAA,EAAE,EAAEA,EAAN;AAAUS,QAAAA,KAAK,EAAEL,UAAjB;AAA6BM,QAAAA,OAAO,EAAEH;AAAtC;AAAb,KAAD,CAAR;AACAN,IAAAA,OAAO,CAACU,IAAR,CAAa,GAAb;AACH,GAPD;;AASA,QAAMC,SAAS,GAAG,MAAM;AACpB,QAAId,QAAQ,CAACO,OAAT,CAAiBC,KAAjB,IAA0BP,UAAU,CAACM,OAAX,CAAmBC,KAAjD,EAAwD;AACpDT,MAAAA,cAAc,CAAC,IAAD,CAAd;AACH,KAFD,MAIK;AACDA,MAAAA,cAAc,CAAC,KAAD,CAAd;AACH;AACJ,GARD;;AAUA,sBACI;AAAK,IAAA,SAAS,EAAC,uBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,IAAD;AAAM,IAAA,QAAQ,EAAEe,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADJ,eAEI;AAAO,IAAA,GAAG,EAAEd,QAAZ;AAAsB,IAAA,WAAW,EAAC,OAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADJ,eAKI,oBAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADJ,eAEI;AAAU,IAAA,GAAG,EAAEC,UAAf;AAA2B,IAAA,WAAW,EAAC,oBAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CALJ,eASI,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAEI,cAAjB;AAAiC,IAAA,SAAS,EAAC,eAA3C;AAA2D,IAAA,IAAI,EAAC,QAAhE;AAAyE,IAAA,OAAO,MAAhF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YATJ,CADJ,CADJ;AAeH,CA3CD;;AA6CA,eAAeR,QAAf","sourcesContent":["import React, { useState, useRef } from 'react'\r\nimport { Button, Form } from 'semantic-ui-react'\r\nimport { useMutation } from '@apollo/react-hooks'\r\nimport { useHistory, useParams } from 'react-router-dom'\r\n\r\nimport { POST_EDIT_MUTATION } from '../api/post' \r\n\r\nconst PostEdit = () => {    \r\n    const [ allowButton, setAllowButton ] = useState(false)\r\n    const titleRef = useRef()\r\n    const contentRef = useRef()\r\n    \r\n    const { id } = useParams()\r\n    const history = useHistory()\r\n    const [ postEdit ] = useMutation(POST_EDIT_MUTATION)\r\n\r\n    const handleOnSubmit = () => {\r\n\r\n        const titleValue = titleRef.current.value\r\n        const contentValue = contentRef.current.value\r\n\r\n        postEdit({ variables: { id: id, title: titleValue, content: contentValue } })\r\n        history.push('/')\r\n    }\r\n\r\n    const checkForm = () => {\r\n        if (titleRef.current.value && contentRef.current.value) {\r\n            setAllowButton(true)\r\n        }\r\n\r\n        else {\r\n            setAllowButton(false)\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <div className=\"post-create-container\">\r\n            <Form onChange={checkForm}>\r\n                <Form.Field>\r\n                    <label>Title</label>\r\n                    <input ref={titleRef} placeholder=\"Title\" />\r\n                </Form.Field>\r\n                <Form.Field>\r\n                    <label>Content</label>\r\n                    <textarea ref={contentRef} placeholder='Enter something...' />\r\n                </Form.Field>\r\n                <Button onClick={handleOnSubmit} className=\"submit-button\" type='button' primary>Edit</Button>\r\n            </Form>\r\n        </div> \r\n    )\r\n}\r\n\r\nexport default PostEdit\r\n"]},"metadata":{},"sourceType":"module"}