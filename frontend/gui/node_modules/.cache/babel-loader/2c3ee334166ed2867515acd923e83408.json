{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\programs\\\\django+react\\\\tutorials\\\\graphql_django\\\\frontend\\\\gui\\\\src\\\\components\\\\Posts\\\\PostEdit.js\";\nimport React, { useState, useRef, useEffect } from 'react';\nimport { Button, Form } from 'semantic-ui-react';\nimport { useMutation } from '@apollo/react-hooks';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { POST_EDIT_MUTATION, POST_FIND_MUTATION } from '../Api/post';\n\nconst PostEdit = () => {\n  const {\n    id\n  } = useParams();\n  const history = useHistory();\n  const user = localStorage.getItem('user');\n  const [allowButton, setAllowButton] = useState(false);\n  const [titleInput, setTitleInput] = useState('');\n  const [textAreaInput, setTextAreaInput] = useState('');\n  const [postEdit] = useMutation(POST_EDIT_MUTATION);\n  const [postFind, {\n    data: detailData\n  }] = useMutation(POST_FIND_MUTATION); //everytime id changes -> find post info of that id \n\n  useEffect(() => {\n    postFind({\n      variables: {\n        id: id\n      }\n    });\n  }, [id]); //set title and textarea to set default value in forms\n\n  useEffect(() => {\n    if (detailData && detailData.findPost.message === 'Success') {\n      setTitleInput(detailData.findPost.post.title);\n      setTextAreaInput(detailData.findPost.post.content);\n    }\n  }, [detailData]); //if title and textarea are filled -> undisable button\n\n  useEffect(() => {\n    if (titleInput !== '' && textAreaInput !== '') {\n      setAllowButton(true);\n    } else {\n      setAllowButton(false);\n    }\n  }, [titleInput, textAreaInput]);\n\n  const handleOnSubmit = () => {\n    console.log(isNanN(id));\n\n    if (isNaN(id) === false) {\n      postEdit({\n        variables: {\n          id: id,\n          title: titleInput,\n          content: textAreaInput\n        }\n      });\n      history.push('/');\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"post-create-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }, detailData && detailData.findPost.message === 'Success' && detailData.findPost.post.user.username === user ? /*#__PURE__*/React.createElement(Form, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Form.Field, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 25\n    }\n  }, \"Title\"), /*#__PURE__*/React.createElement(\"input\", {\n    onChange: event => setTitleInput(event.target.value),\n    value: titleInput,\n    placeholder: \"Title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(Form.Field, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 25\n    }\n  }, \"Content\"), /*#__PURE__*/React.createElement(\"textarea\", {\n    onChange: event => setTextAreaInput(event.target.value),\n    value: textAreaInput,\n    placeholder: \"Enter something...\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 25\n    }\n  })), allowButton ? /*#__PURE__*/React.createElement(Button, {\n    onClick: handleOnSubmit,\n    className: \"submit-button\",\n    type: \"button\",\n    primary: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 25\n    }\n  }, \"Edit\") : /*#__PURE__*/React.createElement(Button, {\n    disabled: true,\n    onClick: handleOnSubmit,\n    className: \"submit-button\",\n    type: \"button\",\n    primary: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 25\n    }\n  }, \"Edit\")) : null);\n};\n\nexport default PostEdit;","map":{"version":3,"sources":["C:/Users/Admin/programs/django+react/tutorials/graphql_django/frontend/gui/src/components/Posts/PostEdit.js"],"names":["React","useState","useRef","useEffect","Button","Form","useMutation","useHistory","useParams","POST_EDIT_MUTATION","POST_FIND_MUTATION","PostEdit","id","history","user","localStorage","getItem","allowButton","setAllowButton","titleInput","setTitleInput","textAreaInput","setTextAreaInput","postEdit","postFind","data","detailData","variables","findPost","message","post","title","content","handleOnSubmit","console","log","isNanN","isNaN","push","username","event","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from 'react'\r\nimport { Button, Form } from 'semantic-ui-react'\r\nimport { useMutation } from '@apollo/react-hooks'\r\nimport { useHistory, useParams } from 'react-router-dom'\r\n\r\nimport { POST_EDIT_MUTATION, POST_FIND_MUTATION } from '../Api/post' \r\n\r\nconst PostEdit = () => {    \r\n    const { id } = useParams()\r\n    const history = useHistory()\r\n    const user = localStorage.getItem('user')\r\n\r\n    const [ allowButton, setAllowButton ] = useState(false)\r\n    const [ titleInput, setTitleInput ] = useState('')\r\n    const [ textAreaInput, setTextAreaInput ] = useState('')\r\n    \r\n    const [ postEdit ] = useMutation(POST_EDIT_MUTATION) \r\n    const [ postFind, { data: detailData } ] = useMutation(POST_FIND_MUTATION)\r\n\r\n\r\n   //everytime id changes -> find post info of that id \r\n    useEffect(() => {\r\n        postFind({variables: { id: id }})\r\n    }, [id])\r\n    \r\n    //set title and textarea to set default value in forms\r\n    useEffect(() => {\r\n        if (detailData && detailData.findPost.message === 'Success') {\r\n            setTitleInput(detailData.findPost.post.title)\r\n            setTextAreaInput(detailData.findPost.post.content)\r\n        }\r\n    }, [detailData])\r\n    \r\n    //if title and textarea are filled -> undisable button\r\n    useEffect(() => {\r\n        if (titleInput !== '' && textAreaInput !== '') {\r\n            setAllowButton(true)\r\n        }\r\n        \r\n        else {\r\n            setAllowButton(false)\r\n        }\r\n    }, [titleInput, textAreaInput])\r\n\r\n    const handleOnSubmit = () => {\r\n        console.log(isNanN(id))\r\n        if (isNaN(id) === false) {\r\n            postEdit({ variables: { id: id, title: titleInput, content: textAreaInput } })\r\n            history.push('/')\r\n        }\r\n    }\r\n    \r\n    \r\n    return (\r\n        <div className=\"post-create-container\">\r\n            {(detailData && detailData.findPost.message === 'Success' &&\r\n              detailData.findPost.post.user.username === user) ? (\r\n                <Form>\r\n                    <Form.Field>\r\n                        <label>Title</label>\r\n                        <input onChange={event => setTitleInput(event.target.value)} value={titleInput} placeholder=\"Title\" />\r\n                    </Form.Field>\r\n                    <Form.Field>\r\n                        <label>Content</label>\r\n                        <textarea onChange={event => setTextAreaInput(event.target.value)} value={textAreaInput} placeholder='Enter something...' />\r\n                    </Form.Field>\r\n                    {(allowButton) ? (\r\n                        <Button onClick={handleOnSubmit} className=\"submit-button\" type='button' primary>Edit</Button>\r\n                    ) : (\r\n                        <Button disabled onClick={handleOnSubmit} className=\"submit-button\" type='button' primary>Edit</Button>\r\n                    )}\r\n                </Form>\r\n            ) : null }\r\n        </div> \r\n    )\r\n}\r\n\r\nexport default PostEdit\r\n"]},"metadata":{},"sourceType":"module"}