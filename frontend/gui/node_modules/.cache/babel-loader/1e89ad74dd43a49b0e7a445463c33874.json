{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\programs\\\\django+react\\\\tutorials\\\\graphql_django\\\\frontend\\\\gui\\\\src\\\\components\\\\Posts\\\\PostEdit.js\";\nimport React, { useState, useRef, useEffect } from 'react';\nimport { Button, Form } from 'semantic-ui-react';\nimport { useMutation } from '@apollo/react-hooks';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { POST_EDIT_MUTATION, POST_FIND_MUTATION } from '../Api/post';\n\nconst PostEdit = () => {\n  const [allowButton, setAllowButton] = useState(false);\n  const [titleInput, setTitleInput] = useState('');\n  const [textAreaInput, setTextAreaInput] = useState('');\n  const {\n    id\n  } = useParams();\n  const user = localStorage.getItem('user');\n  const history = useHistory();\n  const [postEdit] = useMutation(POST_EDIT_MUTATION);\n  const [postFind, {\n    data: detailData\n  }] = useMutation(POST_FIND_MUTATION); //everytime id changes -> find post info of that id \n\n  useEffect(() => {\n    postFind({\n      variables: {\n        id: id\n      }\n    });\n  }, [id]); //set title and textarea to set default value in forms\n\n  useEffect(() => {\n    if (detailData) {\n      setTitleInput(detailData.findPost.post.title);\n      setTextAreaInput(detailData.findPost.post.content);\n    }\n  }, [detailData]);\n\n  const handleOnSubmit = () => {\n    postEdit({\n      variables: {\n        id: id,\n        title: titleInput,\n        content: textAreaInput\n      }\n    });\n    history.push('/');\n  }; //if title and textarea are filled -> undisable button\n\n\n  const checkForm = () => {\n    if (titleInput !== '' && textAreaInput !== '') {\n      setAllowButton(true);\n    } else {\n      setAllowButton(false);\n    }\n  }; //set title on the new value\n\n\n  const onTitleChange = value => {\n    setTitleValue(value);\n  }; //set textarea on the new value\n\n\n  const onTextAreaChange = value => {\n    setTextAreaValue(value);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"post-create-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }, detailData && detailData.findPost.post.user.username === user ? /*#__PURE__*/React.createElement(Form, {\n    onChange: checkForm,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Form.Field, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 25\n    }\n  }, \"Title\"), /*#__PURE__*/React.createElement(\"input\", {\n    onChange: event => onTitleChange(event.target.value),\n    value: titleInput,\n    ref: titleRef,\n    placeholder: \"Title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(Form.Field, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 25\n    }\n  }, \"Content\"), /*#__PURE__*/React.createElement(\"textarea\", {\n    onChange: event => onTextAreaChange(event.target.value),\n    value: textareaValue,\n    ref: contentRef,\n    placeholder: \"Enter something...\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 25\n    }\n  })), allowButton ? /*#__PURE__*/React.createElement(Button, {\n    onClick: handleOnSubmit,\n    className: \"submit-button\",\n    type: \"button\",\n    primary: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 25\n    }\n  }, \"Edit\") : /*#__PURE__*/React.createElement(Button, {\n    disabled: true,\n    onClick: handleOnSubmit,\n    className: \"submit-button\",\n    type: \"button\",\n    primary: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 25\n    }\n  }, \"Edit\")) : null);\n};\n\nexport default PostEdit;","map":{"version":3,"sources":["C:/Users/Admin/programs/django+react/tutorials/graphql_django/frontend/gui/src/components/Posts/PostEdit.js"],"names":["React","useState","useRef","useEffect","Button","Form","useMutation","useHistory","useParams","POST_EDIT_MUTATION","POST_FIND_MUTATION","PostEdit","allowButton","setAllowButton","titleInput","setTitleInput","textAreaInput","setTextAreaInput","id","user","localStorage","getItem","history","postEdit","postFind","data","detailData","variables","findPost","post","title","content","handleOnSubmit","push","checkForm","onTitleChange","value","setTitleValue","onTextAreaChange","setTextAreaValue","username","event","target","titleRef","textareaValue","contentRef"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from 'react'\r\nimport { Button, Form } from 'semantic-ui-react'\r\nimport { useMutation } from '@apollo/react-hooks'\r\nimport { useHistory, useParams } from 'react-router-dom'\r\n\r\nimport { POST_EDIT_MUTATION, POST_FIND_MUTATION } from '../Api/post' \r\n\r\nconst PostEdit = () => {    \r\n    const [ allowButton, setAllowButton ] = useState(false)\r\n    const [ titleInput, setTitleInput ] = useState('')\r\n    const [ textAreaInput, setTextAreaInput ] = useState('')\r\n    \r\n    const { id } = useParams()\r\n    const user = localStorage.getItem('user')\r\n    const history = useHistory()\r\n    const [ postEdit ] = useMutation(POST_EDIT_MUTATION) \r\n    const [ postFind, { data: detailData } ] = useMutation(POST_FIND_MUTATION)\r\n\r\n   //everytime id changes -> find post info of that id \r\n    useEffect(() => {\r\n        postFind({variables: { id: id }})\r\n    }, [id])\r\n    \r\n    //set title and textarea to set default value in forms\r\n    useEffect(() => {\r\n        if (detailData) {\r\n            setTitleInput(detailData.findPost.post.title)\r\n            setTextAreaInput(detailData.findPost.post.content)\r\n        }\r\n    }, [detailData])\r\n\r\n    const handleOnSubmit = () => {\r\n        postEdit({ variables: { id: id, title: titleInput, content: textAreaInput } })\r\n        history.push('/')\r\n    }\r\n    \r\n    //if title and textarea are filled -> undisable button\r\n    const checkForm = () => {\r\n        if (titleInput !== '' && textAreaInput !== '') {\r\n            setAllowButton(true)\r\n        }\r\n        \r\n        else {\r\n            setAllowButton(false)\r\n        }\r\n    }\r\n    \r\n    //set title on the new value\r\n    const onTitleChange = (value) => {\r\n        setTitleValue(value)\r\n    }\r\n    \r\n    //set textarea on the new value\r\n    const onTextAreaChange = (value) => {\r\n        setTextAreaValue(value)\r\n    }\r\n    \r\n    \r\n    return (\r\n        <div className=\"post-create-container\">\r\n            {(detailData && detailData.findPost.post.user.username === user) ? (\r\n                <Form onChange={checkForm}>\r\n                    <Form.Field>\r\n                        <label>Title</label>\r\n                        <input onChange={event => onTitleChange(event.target.value)} value={titleInput} ref={titleRef} placeholder=\"Title\" />\r\n                    </Form.Field>\r\n                    <Form.Field>\r\n                        <label>Content</label>\r\n                        <textarea onChange={event => onTextAreaChange(event.target.value)} value={textareaValue} ref={contentRef} placeholder='Enter something...' />\r\n                    </Form.Field>\r\n                    {(allowButton) ? (\r\n                        <Button onClick={handleOnSubmit} className=\"submit-button\" type='button' primary>Edit</Button>\r\n                    ) : (\r\n                        <Button disabled onClick={handleOnSubmit} className=\"submit-button\" type='button' primary>Edit</Button>\r\n                    )}\r\n                </Form>\r\n            ) : null }\r\n        </div> \r\n    )\r\n}\r\n\r\nexport default PostEdit\r\n"]},"metadata":{},"sourceType":"module"}