{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\n\nclass TokenType {\n  constructor(label, conf = {}) {\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    this.updateContext = null;\n  }\n\n}\n\nconst keywords = new Map();\n\nfunction createKeyword(name, options = {}) {\n  options.keyword = name;\n  const token = new TokenType(name, options);\n  keywords.set(name, token);\n  return token;\n}\n\nfunction createBinop(name, binop) {\n  return new TokenType(name, {\n    beforeExpr,\n    binop\n  });\n}\n\nconst types = {\n  num: new TokenType(\"num\", {\n    startsExpr\n  }),\n  bigint: new TokenType(\"bigint\", {\n    startsExpr\n  }),\n  decimal: new TokenType(\"decimal\", {\n    startsExpr\n  }),\n  regexp: new TokenType(\"regexp\", {\n    startsExpr\n  }),\n  string: new TokenType(\"string\", {\n    startsExpr\n  }),\n  name: new TokenType(\"name\", {\n    startsExpr\n  }),\n  eof: new TokenType(\"eof\"),\n  bracketL: new TokenType(\"[\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketHashL: new TokenType(\"#[\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketBarL: new TokenType(\"[|\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketR: new TokenType(\"]\"),\n  bracketBarR: new TokenType(\"|]\"),\n  braceL: new TokenType(\"{\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceBarL: new TokenType(\"{|\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceHashL: new TokenType(\"#{\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceR: new TokenType(\"}\"),\n  braceBarR: new TokenType(\"|}\"),\n  parenL: new TokenType(\"(\", {\n    beforeExpr,\n    startsExpr\n  }),\n  parenR: new TokenType(\")\"),\n  comma: new TokenType(\",\", {\n    beforeExpr\n  }),\n  semi: new TokenType(\";\", {\n    beforeExpr\n  }),\n  colon: new TokenType(\":\", {\n    beforeExpr\n  }),\n  doubleColon: new TokenType(\"::\", {\n    beforeExpr\n  }),\n  dot: new TokenType(\".\"),\n  question: new TokenType(\"?\", {\n    beforeExpr\n  }),\n  questionDot: new TokenType(\"?.\"),\n  arrow: new TokenType(\"=>\", {\n    beforeExpr\n  }),\n  template: new TokenType(\"template\"),\n  ellipsis: new TokenType(\"...\", {\n    beforeExpr\n  }),\n  backQuote: new TokenType(\"`\", {\n    startsExpr\n  }),\n  dollarBraceL: new TokenType(\"${\", {\n    beforeExpr,\n    startsExpr\n  }),\n  at: new TokenType(\"@\"),\n  hash: new TokenType(\"#\", {\n    startsExpr\n  }),\n  interpreterDirective: new TokenType(\"#!...\"),\n  eq: new TokenType(\"=\", {\n    beforeExpr,\n    isAssign\n  }),\n  assign: new TokenType(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  incDec: new TokenType(\"++/--\", {\n    prefix,\n    postfix,\n    startsExpr\n  }),\n  bang: new TokenType(\"!\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  tilde: new TokenType(\"~\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  plusMin: new TokenType(\"+/-\", {\n    beforeExpr,\n    binop: 9,\n    prefix,\n    startsExpr\n  }),\n  modulo: new TokenType(\"%\", {\n    beforeExpr,\n    binop: 10,\n    startsExpr\n  }),\n  star: new TokenType(\"*\", {\n    binop: 10\n  }),\n  slash: createBinop(\"/\", 10),\n  exponent: new TokenType(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true\n  }),\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", {\n    beforeExpr\n  }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", {\n    beforeExpr\n  }),\n  _do: createKeyword(\"do\", {\n    isLoop,\n    beforeExpr\n  }),\n  _else: createKeyword(\"else\", {\n    beforeExpr\n  }),\n  _finally: createKeyword(\"finally\"),\n  _for: createKeyword(\"for\", {\n    isLoop\n  }),\n  _function: createKeyword(\"function\", {\n    startsExpr\n  }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", {\n    beforeExpr\n  }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _while: createKeyword(\"while\", {\n    isLoop\n  }),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", {\n    beforeExpr,\n    startsExpr\n  }),\n  _this: createKeyword(\"this\", {\n    startsExpr\n  }),\n  _super: createKeyword(\"super\", {\n    startsExpr\n  }),\n  _class: createKeyword(\"class\", {\n    startsExpr\n  }),\n  _extends: createKeyword(\"extends\", {\n    beforeExpr\n  }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", {\n    startsExpr\n  }),\n  _null: createKeyword(\"null\", {\n    startsExpr\n  }),\n  _true: createKeyword(\"true\", {\n    startsExpr\n  }),\n  _false: createKeyword(\"false\", {\n    startsExpr\n  }),\n  _in: createKeyword(\"in\", {\n    beforeExpr,\n    binop: 7\n  }),\n  _instanceof: createKeyword(\"instanceof\", {\n    beforeExpr,\n    binop: 7\n  }),\n  _typeof: createKeyword(\"typeof\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _void: createKeyword(\"void\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _delete: createKeyword(\"delete\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  })\n};\nconst SCOPE_OTHER = 0b00000000,\n      SCOPE_PROGRAM = 0b00000001,\n      SCOPE_FUNCTION = 0b00000010,\n      SCOPE_ARROW = 0b00000100,\n      SCOPE_SIMPLE_CATCH = 0b00001000,\n      SCOPE_SUPER = 0b00010000,\n      SCOPE_DIRECT_SUPER = 0b00100000,\n      SCOPE_CLASS = 0b01000000,\n      SCOPE_TS_MODULE = 0b10000000,\n      SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_TS_MODULE;\nconst BIND_KIND_VALUE = 0b00000000001,\n      BIND_KIND_TYPE = 0b00000000010,\n      BIND_SCOPE_VAR = 0b00000000100,\n      BIND_SCOPE_LEXICAL = 0b00000001000,\n      BIND_SCOPE_FUNCTION = 0b00000010000,\n      BIND_FLAGS_NONE = 0b00001000000,\n      BIND_FLAGS_CLASS = 0b00010000000,\n      BIND_FLAGS_TS_ENUM = 0b00100000000,\n      BIND_FLAGS_TS_CONST_ENUM = 0b01000000000,\n      BIND_FLAGS_TS_EXPORT_ONLY = 0b10000000000;\nconst BIND_CLASS = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_CLASS,\n      BIND_LEXICAL = BIND_KIND_VALUE | 0 | BIND_SCOPE_LEXICAL | 0,\n      BIND_VAR = BIND_KIND_VALUE | 0 | BIND_SCOPE_VAR | 0,\n      BIND_FUNCTION = BIND_KIND_VALUE | 0 | BIND_SCOPE_FUNCTION | 0,\n      BIND_TS_INTERFACE = 0 | BIND_KIND_TYPE | 0 | BIND_FLAGS_CLASS,\n      BIND_TS_TYPE = 0 | BIND_KIND_TYPE | 0 | 0,\n      BIND_TS_ENUM = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_TS_ENUM,\n      BIND_TS_AMBIENT = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY,\n      BIND_NONE = 0 | 0 | 0 | BIND_FLAGS_NONE,\n      BIND_OUTSIDE = BIND_KIND_VALUE | 0 | 0 | BIND_FLAGS_NONE,\n      BIND_TS_CONST_ENUM = BIND_TS_ENUM | BIND_FLAGS_TS_CONST_ENUM,\n      BIND_TS_NAMESPACE = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY;\nconst CLASS_ELEMENT_FLAG_STATIC = 0b100,\n      CLASS_ELEMENT_KIND_GETTER = 0b010,\n      CLASS_ELEMENT_KIND_SETTER = 0b001,\n      CLASS_ELEMENT_KIND_ACCESSOR = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_KIND_SETTER;\nconst CLASS_ELEMENT_STATIC_GETTER = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_FLAG_STATIC,\n      CLASS_ELEMENT_STATIC_SETTER = CLASS_ELEMENT_KIND_SETTER | CLASS_ELEMENT_FLAG_STATIC,\n      CLASS_ELEMENT_INSTANCE_GETTER = CLASS_ELEMENT_KIND_GETTER,\n      CLASS_ELEMENT_INSTANCE_SETTER = CLASS_ELEMENT_KIND_SETTER,\n      CLASS_ELEMENT_OTHER = 0;\nconst lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\nconst lineBreakG = new RegExp(lineBreak.source, \"g\");\n\nfunction isNewLine(code) {\n  switch (code) {\n    case 10:\n    case 13:\n    case 8232:\n    case 8233:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nconst skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\nfunction isWhitespace(code) {\n  switch (code) {\n    case 0x0009:\n    case 0x000b:\n    case 0x000c:\n    case 32:\n    case 160:\n    case 5760:\n    case 0x2000:\n    case 0x2001:\n    case 0x2002:\n    case 0x2003:\n    case 0x2004:\n    case 0x2005:\n    case 0x2006:\n    case 0x2007:\n    case 0x2008:\n    case 0x2009:\n    case 0x200a:\n    case 0x202f:\n    case 0x205f:\n    case 0x3000:\n    case 0xfeff:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nclass Position {\n  constructor(line, col) {\n    this.line = line;\n    this.column = col;\n  }\n\n}\n\nclass SourceLocation {\n  constructor(start, end) {\n    this.start = start;\n    this.end = end;\n  }\n\n}\n\nfunction getLineInfo(input, offset) {\n  let line = 1;\n  let lineStart = 0;\n  let match;\n  lineBreakG.lastIndex = 0;\n\n  while ((match = lineBreakG.exec(input)) && match.index < offset) {\n    line++;\n    lineStart = lineBreakG.lastIndex;\n  }\n\n  return new Position(line, offset - lineStart);\n}\n\nclass BaseParser {\n  constructor() {\n    this.sawUnambiguousESM = false;\n    this.ambiguousScriptDifferentAst = false;\n  }\n\n  hasPlugin(name) {\n    return this.plugins.has(name);\n  }\n\n  getPluginOption(plugin, name) {\n    if (this.hasPlugin(plugin)) return this.plugins.get(plugin)[name];\n  }\n\n}\n\nfunction last(stack) {\n  return stack[stack.length - 1];\n}\n\nclass CommentsParser extends BaseParser {\n  addComment(comment) {\n    if (this.filename) comment.loc.filename = this.filename;\n    this.state.trailingComments.push(comment);\n    this.state.leadingComments.push(comment);\n  }\n\n  adjustCommentsAfterTrailingComma(node, elements, takeAllComments) {\n    if (this.state.leadingComments.length === 0) {\n      return;\n    }\n\n    let lastElement = null;\n    let i = elements.length;\n\n    while (lastElement === null && i > 0) {\n      lastElement = elements[--i];\n    }\n\n    if (lastElement === null) {\n      return;\n    }\n\n    for (let j = 0; j < this.state.leadingComments.length; j++) {\n      if (this.state.leadingComments[j].end < this.state.commentPreviousNode.end) {\n        this.state.leadingComments.splice(j, 1);\n        j--;\n      }\n    }\n\n    const newTrailingComments = [];\n\n    for (let i = 0; i < this.state.leadingComments.length; i++) {\n      const leadingComment = this.state.leadingComments[i];\n\n      if (leadingComment.end < node.end) {\n        newTrailingComments.push(leadingComment);\n\n        if (!takeAllComments) {\n          this.state.leadingComments.splice(i, 1);\n          i--;\n        }\n      } else {\n        if (node.trailingComments === undefined) {\n          node.trailingComments = [];\n        }\n\n        node.trailingComments.push(leadingComment);\n      }\n    }\n\n    if (takeAllComments) this.state.leadingComments = [];\n\n    if (newTrailingComments.length > 0) {\n      lastElement.trailingComments = newTrailingComments;\n    } else if (lastElement.trailingComments !== undefined) {\n      lastElement.trailingComments = [];\n    }\n  }\n\n  processComment(node) {\n    if (node.type === \"Program\" && node.body.length > 0) return;\n    const stack = this.state.commentStack;\n    let firstChild, lastChild, trailingComments, i, j;\n\n    if (this.state.trailingComments.length > 0) {\n      if (this.state.trailingComments[0].start >= node.end) {\n        trailingComments = this.state.trailingComments;\n        this.state.trailingComments = [];\n      } else {\n        this.state.trailingComments.length = 0;\n      }\n    } else if (stack.length > 0) {\n      const lastInStack = last(stack);\n\n      if (lastInStack.trailingComments && lastInStack.trailingComments[0].start >= node.end) {\n        trailingComments = lastInStack.trailingComments;\n        delete lastInStack.trailingComments;\n      }\n    }\n\n    if (stack.length > 0 && last(stack).start >= node.start) {\n      firstChild = stack.pop();\n    }\n\n    while (stack.length > 0 && last(stack).start >= node.start) {\n      lastChild = stack.pop();\n    }\n\n    if (!lastChild && firstChild) lastChild = firstChild;\n\n    if (firstChild) {\n      switch (node.type) {\n        case \"ObjectExpression\":\n          this.adjustCommentsAfterTrailingComma(node, node.properties);\n          break;\n\n        case \"ObjectPattern\":\n          this.adjustCommentsAfterTrailingComma(node, node.properties, true);\n          break;\n\n        case \"CallExpression\":\n          this.adjustCommentsAfterTrailingComma(node, node.arguments);\n          break;\n\n        case \"ArrayExpression\":\n          this.adjustCommentsAfterTrailingComma(node, node.elements);\n          break;\n\n        case \"ArrayPattern\":\n          this.adjustCommentsAfterTrailingComma(node, node.elements, true);\n          break;\n      }\n    } else if (this.state.commentPreviousNode && (this.state.commentPreviousNode.type === \"ImportSpecifier\" && node.type !== \"ImportSpecifier\" || this.state.commentPreviousNode.type === \"ExportSpecifier\" && node.type !== \"ExportSpecifier\")) {\n      this.adjustCommentsAfterTrailingComma(node, [this.state.commentPreviousNode]);\n    }\n\n    if (lastChild) {\n      if (lastChild.leadingComments) {\n        if (lastChild !== node && lastChild.leadingComments.length > 0 && last(lastChild.leadingComments).end <= node.start) {\n          node.leadingComments = lastChild.leadingComments;\n          delete lastChild.leadingComments;\n        } else {\n          for (i = lastChild.leadingComments.length - 2; i >= 0; --i) {\n            if (lastChild.leadingComments[i].end <= node.start) {\n              node.leadingComments = lastChild.leadingComments.splice(0, i + 1);\n              break;\n            }\n          }\n        }\n      }\n    } else if (this.state.leadingComments.length > 0) {\n      if (last(this.state.leadingComments).end <= node.start) {\n        if (this.state.commentPreviousNode) {\n          for (j = 0; j < this.state.leadingComments.length; j++) {\n            if (this.state.leadingComments[j].end < this.state.commentPreviousNode.end) {\n              this.state.leadingComments.splice(j, 1);\n              j--;\n            }\n          }\n        }\n\n        if (this.state.leadingComments.length > 0) {\n          node.leadingComments = this.state.leadingComments;\n          this.state.leadingComments = [];\n        }\n      } else {\n        for (i = 0; i < this.state.leadingComments.length; i++) {\n          if (this.state.leadingComments[i].end > node.start) {\n            break;\n          }\n        }\n\n        const leadingComments = this.state.leadingComments.slice(0, i);\n\n        if (leadingComments.length) {\n          node.leadingComments = leadingComments;\n        }\n\n        trailingComments = this.state.leadingComments.slice(i);\n\n        if (trailingComments.length === 0) {\n          trailingComments = null;\n        }\n      }\n    }\n\n    this.state.commentPreviousNode = node;\n\n    if (trailingComments) {\n      if (trailingComments.length && trailingComments[0].start >= node.start && last(trailingComments).end <= node.end) {\n        node.innerComments = trailingComments;\n      } else {\n        const firstTrailingCommentIndex = trailingComments.findIndex(comment => comment.end >= node.end);\n\n        if (firstTrailingCommentIndex > 0) {\n          node.innerComments = trailingComments.slice(0, firstTrailingCommentIndex);\n          node.trailingComments = trailingComments.slice(firstTrailingCommentIndex);\n        } else {\n          node.trailingComments = trailingComments;\n        }\n      }\n    }\n\n    stack.push(node);\n  }\n\n}\n\nconst ErrorMessages = Object.freeze({\n  AccessorIsGenerator: \"A %0ter cannot be a generator\",\n  ArgumentsDisallowedInInitializer: \"'arguments' is not allowed in class field initializer\",\n  AsyncFunctionInSingleStatementContext: \"Async functions can only be declared at the top level or inside a block\",\n  AwaitBindingIdentifier: \"Can not use 'await' as identifier inside an async function\",\n  AwaitExpressionFormalParameter: \"await is not allowed in async function parameters\",\n  AwaitNotInAsyncFunction: \"Can not use keyword 'await' outside an async function\",\n  BadGetterArity: \"getter must not have any formal parameters\",\n  BadSetterArity: \"setter must have exactly one formal parameter\",\n  BadSetterRestParameter: \"setter function argument must not be a rest parameter\",\n  ConstructorClassField: \"Classes may not have a field named 'constructor'\",\n  ConstructorClassPrivateField: \"Classes may not have a private field named '#constructor'\",\n  ConstructorIsAccessor: \"Class constructor may not be an accessor\",\n  ConstructorIsAsync: \"Constructor can't be an async function\",\n  ConstructorIsGenerator: \"Constructor can't be a generator\",\n  DeclarationMissingInitializer: \"%0 require an initialization value\",\n  DecoratorBeforeExport: \"Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax\",\n  DecoratorConstructor: \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n  DecoratorExportClass: \"Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead.\",\n  DecoratorSemicolon: \"Decorators must not be followed by a semicolon\",\n  DeletePrivateField: \"Deleting a private field is not allowed\",\n  DestructureNamedImport: \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n  DuplicateConstructor: \"Duplicate constructor in the same class\",\n  DuplicateDefaultExport: \"Only one default export allowed per module.\",\n  DuplicateExport: \"`%0` has already been exported. Exported identifiers must be unique.\",\n  DuplicateProto: \"Redefinition of __proto__ property\",\n  DuplicateRegExpFlags: \"Duplicate regular expression flag\",\n  ElementAfterRest: \"Rest element must be last element\",\n  EscapedCharNotAnIdentifier: \"Invalid Unicode escape\",\n  ExportDefaultFromAsIdentifier: \"'from' is not allowed as an identifier after 'export default'\",\n  ForInOfLoopInitializer: \"%0 loop variable declaration may not have an initializer\",\n  GeneratorInSingleStatementContext: \"Generators can only be declared at the top level or inside a block\",\n  IllegalBreakContinue: \"Unsyntactic %0\",\n  IllegalLanguageModeDirective: \"Illegal 'use strict' directive in function with non-simple parameter list\",\n  IllegalReturn: \"'return' outside of function\",\n  ImportCallArgumentTrailingComma: \"Trailing comma is disallowed inside import(...) arguments\",\n  ImportCallArity: \"import() requires exactly %0\",\n  ImportCallNotNewExpression: \"Cannot use new with import(...)\",\n  ImportCallSpreadArgument: \"... is not allowed in import()\",\n  ImportMetaOutsideModule: `import.meta may appear only with 'sourceType: \"module\"'`,\n  ImportOutsideModule: `'import' and 'export' may appear only with 'sourceType: \"module\"'`,\n  InvalidBigIntLiteral: \"Invalid BigIntLiteral\",\n  InvalidCodePoint: \"Code point out of bounds\",\n  InvalidDecimal: \"Invalid decimal\",\n  InvalidDigit: \"Expected number in radix %0\",\n  InvalidEscapeSequence: \"Bad character escape sequence\",\n  InvalidEscapeSequenceTemplate: \"Invalid escape sequence in template\",\n  InvalidEscapedReservedWord: \"Escape sequence in keyword %0\",\n  InvalidIdentifier: \"Invalid identifier %0\",\n  InvalidLhs: \"Invalid left-hand side in %0\",\n  InvalidLhsBinding: \"Binding invalid left-hand side in %0\",\n  InvalidNumber: \"Invalid number\",\n  InvalidOrUnexpectedToken: \"Unexpected character '%0'\",\n  InvalidParenthesizedAssignment: \"Invalid parenthesized assignment pattern\",\n  InvalidPrivateFieldResolution: \"Private name #%0 is not defined\",\n  InvalidPropertyBindingPattern: \"Binding member expression\",\n  InvalidRecordProperty: \"Only properties and spread elements are allowed in record definitions\",\n  InvalidRestAssignmentPattern: \"Invalid rest operator's argument\",\n  LabelRedeclaration: \"Label '%0' is already declared\",\n  LetInLexicalBinding: \"'let' is not allowed to be used as a name in 'let' or 'const' declarations.\",\n  LineTerminatorBeforeArrow: \"No line break is allowed before '=>'\",\n  MalformedRegExpFlags: \"Invalid regular expression flag\",\n  MissingClassName: \"A class name is required\",\n  MissingEqInAssignment: \"Only '=' operator can be used for specifying default value.\",\n  MissingUnicodeEscape: \"Expecting Unicode escape sequence \\\\uXXXX\",\n  MixingCoalesceWithLogical: \"Nullish coalescing operator(??) requires parens when mixing with logical operators\",\n  ModuleAttributeDifferentFromType: \"The only accepted module attribute is `type`\",\n  ModuleAttributeInvalidValue: \"Only string literals are allowed as module attribute values\",\n  ModuleAttributesWithDuplicateKeys: 'Duplicate key \"%0\" is not allowed in module attributes',\n  ModuleExportUndefined: \"Export '%0' is not defined\",\n  MultipleDefaultsInSwitch: \"Multiple default clauses\",\n  NewlineAfterThrow: \"Illegal newline after throw\",\n  NoCatchOrFinally: \"Missing catch or finally clause\",\n  NumberIdentifier: \"Identifier directly after number\",\n  NumericSeparatorInEscapeSequence: \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences\",\n  ObsoleteAwaitStar: \"await* has been removed from the async functions proposal. Use Promise.all() instead.\",\n  OptionalChainingNoNew: \"constructors in/after an Optional Chain are not allowed\",\n  OptionalChainingNoTemplate: \"Tagged Template Literals are not allowed in optionalChain\",\n  ParamDupe: \"Argument name clash\",\n  PatternHasAccessor: \"Object pattern can't contain getter or setter\",\n  PatternHasMethod: \"Object pattern can't contain methods\",\n  PipelineBodyNoArrow: 'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized',\n  PipelineBodySequenceExpression: \"Pipeline body may not be a comma-separated sequence expression\",\n  PipelineHeadSequenceExpression: \"Pipeline head should not be a comma-separated sequence expression\",\n  PipelineTopicUnused: \"Pipeline is in topic style but does not use topic reference\",\n  PrimaryTopicNotAllowed: \"Topic reference was used in a lexical context without topic binding\",\n  PrimaryTopicRequiresSmartPipeline: \"Primary Topic Reference found but pipelineOperator not passed 'smart' for 'proposal' option.\",\n  PrivateInExpectedIn: \"Private names are only allowed in property accesses (`obj.#%0`) or in `in` expressions (`#%0 in obj`)\",\n  PrivateNameRedeclaration: \"Duplicate private name #%0\",\n  RecordExpressionBarIncorrectEndSyntaxType: \"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'\",\n  RecordExpressionBarIncorrectStartSyntaxType: \"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'\",\n  RecordExpressionHashIncorrectStartSyntaxType: \"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'\",\n  RecordNoProto: \"'__proto__' is not allowed in Record expressions\",\n  RestTrailingComma: \"Unexpected trailing comma after rest element\",\n  SloppyFunction: \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement\",\n  StaticPrototype: \"Classes may not have static property named prototype\",\n  StrictDelete: \"Deleting local variable in strict mode\",\n  StrictEvalArguments: \"Assigning to '%0' in strict mode\",\n  StrictEvalArgumentsBinding: \"Binding '%0' in strict mode\",\n  StrictFunction: \"In strict mode code, functions can only be declared at top level or inside a block\",\n  StrictNumericEscape: \"The only valid numeric escape in strict mode is '\\\\0'\",\n  StrictOctalLiteral: \"Legacy octal literals are not allowed in strict mode\",\n  StrictWith: \"'with' in strict mode\",\n  SuperNotAllowed: \"super() is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n  SuperPrivateField: \"Private fields can't be accessed on super\",\n  TrailingDecorator: \"Decorators must be attached to a class element\",\n  TupleExpressionBarIncorrectEndSyntaxType: \"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'\",\n  TupleExpressionBarIncorrectStartSyntaxType: \"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'\",\n  TupleExpressionHashIncorrectStartSyntaxType: \"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'\",\n  UnexpectedArgumentPlaceholder: \"Unexpected argument placeholder\",\n  UnexpectedAwaitAfterPipelineBody: 'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal',\n  UnexpectedDigitAfterHash: \"Unexpected digit after hash token\",\n  UnexpectedImportExport: \"'import' and 'export' may only appear at the top level\",\n  UnexpectedKeyword: \"Unexpected keyword '%0'\",\n  UnexpectedLeadingDecorator: \"Leading decorators must be attached to a class declaration\",\n  UnexpectedLexicalDeclaration: \"Lexical declaration cannot appear in a single-statement context\",\n  UnexpectedNewTarget: \"new.target can only be used in functions\",\n  UnexpectedNumericSeparator: \"A numeric separator is only allowed between two digits\",\n  UnexpectedPrivateField: \"Private names can only be used as the name of a class element (i.e. class C { #p = 42; #m() {} } )\\n or a property of member expression (i.e. this.#p).\",\n  UnexpectedReservedWord: \"Unexpected reserved word '%0'\",\n  UnexpectedSuper: \"super is only allowed in object methods and classes\",\n  UnexpectedToken: \"Unexpected token '%0'\",\n  UnexpectedTokenUnaryExponentiation: \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n  UnsupportedBind: \"Binding should be performed on object property.\",\n  UnsupportedDecoratorExport: \"A decorated export must export a class declaration\",\n  UnsupportedDefaultExport: \"Only expressions, functions or classes are allowed as the `default` export.\",\n  UnsupportedImport: \"import can only be used in import() or import.meta\",\n  UnsupportedMetaProperty: \"The only valid meta property for %0 is %0.%1\",\n  UnsupportedParameterDecorator: \"Decorators cannot be used to decorate parameters\",\n  UnsupportedPropertyDecorator: \"Decorators cannot be used to decorate object literal properties\",\n  UnsupportedSuper: \"super can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop])\",\n  UnterminatedComment: \"Unterminated comment\",\n  UnterminatedRegExp: \"Unterminated regular expression\",\n  UnterminatedString: \"Unterminated string constant\",\n  UnterminatedTemplate: \"Unterminated template\",\n  VarRedeclaration: \"Identifier '%0' has already been declared\",\n  YieldBindingIdentifier: \"Can not use 'yield' as identifier inside a generator\",\n  YieldInParameter: \"yield is not allowed in generator parameters\",\n  ZeroDigitNumericSeparator: \"Numeric separator can not be used after leading 0\"\n});\n\nclass ParserError extends CommentsParser {\n  getLocationForPosition(pos) {\n    let loc;\n    if (pos === this.state.start) loc = this.state.startLoc;else if (pos === this.state.lastTokStart) loc = this.state.lastTokStartLoc;else if (pos === this.state.end) loc = this.state.endLoc;else if (pos === this.state.lastTokEnd) loc = this.state.lastTokEndLoc;else loc = getLineInfo(this.input, pos);\n    return loc;\n  }\n\n  raise(pos, errorTemplate, ...params) {\n    return this.raiseWithData(pos, undefined, errorTemplate, ...params);\n  }\n\n  raiseWithData(pos, data, errorTemplate, ...params) {\n    const loc = this.getLocationForPosition(pos);\n    const message = errorTemplate.replace(/%(\\d+)/g, (_, i) => params[i]) + ` (${loc.line}:${loc.column})`;\n    return this._raise(Object.assign({\n      loc,\n      pos\n    }, data), message);\n  }\n\n  _raise(errorContext, message) {\n    const err = new SyntaxError(message);\n    Object.assign(err, errorContext);\n\n    if (this.options.errorRecovery) {\n      if (!this.isLookahead) this.state.errors.push(err);\n      return err;\n    } else {\n      throw err;\n    }\n  }\n\n}\n\nfunction isSimpleProperty(node) {\n  return node != null && node.type === \"Property\" && node.kind === \"init\" && node.method === false;\n}\n\nvar estree = superClass => class extends superClass {\n  estreeParseRegExpLiteral({\n    pattern,\n    flags\n  }) {\n    let regex = null;\n\n    try {\n      regex = new RegExp(pattern, flags);\n    } catch (e) {}\n\n    const node = this.estreeParseLiteral(regex);\n    node.regex = {\n      pattern,\n      flags\n    };\n    return node;\n  }\n\n  estreeParseBigIntLiteral(value) {\n    const bigInt = typeof BigInt !== \"undefined\" ? BigInt(value) : null;\n    const node = this.estreeParseLiteral(bigInt);\n    node.bigint = String(node.value || value);\n    return node;\n  }\n\n  estreeParseDecimalLiteral(value) {\n    const decimal = null;\n    const node = this.estreeParseLiteral(decimal);\n    node.decimal = String(node.value || value);\n    return node;\n  }\n\n  estreeParseLiteral(value) {\n    return this.parseLiteral(value, \"Literal\");\n  }\n\n  directiveToStmt(directive) {\n    const directiveLiteral = directive.value;\n    const stmt = this.startNodeAt(directive.start, directive.loc.start);\n    const expression = this.startNodeAt(directiveLiteral.start, directiveLiteral.loc.start);\n    expression.value = directiveLiteral.value;\n    expression.raw = directiveLiteral.extra.raw;\n    stmt.expression = this.finishNodeAt(expression, \"Literal\", directiveLiteral.end, directiveLiteral.loc.end);\n    stmt.directive = directiveLiteral.extra.raw.slice(1, -1);\n    return this.finishNodeAt(stmt, \"ExpressionStatement\", directive.end, directive.loc.end);\n  }\n\n  initFunction(node, isAsync) {\n    super.initFunction(node, isAsync);\n    node.expression = false;\n  }\n\n  checkDeclaration(node) {\n    if (isSimpleProperty(node)) {\n      this.checkDeclaration(node.value);\n    } else {\n      super.checkDeclaration(node);\n    }\n  }\n\n  checkGetterSetterParams(method) {\n    const prop = method;\n    const paramCount = prop.kind === \"get\" ? 0 : 1;\n    const start = prop.start;\n\n    if (prop.value.params.length !== paramCount) {\n      if (method.kind === \"get\") {\n        this.raise(start, ErrorMessages.BadGetterArity);\n      } else {\n        this.raise(start, ErrorMessages.BadSetterArity);\n      }\n    } else if (prop.kind === \"set\" && prop.value.params[0].type === \"RestElement\") {\n      this.raise(start, ErrorMessages.BadSetterRestParameter);\n    }\n  }\n\n  checkLVal(expr, bindingType = BIND_NONE, checkClashes, contextDescription, disallowLetBinding) {\n    switch (expr.type) {\n      case \"ObjectPattern\":\n        expr.properties.forEach(prop => {\n          this.checkLVal(prop.type === \"Property\" ? prop.value : prop, bindingType, checkClashes, \"object destructuring pattern\", disallowLetBinding);\n        });\n        break;\n\n      default:\n        super.checkLVal(expr, bindingType, checkClashes, contextDescription, disallowLetBinding);\n    }\n  }\n\n  checkProto(prop, isRecord, protoRef, refExpressionErrors) {\n    if (prop.method) {\n      return;\n    }\n\n    super.checkProto(prop, isRecord, protoRef, refExpressionErrors);\n  }\n\n  isValidDirective(stmt) {\n    var _stmt$expression$extr;\n\n    return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"Literal\" && typeof stmt.expression.value === \"string\" && !((_stmt$expression$extr = stmt.expression.extra) == null ? void 0 : _stmt$expression$extr.parenthesized);\n  }\n\n  stmtToDirective(stmt) {\n    const directive = super.stmtToDirective(stmt);\n    const value = stmt.expression.value;\n    directive.value.value = value;\n    return directive;\n  }\n\n  parseBlockBody(node, allowDirectives, topLevel, end) {\n    super.parseBlockBody(node, allowDirectives, topLevel, end);\n    const directiveStatements = node.directives.map(d => this.directiveToStmt(d));\n    node.body = directiveStatements.concat(node.body);\n    delete node.directives;\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true);\n\n    if (method.typeParameters) {\n      method.value.typeParameters = method.typeParameters;\n      delete method.typeParameters;\n    }\n\n    classBody.body.push(method);\n  }\n\n  parseExprAtom(refExpressionErrors) {\n    switch (this.state.type) {\n      case types.num:\n      case types.string:\n        return this.estreeParseLiteral(this.state.value);\n\n      case types.regexp:\n        return this.estreeParseRegExpLiteral(this.state.value);\n\n      case types.bigint:\n        return this.estreeParseBigIntLiteral(this.state.value);\n\n      case types.decimal:\n        return this.estreeParseDecimalLiteral(this.state.value);\n\n      case types._null:\n        return this.estreeParseLiteral(null);\n\n      case types._true:\n        return this.estreeParseLiteral(true);\n\n      case types._false:\n        return this.estreeParseLiteral(false);\n\n      default:\n        return super.parseExprAtom(refExpressionErrors);\n    }\n  }\n\n  parseLiteral(value, type, startPos, startLoc) {\n    const node = super.parseLiteral(value, type, startPos, startLoc);\n    node.raw = node.extra.raw;\n    delete node.extra;\n    return node;\n  }\n\n  parseFunctionBody(node, allowExpression, isMethod = false) {\n    super.parseFunctionBody(node, allowExpression, isMethod);\n    node.expression = node.body.type !== \"BlockStatement\";\n  }\n\n  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {\n    let funcNode = this.startNode();\n    funcNode.kind = node.kind;\n    funcNode = super.parseMethod(funcNode, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope);\n    funcNode.type = \"FunctionExpression\";\n    delete funcNode.kind;\n    node.value = funcNode;\n    type = type === \"ClassMethod\" ? \"MethodDefinition\" : type;\n    return this.finishNode(node, type);\n  }\n\n  parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {\n    const node = super.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor);\n\n    if (node) {\n      node.type = \"Property\";\n      if (node.kind === \"method\") node.kind = \"init\";\n      node.shorthand = false;\n    }\n\n    return node;\n  }\n\n  parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {\n    const node = super.parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors);\n\n    if (node) {\n      node.kind = \"init\";\n      node.type = \"Property\";\n    }\n\n    return node;\n  }\n\n  toAssignable(node) {\n    if (isSimpleProperty(node)) {\n      this.toAssignable(node.value);\n      return node;\n    }\n\n    return super.toAssignable(node);\n  }\n\n  toAssignableObjectExpressionProp(prop, isLast) {\n    if (prop.kind === \"get\" || prop.kind === \"set\") {\n      throw this.raise(prop.key.start, ErrorMessages.PatternHasAccessor);\n    } else if (prop.method) {\n      throw this.raise(prop.key.start, ErrorMessages.PatternHasMethod);\n    } else {\n      super.toAssignableObjectExpressionProp(prop, isLast);\n    }\n  }\n\n  finishCallExpression(node, optional) {\n    super.finishCallExpression(node, optional);\n\n    if (node.callee.type === \"Import\") {\n      node.type = \"ImportExpression\";\n      node.source = node.arguments[0];\n      delete node.arguments;\n      delete node.callee;\n    }\n\n    return node;\n  }\n\n  toReferencedListDeep(exprList, isParenthesizedExpr) {\n    if (!exprList) {\n      return;\n    }\n\n    super.toReferencedListDeep(exprList, isParenthesizedExpr);\n  }\n\n  parseExport(node) {\n    super.parseExport(node);\n\n    switch (node.type) {\n      case \"ExportAllDeclaration\":\n        node.exported = null;\n        break;\n\n      case \"ExportNamedDeclaration\":\n        if (node.specifiers.length === 1 && node.specifiers[0].type === \"ExportNamespaceSpecifier\") {\n          node.type = \"ExportAllDeclaration\";\n          node.exported = node.specifiers[0].exported;\n          delete node.specifiers;\n        }\n\n        break;\n    }\n\n    return node;\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    const node = super.parseSubscript(base, startPos, startLoc, noCalls, state);\n\n    if (state.optionalChainMember) {\n      if (node.type === \"OptionalMemberExpression\" || node.type === \"OptionalCallExpression\") {\n        node.type = node.type.substring(8);\n      }\n\n      if (state.stop) {\n        const chain = this.startNodeAtNode(node);\n        chain.expression = node;\n        return this.finishNode(chain, \"ChainExpression\");\n      }\n    } else if (node.type === \"MemberExpression\" || node.type === \"CallExpression\") {\n      node.optional = false;\n    }\n\n    return node;\n  }\n\n};\n\nclass TokContext {\n  constructor(token, isExpr, preserveSpace, override) {\n    this.token = token;\n    this.isExpr = !!isExpr;\n    this.preserveSpace = !!preserveSpace;\n    this.override = override;\n  }\n\n}\n\nconst types$1 = {\n  braceStatement: new TokContext(\"{\", false),\n  braceExpression: new TokContext(\"{\", true),\n  recordExpression: new TokContext(\"#{\", true),\n  templateQuasi: new TokContext(\"${\", false),\n  parenStatement: new TokContext(\"(\", false),\n  parenExpression: new TokContext(\"(\", true),\n  template: new TokContext(\"`\", true, true, p => p.readTmplToken()),\n  functionExpression: new TokContext(\"function\", true),\n  functionStatement: new TokContext(\"function\", false)\n};\n\ntypes.parenR.updateContext = types.braceR.updateContext = function () {\n  if (this.state.context.length === 1) {\n    this.state.exprAllowed = true;\n    return;\n  }\n\n  let out = this.state.context.pop();\n\n  if (out === types$1.braceStatement && this.curContext().token === \"function\") {\n    out = this.state.context.pop();\n  }\n\n  this.state.exprAllowed = !out.isExpr;\n};\n\ntypes.name.updateContext = function (prevType) {\n  let allowed = false;\n\n  if (prevType !== types.dot) {\n    if (this.state.value === \"of\" && !this.state.exprAllowed && prevType !== types._function && prevType !== types._class || this.state.value === \"yield\" && this.prodParam.hasYield) {\n      allowed = true;\n    }\n  }\n\n  this.state.exprAllowed = allowed;\n\n  if (this.state.isIterator) {\n    this.state.isIterator = false;\n  }\n};\n\ntypes.braceL.updateContext = function (prevType) {\n  this.state.context.push(this.braceIsBlock(prevType) ? types$1.braceStatement : types$1.braceExpression);\n  this.state.exprAllowed = true;\n};\n\ntypes.dollarBraceL.updateContext = function () {\n  this.state.context.push(types$1.templateQuasi);\n  this.state.exprAllowed = true;\n};\n\ntypes.parenL.updateContext = function (prevType) {\n  const statementParens = prevType === types._if || prevType === types._for || prevType === types._with || prevType === types._while;\n  this.state.context.push(statementParens ? types$1.parenStatement : types$1.parenExpression);\n  this.state.exprAllowed = true;\n};\n\ntypes.incDec.updateContext = function () {};\n\ntypes._function.updateContext = types._class.updateContext = function (prevType) {\n  if (prevType.beforeExpr && prevType !== types.semi && prevType !== types._else && !(prevType === types._return && this.hasPrecedingLineBreak()) && !((prevType === types.colon || prevType === types.braceL) && this.curContext() === types$1.b_stat)) {\n    this.state.context.push(types$1.functionExpression);\n  } else {\n    this.state.context.push(types$1.functionStatement);\n  }\n\n  this.state.exprAllowed = false;\n};\n\ntypes.backQuote.updateContext = function () {\n  if (this.curContext() === types$1.template) {\n    this.state.context.pop();\n  } else {\n    this.state.context.push(types$1.template);\n  }\n\n  this.state.exprAllowed = false;\n};\n\ntypes.braceHashL.updateContext = function () {\n  this.state.context.push(types$1.recordExpression);\n  this.state.exprAllowed = true;\n};\n\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u08a0-\\u08b4\\u08b6-\\u08c7\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\u9ffc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7bf\\ua7c2-\\ua7ca\\ua7f5-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\nlet nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u08d3-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf\\u1ac0\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1df9\\u1dfb-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\nconst nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\nconst nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\nconst astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 157, 310, 10, 21, 11, 7, 153, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 107, 20, 28, 22, 13, 52, 76, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 230, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 35, 56, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 190, 0, 80, 921, 103, 110, 18, 195, 2749, 1070, 4050, 582, 8634, 568, 8, 30, 114, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8952, 286, 50, 2, 18, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 2357, 44, 11, 6, 17, 0, 370, 43, 1301, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42717, 35, 4148, 12, 221, 3, 5761, 15, 7472, 3104, 541, 1507, 4938];\nconst astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 154, 10, 176, 2, 54, 14, 32, 9, 16, 3, 46, 10, 54, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 19306, 9, 135, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 5319, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 262, 6, 10, 9, 419, 13, 1495, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];\n\nfunction isInAstralSet(code, set) {\n  let pos = 0x10000;\n\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n\n  return false;\n}\n\nfunction isIdentifierStart(code) {\n  if (code < 65) return code === 36;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));\n  }\n\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\nfunction isIdentifierChar(code) {\n  if (code < 48) return code === 36;\n  if (code < 58) return true;\n  if (code < 65) return false;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n\n  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);\n}\n\nconst reservedWords = {\n  keyword: [\"break\", \"case\", \"catch\", \"continue\", \"debugger\", \"default\", \"do\", \"else\", \"finally\", \"for\", \"function\", \"if\", \"return\", \"switch\", \"throw\", \"try\", \"var\", \"const\", \"while\", \"with\", \"new\", \"this\", \"super\", \"class\", \"extends\", \"export\", \"import\", \"null\", \"true\", \"false\", \"in\", \"instanceof\", \"typeof\", \"void\", \"delete\"],\n  strict: [\"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\", \"public\", \"static\", \"yield\"],\n  strictBind: [\"eval\", \"arguments\"]\n};\nconst keywords$1 = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\n\nfunction isReservedWord(word, inModule) {\n  return inModule && word === \"await\" || word === \"enum\";\n}\n\nfunction isStrictReservedWord(word, inModule) {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\n\nfunction isStrictBindOnlyReservedWord(word) {\n  return reservedWordsStrictBindSet.has(word);\n}\n\nfunction isStrictBindReservedWord(word, inModule) {\n  return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);\n}\n\nfunction isKeyword(word) {\n  return keywords$1.has(word);\n}\n\nconst keywordRelationalOperator = /^in(stanceof)?$/;\n\nfunction isIteratorStart(current, next) {\n  return current === 64 && next === 64;\n}\n\nconst reservedTypes = new Set([\"_\", \"any\", \"bool\", \"boolean\", \"empty\", \"extends\", \"false\", \"interface\", \"mixed\", \"null\", \"number\", \"static\", \"string\", \"true\", \"typeof\", \"void\"]);\nconst FlowErrors = Object.freeze({\n  AmbiguousConditionalArrow: \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n  AmbiguousDeclareModuleKind: \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module\",\n  AssignReservedType: \"Cannot overwrite reserved type %0\",\n  DeclareClassElement: \"The `declare` modifier can only appear on class fields.\",\n  DeclareClassFieldInitializer: \"Initializers are not allowed in fields with the `declare` modifier.\",\n  DuplicateDeclareModuleExports: \"Duplicate `declare module.exports` statement\",\n  EnumBooleanMemberNotInitialized: \"Boolean enum members need to be initialized. Use either `%0 = true,` or `%0 = false,` in enum `%1`.\",\n  EnumDuplicateMemberName: \"Enum member names need to be unique, but the name `%0` has already been used before in enum `%1`.\",\n  EnumInconsistentMemberValues: \"Enum `%0` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.\",\n  EnumInvalidExplicitType: \"Enum type `%1` is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n  EnumInvalidExplicitTypeUnknownSupplied: \"Supplied enum type is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n  EnumInvalidMemberInitializerPrimaryType: \"Enum `%0` has type `%2`, so the initializer of `%1` needs to be a %2 literal.\",\n  EnumInvalidMemberInitializerSymbolType: \"Symbol enum members cannot be initialized. Use `%1,` in enum `%0`.\",\n  EnumInvalidMemberInitializerUnknownType: \"The enum member initializer for `%1` needs to be a literal (either a boolean, number, or string) in enum `%0`.\",\n  EnumInvalidMemberName: \"Enum member names cannot start with lowercase 'a' through 'z'. Instead of using `%0`, consider using `%1`, in enum `%2`.\",\n  EnumNumberMemberNotInitialized: \"Number enum members need to be initialized, e.g. `%1 = 1` in enum `%0`.\",\n  EnumStringMemberInconsistentlyInitailized: \"String enum members need to consistently either all use initializers, or use no initializers, in enum `%0`.\",\n  ImportTypeShorthandOnlyInPureImport: \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements\",\n  InexactInsideExact: \"Explicit inexact syntax cannot appear inside an explicit exact object type\",\n  InexactInsideNonObject: \"Explicit inexact syntax cannot appear in class or interface definitions\",\n  InexactVariance: \"Explicit inexact syntax cannot have variance\",\n  InvalidNonTypeImportInDeclareModule: \"Imports within a `declare module` body must always be `import type` or `import typeof`\",\n  MissingTypeParamDefault: \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n  NestedDeclareModule: \"`declare module` cannot be used inside another `declare module`\",\n  NestedFlowComment: \"Cannot have a flow comment inside another flow comment\",\n  OptionalBindingPattern: \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  SpreadVariance: \"Spread properties cannot have variance\",\n  TypeBeforeInitializer: \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`\",\n  TypeCastInPattern: \"The type cast expression is expected to be wrapped with parenthesis\",\n  UnexpectedExplicitInexactInObject: \"Explicit inexact syntax must appear at the end of an inexact object\",\n  UnexpectedReservedType: \"Unexpected reserved type %0\",\n  UnexpectedReservedUnderscore: \"`_` is only allowed as a type argument to call or new\",\n  UnexpectedSpaceBetweenModuloChecks: \"Spaces between `%` and `checks` are not allowed here.\",\n  UnexpectedSpreadType: \"Spread operator cannot appear in class or interface definitions\",\n  UnexpectedSubtractionOperand: 'Unexpected token, expected \"number\" or \"bigint\"',\n  UnexpectedTokenAfterTypeParameter: \"Expected an arrow function after this type parameter declaration\",\n  UnexpectedTypeParameterBeforeAsyncArrowFunction: \"Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`\",\n  UnsupportedDeclareExportKind: \"`declare export %0` is not supported. Use `%1` instead\",\n  UnsupportedStatementInDeclareModule: \"Only declares and type imports are allowed inside declare module\",\n  UnterminatedFlowComment: \"Unterminated flow-comment\"\n});\n\nfunction isEsModuleType(bodyElement) {\n  return bodyElement.type === \"DeclareExportAllDeclaration\" || bodyElement.type === \"DeclareExportDeclaration\" && (!bodyElement.declaration || bodyElement.declaration.type !== \"TypeAlias\" && bodyElement.declaration.type !== \"InterfaceDeclaration\");\n}\n\nfunction hasTypeImportKind(node) {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nfunction isMaybeDefaultImport(state) {\n  return (state.type === types.name || !!state.type.keyword) && state.value !== \"from\";\n}\n\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\"\n};\n\nfunction partition(list, test) {\n  const list1 = [];\n  const list2 = [];\n\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n\n  return [list1, list2];\n}\n\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\n\nvar flow = superClass => class extends superClass {\n  constructor(options, input) {\n    super(options, input);\n    this.flowPragma = undefined;\n  }\n\n  shouldParseTypes() {\n    return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n  }\n\n  shouldParseEnums() {\n    return !!this.getPluginOption(\"flow\", \"enums\");\n  }\n\n  finishToken(type, val) {\n    if (type !== types.string && type !== types.semi && type !== types.interpreterDirective) {\n      if (this.flowPragma === undefined) {\n        this.flowPragma = null;\n      }\n    }\n\n    return super.finishToken(type, val);\n  }\n\n  addComment(comment) {\n    if (this.flowPragma === undefined) {\n      const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n      if (!matches) ;else if (matches[1] === \"flow\") {\n        this.flowPragma = \"flow\";\n      } else if (matches[1] === \"noflow\") {\n        this.flowPragma = \"noflow\";\n      } else {\n        throw new Error(\"Unexpected flow pragma\");\n      }\n    }\n\n    return super.addComment(comment);\n  }\n\n  flowParseTypeInitialiser(tok) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    this.expect(tok || types.colon);\n    const type = this.flowParseType();\n    this.state.inType = oldInType;\n    return type;\n  }\n\n  flowParsePredicate() {\n    const node = this.startNode();\n    const moduloLoc = this.state.startLoc;\n    const moduloPos = this.state.start;\n    this.expect(types.modulo);\n    const checksLoc = this.state.startLoc;\n    this.expectContextual(\"checks\");\n\n    if (moduloLoc.line !== checksLoc.line || moduloLoc.column !== checksLoc.column - 1) {\n      this.raise(moduloPos, FlowErrors.UnexpectedSpaceBetweenModuloChecks);\n    }\n\n    if (this.eat(types.parenL)) {\n      node.value = this.parseExpression();\n      this.expect(types.parenR);\n      return this.finishNode(node, \"DeclaredPredicate\");\n    } else {\n      return this.finishNode(node, \"InferredPredicate\");\n    }\n  }\n\n  flowParseTypeAndPredicateInitialiser() {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    this.expect(types.colon);\n    let type = null;\n    let predicate = null;\n\n    if (this.match(types.modulo)) {\n      this.state.inType = oldInType;\n      predicate = this.flowParsePredicate();\n    } else {\n      type = this.flowParseType();\n      this.state.inType = oldInType;\n\n      if (this.match(types.modulo)) {\n        predicate = this.flowParsePredicate();\n      }\n    }\n\n    return [type, predicate];\n  }\n\n  flowParseDeclareClass(node) {\n    this.next();\n    this.flowParseInterfaceish(node, true);\n    return this.finishNode(node, \"DeclareClass\");\n  }\n\n  flowParseDeclareFunction(node) {\n    this.next();\n    const id = node.id = this.parseIdentifier();\n    const typeNode = this.startNode();\n    const typeContainer = this.startNode();\n\n    if (this.isRelational(\"<\")) {\n      typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      typeNode.typeParameters = null;\n    }\n\n    this.expect(types.parenL);\n    const tmp = this.flowParseFunctionTypeParams();\n    typeNode.params = tmp.params;\n    typeNode.rest = tmp.rest;\n    this.expect(types.parenR);\n    [typeNode.returnType, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n    typeContainer.typeAnnotation = this.finishNode(typeNode, \"FunctionTypeAnnotation\");\n    id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n    this.resetEndLocation(id);\n    this.semicolon();\n    return this.finishNode(node, \"DeclareFunction\");\n  }\n\n  flowParseDeclare(node, insideModule) {\n    if (this.match(types._class)) {\n      return this.flowParseDeclareClass(node);\n    } else if (this.match(types._function)) {\n      return this.flowParseDeclareFunction(node);\n    } else if (this.match(types._var)) {\n      return this.flowParseDeclareVariable(node);\n    } else if (this.eatContextual(\"module\")) {\n      if (this.match(types.dot)) {\n        return this.flowParseDeclareModuleExports(node);\n      } else {\n        if (insideModule) {\n          this.raise(this.state.lastTokStart, FlowErrors.NestedDeclareModule);\n        }\n\n        return this.flowParseDeclareModule(node);\n      }\n    } else if (this.isContextual(\"type\")) {\n      return this.flowParseDeclareTypeAlias(node);\n    } else if (this.isContextual(\"opaque\")) {\n      return this.flowParseDeclareOpaqueType(node);\n    } else if (this.isContextual(\"interface\")) {\n      return this.flowParseDeclareInterface(node);\n    } else if (this.match(types._export)) {\n      return this.flowParseDeclareExportDeclaration(node, insideModule);\n    } else {\n      throw this.unexpected();\n    }\n  }\n\n  flowParseDeclareVariable(node) {\n    this.next();\n    node.id = this.flowParseTypeAnnotatableIdentifier(true);\n    this.scope.declareName(node.id.name, BIND_VAR, node.id.start);\n    this.semicolon();\n    return this.finishNode(node, \"DeclareVariable\");\n  }\n\n  flowParseDeclareModule(node) {\n    this.scope.enter(SCOPE_OTHER);\n\n    if (this.match(types.string)) {\n      node.id = this.parseExprAtom();\n    } else {\n      node.id = this.parseIdentifier();\n    }\n\n    const bodyNode = node.body = this.startNode();\n    const body = bodyNode.body = [];\n    this.expect(types.braceL);\n\n    while (!this.match(types.braceR)) {\n      let bodyNode = this.startNode();\n\n      if (this.match(types._import)) {\n        this.next();\n\n        if (!this.isContextual(\"type\") && !this.match(types._typeof)) {\n          this.raise(this.state.lastTokStart, FlowErrors.InvalidNonTypeImportInDeclareModule);\n        }\n\n        this.parseImport(bodyNode);\n      } else {\n        this.expectContextual(\"declare\", FlowErrors.UnsupportedStatementInDeclareModule);\n        bodyNode = this.flowParseDeclare(bodyNode, true);\n      }\n\n      body.push(bodyNode);\n    }\n\n    this.scope.exit();\n    this.expect(types.braceR);\n    this.finishNode(bodyNode, \"BlockStatement\");\n    let kind = null;\n    let hasModuleExport = false;\n    body.forEach(bodyElement => {\n      if (isEsModuleType(bodyElement)) {\n        if (kind === \"CommonJS\") {\n          this.raise(bodyElement.start, FlowErrors.AmbiguousDeclareModuleKind);\n        }\n\n        kind = \"ES\";\n      } else if (bodyElement.type === \"DeclareModuleExports\") {\n        if (hasModuleExport) {\n          this.raise(bodyElement.start, FlowErrors.DuplicateDeclareModuleExports);\n        }\n\n        if (kind === \"ES\") {\n          this.raise(bodyElement.start, FlowErrors.AmbiguousDeclareModuleKind);\n        }\n\n        kind = \"CommonJS\";\n        hasModuleExport = true;\n      }\n    });\n    node.kind = kind || \"CommonJS\";\n    return this.finishNode(node, \"DeclareModule\");\n  }\n\n  flowParseDeclareExportDeclaration(node, insideModule) {\n    this.expect(types._export);\n\n    if (this.eat(types._default)) {\n      if (this.match(types._function) || this.match(types._class)) {\n        node.declaration = this.flowParseDeclare(this.startNode());\n      } else {\n        node.declaration = this.flowParseType();\n        this.semicolon();\n      }\n\n      node.default = true;\n      return this.finishNode(node, \"DeclareExportDeclaration\");\n    } else {\n      if (this.match(types._const) || this.isLet() || (this.isContextual(\"type\") || this.isContextual(\"interface\")) && !insideModule) {\n        const label = this.state.value;\n        const suggestion = exportSuggestions[label];\n        throw this.raise(this.state.start, FlowErrors.UnsupportedDeclareExportKind, label, suggestion);\n      }\n\n      if (this.match(types._var) || this.match(types._function) || this.match(types._class) || this.isContextual(\"opaque\")) {\n        node.declaration = this.flowParseDeclare(this.startNode());\n        node.default = false;\n        return this.finishNode(node, \"DeclareExportDeclaration\");\n      } else if (this.match(types.star) || this.match(types.braceL) || this.isContextual(\"interface\") || this.isContextual(\"type\") || this.isContextual(\"opaque\")) {\n        node = this.parseExport(node);\n\n        if (node.type === \"ExportNamedDeclaration\") {\n          node.type = \"ExportDeclaration\";\n          node.default = false;\n          delete node.exportKind;\n        }\n\n        node.type = \"Declare\" + node.type;\n        return node;\n      }\n    }\n\n    throw this.unexpected();\n  }\n\n  flowParseDeclareModuleExports(node) {\n    this.next();\n    this.expectContextual(\"exports\");\n    node.typeAnnotation = this.flowParseTypeAnnotation();\n    this.semicolon();\n    return this.finishNode(node, \"DeclareModuleExports\");\n  }\n\n  flowParseDeclareTypeAlias(node) {\n    this.next();\n    this.flowParseTypeAlias(node);\n    node.type = \"DeclareTypeAlias\";\n    return node;\n  }\n\n  flowParseDeclareOpaqueType(node) {\n    this.next();\n    this.flowParseOpaqueType(node, true);\n    node.type = \"DeclareOpaqueType\";\n    return node;\n  }\n\n  flowParseDeclareInterface(node) {\n    this.next();\n    this.flowParseInterfaceish(node);\n    return this.finishNode(node, \"DeclareInterface\");\n  }\n\n  flowParseInterfaceish(node, isClass = false) {\n    node.id = this.flowParseRestrictedIdentifier(!isClass, true);\n    this.scope.declareName(node.id.name, isClass ? BIND_FUNCTION : BIND_LEXICAL, node.id.start);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n\n    node.extends = [];\n    node.implements = [];\n    node.mixins = [];\n\n    if (this.eat(types._extends)) {\n      do {\n        node.extends.push(this.flowParseInterfaceExtends());\n      } while (!isClass && this.eat(types.comma));\n    }\n\n    if (this.isContextual(\"mixins\")) {\n      this.next();\n\n      do {\n        node.mixins.push(this.flowParseInterfaceExtends());\n      } while (this.eat(types.comma));\n    }\n\n    if (this.isContextual(\"implements\")) {\n      this.next();\n\n      do {\n        node.implements.push(this.flowParseInterfaceExtends());\n      } while (this.eat(types.comma));\n    }\n\n    node.body = this.flowParseObjectType({\n      allowStatic: isClass,\n      allowExact: false,\n      allowSpread: false,\n      allowProto: isClass,\n      allowInexact: false\n    });\n  }\n\n  flowParseInterfaceExtends() {\n    const node = this.startNode();\n    node.id = this.flowParseQualifiedTypeIdentifier();\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterInstantiation();\n    } else {\n      node.typeParameters = null;\n    }\n\n    return this.finishNode(node, \"InterfaceExtends\");\n  }\n\n  flowParseInterface(node) {\n    this.flowParseInterfaceish(node);\n    return this.finishNode(node, \"InterfaceDeclaration\");\n  }\n\n  checkNotUnderscore(word) {\n    if (word === \"_\") {\n      this.raise(this.state.start, FlowErrors.UnexpectedReservedUnderscore);\n    }\n  }\n\n  checkReservedType(word, startLoc, declaration) {\n    if (!reservedTypes.has(word)) return;\n    this.raise(startLoc, declaration ? FlowErrors.AssignReservedType : FlowErrors.UnexpectedReservedType, word);\n  }\n\n  flowParseRestrictedIdentifier(liberal, declaration) {\n    this.checkReservedType(this.state.value, this.state.start, declaration);\n    return this.parseIdentifier(liberal);\n  }\n\n  flowParseTypeAlias(node) {\n    node.id = this.flowParseRestrictedIdentifier(false, true);\n    this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n\n    node.right = this.flowParseTypeInitialiser(types.eq);\n    this.semicolon();\n    return this.finishNode(node, \"TypeAlias\");\n  }\n\n  flowParseOpaqueType(node, declare) {\n    this.expectContextual(\"type\");\n    node.id = this.flowParseRestrictedIdentifier(true, true);\n    this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n\n    node.supertype = null;\n\n    if (this.match(types.colon)) {\n      node.supertype = this.flowParseTypeInitialiser(types.colon);\n    }\n\n    node.impltype = null;\n\n    if (!declare) {\n      node.impltype = this.flowParseTypeInitialiser(types.eq);\n    }\n\n    this.semicolon();\n    return this.finishNode(node, \"OpaqueType\");\n  }\n\n  flowParseTypeParameter(requireDefault = false) {\n    const nodeStart = this.state.start;\n    const node = this.startNode();\n    const variance = this.flowParseVariance();\n    const ident = this.flowParseTypeAnnotatableIdentifier();\n    node.name = ident.name;\n    node.variance = variance;\n    node.bound = ident.typeAnnotation;\n\n    if (this.match(types.eq)) {\n      this.eat(types.eq);\n      node.default = this.flowParseType();\n    } else {\n      if (requireDefault) {\n        this.raise(nodeStart, FlowErrors.MissingTypeParamDefault);\n      }\n    }\n\n    return this.finishNode(node, \"TypeParameter\");\n  }\n\n  flowParseTypeParameterDeclaration() {\n    const oldInType = this.state.inType;\n    const node = this.startNode();\n    node.params = [];\n    this.state.inType = true;\n\n    if (this.isRelational(\"<\") || this.match(types.jsxTagStart)) {\n      this.next();\n    } else {\n      this.unexpected();\n    }\n\n    let defaultRequired = false;\n\n    do {\n      const typeParameter = this.flowParseTypeParameter(defaultRequired);\n      node.params.push(typeParameter);\n\n      if (typeParameter.default) {\n        defaultRequired = true;\n      }\n\n      if (!this.isRelational(\">\")) {\n        this.expect(types.comma);\n      }\n    } while (!this.isRelational(\">\"));\n\n    this.expectRelational(\">\");\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterDeclaration\");\n  }\n\n  flowParseTypeParameterInstantiation() {\n    const node = this.startNode();\n    const oldInType = this.state.inType;\n    node.params = [];\n    this.state.inType = true;\n    this.expectRelational(\"<\");\n    const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n    this.state.noAnonFunctionType = false;\n\n    while (!this.isRelational(\">\")) {\n      node.params.push(this.flowParseType());\n\n      if (!this.isRelational(\">\")) {\n        this.expect(types.comma);\n      }\n    }\n\n    this.state.noAnonFunctionType = oldNoAnonFunctionType;\n    this.expectRelational(\">\");\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterInstantiation\");\n  }\n\n  flowParseTypeParameterInstantiationCallOrNew() {\n    const node = this.startNode();\n    const oldInType = this.state.inType;\n    node.params = [];\n    this.state.inType = true;\n    this.expectRelational(\"<\");\n\n    while (!this.isRelational(\">\")) {\n      node.params.push(this.flowParseTypeOrImplicitInstantiation());\n\n      if (!this.isRelational(\">\")) {\n        this.expect(types.comma);\n      }\n    }\n\n    this.expectRelational(\">\");\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterInstantiation\");\n  }\n\n  flowParseInterfaceType() {\n    const node = this.startNode();\n    this.expectContextual(\"interface\");\n    node.extends = [];\n\n    if (this.eat(types._extends)) {\n      do {\n        node.extends.push(this.flowParseInterfaceExtends());\n      } while (this.eat(types.comma));\n    }\n\n    node.body = this.flowParseObjectType({\n      allowStatic: false,\n      allowExact: false,\n      allowSpread: false,\n      allowProto: false,\n      allowInexact: false\n    });\n    return this.finishNode(node, \"InterfaceTypeAnnotation\");\n  }\n\n  flowParseObjectPropertyKey() {\n    return this.match(types.num) || this.match(types.string) ? this.parseExprAtom() : this.parseIdentifier(true);\n  }\n\n  flowParseObjectTypeIndexer(node, isStatic, variance) {\n    node.static = isStatic;\n\n    if (this.lookahead().type === types.colon) {\n      node.id = this.flowParseObjectPropertyKey();\n      node.key = this.flowParseTypeInitialiser();\n    } else {\n      node.id = null;\n      node.key = this.flowParseType();\n    }\n\n    this.expect(types.bracketR);\n    node.value = this.flowParseTypeInitialiser();\n    node.variance = variance;\n    return this.finishNode(node, \"ObjectTypeIndexer\");\n  }\n\n  flowParseObjectTypeInternalSlot(node, isStatic) {\n    node.static = isStatic;\n    node.id = this.flowParseObjectPropertyKey();\n    this.expect(types.bracketR);\n    this.expect(types.bracketR);\n\n    if (this.isRelational(\"<\") || this.match(types.parenL)) {\n      node.method = true;\n      node.optional = false;\n      node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));\n    } else {\n      node.method = false;\n\n      if (this.eat(types.question)) {\n        node.optional = true;\n      }\n\n      node.value = this.flowParseTypeInitialiser();\n    }\n\n    return this.finishNode(node, \"ObjectTypeInternalSlot\");\n  }\n\n  flowParseObjectTypeMethodish(node) {\n    node.params = [];\n    node.rest = null;\n    node.typeParameters = null;\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    this.expect(types.parenL);\n\n    while (!this.match(types.parenR) && !this.match(types.ellipsis)) {\n      node.params.push(this.flowParseFunctionTypeParam());\n\n      if (!this.match(types.parenR)) {\n        this.expect(types.comma);\n      }\n    }\n\n    if (this.eat(types.ellipsis)) {\n      node.rest = this.flowParseFunctionTypeParam();\n    }\n\n    this.expect(types.parenR);\n    node.returnType = this.flowParseTypeInitialiser();\n    return this.finishNode(node, \"FunctionTypeAnnotation\");\n  }\n\n  flowParseObjectTypeCallProperty(node, isStatic) {\n    const valueNode = this.startNode();\n    node.static = isStatic;\n    node.value = this.flowParseObjectTypeMethodish(valueNode);\n    return this.finishNode(node, \"ObjectTypeCallProperty\");\n  }\n\n  flowParseObjectType({\n    allowStatic,\n    allowExact,\n    allowSpread,\n    allowProto,\n    allowInexact\n  }) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    const nodeStart = this.startNode();\n    nodeStart.callProperties = [];\n    nodeStart.properties = [];\n    nodeStart.indexers = [];\n    nodeStart.internalSlots = [];\n    let endDelim;\n    let exact;\n    let inexact = false;\n\n    if (allowExact && this.match(types.braceBarL)) {\n      this.expect(types.braceBarL);\n      endDelim = types.braceBarR;\n      exact = true;\n    } else {\n      this.expect(types.braceL);\n      endDelim = types.braceR;\n      exact = false;\n    }\n\n    nodeStart.exact = exact;\n\n    while (!this.match(endDelim)) {\n      let isStatic = false;\n      let protoStart = null;\n      let inexactStart = null;\n      const node = this.startNode();\n\n      if (allowProto && this.isContextual(\"proto\")) {\n        const lookahead = this.lookahead();\n\n        if (lookahead.type !== types.colon && lookahead.type !== types.question) {\n          this.next();\n          protoStart = this.state.start;\n          allowStatic = false;\n        }\n      }\n\n      if (allowStatic && this.isContextual(\"static\")) {\n        const lookahead = this.lookahead();\n\n        if (lookahead.type !== types.colon && lookahead.type !== types.question) {\n          this.next();\n          isStatic = true;\n        }\n      }\n\n      const variance = this.flowParseVariance();\n\n      if (this.eat(types.bracketL)) {\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n\n        if (this.eat(types.bracketL)) {\n          if (variance) {\n            this.unexpected(variance.start);\n          }\n\n          nodeStart.internalSlots.push(this.flowParseObjectTypeInternalSlot(node, isStatic));\n        } else {\n          nodeStart.indexers.push(this.flowParseObjectTypeIndexer(node, isStatic, variance));\n        }\n      } else if (this.match(types.parenL) || this.isRelational(\"<\")) {\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n\n        if (variance) {\n          this.unexpected(variance.start);\n        }\n\n        nodeStart.callProperties.push(this.flowParseObjectTypeCallProperty(node, isStatic));\n      } else {\n        let kind = \"init\";\n\n        if (this.isContextual(\"get\") || this.isContextual(\"set\")) {\n          const lookahead = this.lookahead();\n\n          if (lookahead.type === types.name || lookahead.type === types.string || lookahead.type === types.num) {\n            kind = this.state.value;\n            this.next();\n          }\n        }\n\n        const propOrInexact = this.flowParseObjectTypeProperty(node, isStatic, protoStart, variance, kind, allowSpread, allowInexact != null ? allowInexact : !exact);\n\n        if (propOrInexact === null) {\n          inexact = true;\n          inexactStart = this.state.lastTokStart;\n        } else {\n          nodeStart.properties.push(propOrInexact);\n        }\n      }\n\n      this.flowObjectTypeSemicolon();\n\n      if (inexactStart && !this.match(types.braceR) && !this.match(types.braceBarR)) {\n        this.raise(inexactStart, FlowErrors.UnexpectedExplicitInexactInObject);\n      }\n    }\n\n    this.expect(endDelim);\n\n    if (allowSpread) {\n      nodeStart.inexact = inexact;\n    }\n\n    const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n    this.state.inType = oldInType;\n    return out;\n  }\n\n  flowParseObjectTypeProperty(node, isStatic, protoStart, variance, kind, allowSpread, allowInexact) {\n    if (this.eat(types.ellipsis)) {\n      const isInexactToken = this.match(types.comma) || this.match(types.semi) || this.match(types.braceR) || this.match(types.braceBarR);\n\n      if (isInexactToken) {\n        if (!allowSpread) {\n          this.raise(this.state.lastTokStart, FlowErrors.InexactInsideNonObject);\n        } else if (!allowInexact) {\n          this.raise(this.state.lastTokStart, FlowErrors.InexactInsideExact);\n        }\n\n        if (variance) {\n          this.raise(variance.start, FlowErrors.InexactVariance);\n        }\n\n        return null;\n      }\n\n      if (!allowSpread) {\n        this.raise(this.state.lastTokStart, FlowErrors.UnexpectedSpreadType);\n      }\n\n      if (protoStart != null) {\n        this.unexpected(protoStart);\n      }\n\n      if (variance) {\n        this.raise(variance.start, FlowErrors.SpreadVariance);\n      }\n\n      node.argument = this.flowParseType();\n      return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n    } else {\n      node.key = this.flowParseObjectPropertyKey();\n      node.static = isStatic;\n      node.proto = protoStart != null;\n      node.kind = kind;\n      let optional = false;\n\n      if (this.isRelational(\"<\") || this.match(types.parenL)) {\n        node.method = true;\n\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n\n        if (variance) {\n          this.unexpected(variance.start);\n        }\n\n        node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));\n\n        if (kind === \"get\" || kind === \"set\") {\n          this.flowCheckGetterSetterParams(node);\n        }\n      } else {\n        if (kind !== \"init\") this.unexpected();\n        node.method = false;\n\n        if (this.eat(types.question)) {\n          optional = true;\n        }\n\n        node.value = this.flowParseTypeInitialiser();\n        node.variance = variance;\n      }\n\n      node.optional = optional;\n      return this.finishNode(node, \"ObjectTypeProperty\");\n    }\n  }\n\n  flowCheckGetterSetterParams(property) {\n    const paramCount = property.kind === \"get\" ? 0 : 1;\n    const start = property.start;\n    const length = property.value.params.length + (property.value.rest ? 1 : 0);\n\n    if (length !== paramCount) {\n      if (property.kind === \"get\") {\n        this.raise(start, ErrorMessages.BadGetterArity);\n      } else {\n        this.raise(start, ErrorMessages.BadSetterArity);\n      }\n    }\n\n    if (property.kind === \"set\" && property.value.rest) {\n      this.raise(start, ErrorMessages.BadSetterRestParameter);\n    }\n  }\n\n  flowObjectTypeSemicolon() {\n    if (!this.eat(types.semi) && !this.eat(types.comma) && !this.match(types.braceR) && !this.match(types.braceBarR)) {\n      this.unexpected();\n    }\n  }\n\n  flowParseQualifiedTypeIdentifier(startPos, startLoc, id) {\n    startPos = startPos || this.state.start;\n    startLoc = startLoc || this.state.startLoc;\n    let node = id || this.flowParseRestrictedIdentifier(true);\n\n    while (this.eat(types.dot)) {\n      const node2 = this.startNodeAt(startPos, startLoc);\n      node2.qualification = node;\n      node2.id = this.flowParseRestrictedIdentifier(true);\n      node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n    }\n\n    return node;\n  }\n\n  flowParseGenericType(startPos, startLoc, id) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.typeParameters = null;\n    node.id = this.flowParseQualifiedTypeIdentifier(startPos, startLoc, id);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterInstantiation();\n    }\n\n    return this.finishNode(node, \"GenericTypeAnnotation\");\n  }\n\n  flowParseTypeofType() {\n    const node = this.startNode();\n    this.expect(types._typeof);\n    node.argument = this.flowParsePrimaryType();\n    return this.finishNode(node, \"TypeofTypeAnnotation\");\n  }\n\n  flowParseTupleType() {\n    const node = this.startNode();\n    node.types = [];\n    this.expect(types.bracketL);\n\n    while (this.state.pos < this.length && !this.match(types.bracketR)) {\n      node.types.push(this.flowParseType());\n      if (this.match(types.bracketR)) break;\n      this.expect(types.comma);\n    }\n\n    this.expect(types.bracketR);\n    return this.finishNode(node, \"TupleTypeAnnotation\");\n  }\n\n  flowParseFunctionTypeParam() {\n    let name = null;\n    let optional = false;\n    let typeAnnotation = null;\n    const node = this.startNode();\n    const lh = this.lookahead();\n\n    if (lh.type === types.colon || lh.type === types.question) {\n      name = this.parseIdentifier();\n\n      if (this.eat(types.question)) {\n        optional = true;\n      }\n\n      typeAnnotation = this.flowParseTypeInitialiser();\n    } else {\n      typeAnnotation = this.flowParseType();\n    }\n\n    node.name = name;\n    node.optional = optional;\n    node.typeAnnotation = typeAnnotation;\n    return this.finishNode(node, \"FunctionTypeParam\");\n  }\n\n  reinterpretTypeAsFunctionTypeParam(type) {\n    const node = this.startNodeAt(type.start, type.loc.start);\n    node.name = null;\n    node.optional = false;\n    node.typeAnnotation = type;\n    return this.finishNode(node, \"FunctionTypeParam\");\n  }\n\n  flowParseFunctionTypeParams(params = []) {\n    let rest = null;\n\n    while (!this.match(types.parenR) && !this.match(types.ellipsis)) {\n      params.push(this.flowParseFunctionTypeParam());\n\n      if (!this.match(types.parenR)) {\n        this.expect(types.comma);\n      }\n    }\n\n    if (this.eat(types.ellipsis)) {\n      rest = this.flowParseFunctionTypeParam();\n    }\n\n    return {\n      params,\n      rest\n    };\n  }\n\n  flowIdentToTypeAnnotation(startPos, startLoc, node, id) {\n    switch (id.name) {\n      case \"any\":\n        return this.finishNode(node, \"AnyTypeAnnotation\");\n\n      case \"bool\":\n      case \"boolean\":\n        return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n      case \"mixed\":\n        return this.finishNode(node, \"MixedTypeAnnotation\");\n\n      case \"empty\":\n        return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n      case \"number\":\n        return this.finishNode(node, \"NumberTypeAnnotation\");\n\n      case \"string\":\n        return this.finishNode(node, \"StringTypeAnnotation\");\n\n      case \"symbol\":\n        return this.finishNode(node, \"SymbolTypeAnnotation\");\n\n      default:\n        this.checkNotUnderscore(id.name);\n        return this.flowParseGenericType(startPos, startLoc, id);\n    }\n  }\n\n  flowParsePrimaryType() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const node = this.startNode();\n    let tmp;\n    let type;\n    let isGroupedType = false;\n    const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n    switch (this.state.type) {\n      case types.name:\n        if (this.isContextual(\"interface\")) {\n          return this.flowParseInterfaceType();\n        }\n\n        return this.flowIdentToTypeAnnotation(startPos, startLoc, node, this.parseIdentifier());\n\n      case types.braceL:\n        return this.flowParseObjectType({\n          allowStatic: false,\n          allowExact: false,\n          allowSpread: true,\n          allowProto: false,\n          allowInexact: true\n        });\n\n      case types.braceBarL:\n        return this.flowParseObjectType({\n          allowStatic: false,\n          allowExact: true,\n          allowSpread: true,\n          allowProto: false,\n          allowInexact: false\n        });\n\n      case types.bracketL:\n        this.state.noAnonFunctionType = false;\n        type = this.flowParseTupleType();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n        return type;\n\n      case types.relational:\n        if (this.state.value === \"<\") {\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n          this.expect(types.parenL);\n          tmp = this.flowParseFunctionTypeParams();\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          this.expect(types.parenR);\n          this.expect(types.arrow);\n          node.returnType = this.flowParseType();\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n        }\n\n        break;\n\n      case types.parenL:\n        this.next();\n\n        if (!this.match(types.parenR) && !this.match(types.ellipsis)) {\n          if (this.match(types.name)) {\n            const token = this.lookahead().type;\n            isGroupedType = token !== types.question && token !== types.colon;\n          } else {\n            isGroupedType = true;\n          }\n        }\n\n        if (isGroupedType) {\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n          if (this.state.noAnonFunctionType || !(this.match(types.comma) || this.match(types.parenR) && this.lookahead().type === types.arrow)) {\n            this.expect(types.parenR);\n            return type;\n          } else {\n            this.eat(types.comma);\n          }\n        }\n\n        if (type) {\n          tmp = this.flowParseFunctionTypeParams([this.reinterpretTypeAsFunctionTypeParam(type)]);\n        } else {\n          tmp = this.flowParseFunctionTypeParams();\n        }\n\n        node.params = tmp.params;\n        node.rest = tmp.rest;\n        this.expect(types.parenR);\n        this.expect(types.arrow);\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n      case types.string:\n        return this.parseLiteral(this.state.value, \"StringLiteralTypeAnnotation\");\n\n      case types._true:\n      case types._false:\n        node.value = this.match(types._true);\n        this.next();\n        return this.finishNode(node, \"BooleanLiteralTypeAnnotation\");\n\n      case types.plusMin:\n        if (this.state.value === \"-\") {\n          this.next();\n\n          if (this.match(types.num)) {\n            return this.parseLiteral(-this.state.value, \"NumberLiteralTypeAnnotation\", node.start, node.loc.start);\n          }\n\n          if (this.match(types.bigint)) {\n            return this.parseLiteral(-this.state.value, \"BigIntLiteralTypeAnnotation\", node.start, node.loc.start);\n          }\n\n          throw this.raise(this.state.start, FlowErrors.UnexpectedSubtractionOperand);\n        }\n\n        throw this.unexpected();\n\n      case types.num:\n        return this.parseLiteral(this.state.value, \"NumberLiteralTypeAnnotation\");\n\n      case types.bigint:\n        return this.parseLiteral(this.state.value, \"BigIntLiteralTypeAnnotation\");\n\n      case types._void:\n        this.next();\n        return this.finishNode(node, \"VoidTypeAnnotation\");\n\n      case types._null:\n        this.next();\n        return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n      case types._this:\n        this.next();\n        return this.finishNode(node, \"ThisTypeAnnotation\");\n\n      case types.star:\n        this.next();\n        return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n      default:\n        if (this.state.type.keyword === \"typeof\") {\n          return this.flowParseTypeofType();\n        } else if (this.state.type.keyword) {\n          const label = this.state.type.label;\n          this.next();\n          return super.createIdentifier(node, label);\n        }\n\n    }\n\n    throw this.unexpected();\n  }\n\n  flowParsePostfixType() {\n    const startPos = this.state.start,\n          startLoc = this.state.startLoc;\n    let type = this.flowParsePrimaryType();\n\n    while (this.match(types.bracketL) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.elementType = type;\n      this.expect(types.bracketL);\n      this.expect(types.bracketR);\n      type = this.finishNode(node, \"ArrayTypeAnnotation\");\n    }\n\n    return type;\n  }\n\n  flowParsePrefixType() {\n    const node = this.startNode();\n\n    if (this.eat(types.question)) {\n      node.typeAnnotation = this.flowParsePrefixType();\n      return this.finishNode(node, \"NullableTypeAnnotation\");\n    } else {\n      return this.flowParsePostfixType();\n    }\n  }\n\n  flowParseAnonFunctionWithoutParens() {\n    const param = this.flowParsePrefixType();\n\n    if (!this.state.noAnonFunctionType && this.eat(types.arrow)) {\n      const node = this.startNodeAt(param.start, param.loc.start);\n      node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n      node.rest = null;\n      node.returnType = this.flowParseType();\n      node.typeParameters = null;\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n\n    return param;\n  }\n\n  flowParseIntersectionType() {\n    const node = this.startNode();\n    this.eat(types.bitwiseAND);\n    const type = this.flowParseAnonFunctionWithoutParens();\n    node.types = [type];\n\n    while (this.eat(types.bitwiseAND)) {\n      node.types.push(this.flowParseAnonFunctionWithoutParens());\n    }\n\n    return node.types.length === 1 ? type : this.finishNode(node, \"IntersectionTypeAnnotation\");\n  }\n\n  flowParseUnionType() {\n    const node = this.startNode();\n    this.eat(types.bitwiseOR);\n    const type = this.flowParseIntersectionType();\n    node.types = [type];\n\n    while (this.eat(types.bitwiseOR)) {\n      node.types.push(this.flowParseIntersectionType());\n    }\n\n    return node.types.length === 1 ? type : this.finishNode(node, \"UnionTypeAnnotation\");\n  }\n\n  flowParseType() {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    const type = this.flowParseUnionType();\n    this.state.inType = oldInType;\n    this.state.exprAllowed = this.state.exprAllowed || this.state.noAnonFunctionType;\n    return type;\n  }\n\n  flowParseTypeOrImplicitInstantiation() {\n    if (this.state.type === types.name && this.state.value === \"_\") {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const node = this.parseIdentifier();\n      return this.flowParseGenericType(startPos, startLoc, node);\n    } else {\n      return this.flowParseType();\n    }\n  }\n\n  flowParseTypeAnnotation() {\n    const node = this.startNode();\n    node.typeAnnotation = this.flowParseTypeInitialiser();\n    return this.finishNode(node, \"TypeAnnotation\");\n  }\n\n  flowParseTypeAnnotatableIdentifier(allowPrimitiveOverride) {\n    const ident = allowPrimitiveOverride ? this.parseIdentifier() : this.flowParseRestrictedIdentifier();\n\n    if (this.match(types.colon)) {\n      ident.typeAnnotation = this.flowParseTypeAnnotation();\n      this.resetEndLocation(ident);\n    }\n\n    return ident;\n  }\n\n  typeCastToParameter(node) {\n    node.expression.typeAnnotation = node.typeAnnotation;\n    this.resetEndLocation(node.expression, node.typeAnnotation.end, node.typeAnnotation.loc.end);\n    return node.expression;\n  }\n\n  flowParseVariance() {\n    let variance = null;\n\n    if (this.match(types.plusMin)) {\n      variance = this.startNode();\n\n      if (this.state.value === \"+\") {\n        variance.kind = \"plus\";\n      } else {\n        variance.kind = \"minus\";\n      }\n\n      this.next();\n      this.finishNode(variance, \"Variance\");\n    }\n\n    return variance;\n  }\n\n  parseFunctionBody(node, allowExpressionBody, isMethod = false) {\n    if (allowExpressionBody) {\n      return this.forwardNoArrowParamsConversionAt(node, () => super.parseFunctionBody(node, true, isMethod));\n    }\n\n    return super.parseFunctionBody(node, false, isMethod);\n  }\n\n  parseFunctionBodyAndFinish(node, type, isMethod = false) {\n    if (this.match(types.colon)) {\n      const typeNode = this.startNode();\n      [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n      node.returnType = typeNode.typeAnnotation ? this.finishNode(typeNode, \"TypeAnnotation\") : null;\n    }\n\n    super.parseFunctionBodyAndFinish(node, type, isMethod);\n  }\n\n  parseStatement(context, topLevel) {\n    if (this.state.strict && this.match(types.name) && this.state.value === \"interface\") {\n      const node = this.startNode();\n      this.next();\n      return this.flowParseInterface(node);\n    } else if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n      const node = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(node);\n    } else {\n      const stmt = super.parseStatement(context, topLevel);\n\n      if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n        this.flowPragma = null;\n      }\n\n      return stmt;\n    }\n  }\n\n  parseExpressionStatement(node, expr) {\n    if (expr.type === \"Identifier\") {\n      if (expr.name === \"declare\") {\n        if (this.match(types._class) || this.match(types.name) || this.match(types._function) || this.match(types._var) || this.match(types._export)) {\n          return this.flowParseDeclare(node);\n        }\n      } else if (this.match(types.name)) {\n        if (expr.name === \"interface\") {\n          return this.flowParseInterface(node);\n        } else if (expr.name === \"type\") {\n          return this.flowParseTypeAlias(node);\n        } else if (expr.name === \"opaque\") {\n          return this.flowParseOpaqueType(node, false);\n        }\n      }\n    }\n\n    return super.parseExpressionStatement(node, expr);\n  }\n\n  shouldParseExportDeclaration() {\n    return this.isContextual(\"type\") || this.isContextual(\"interface\") || this.isContextual(\"opaque\") || this.shouldParseEnums() && this.isContextual(\"enum\") || super.shouldParseExportDeclaration();\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.match(types.name) && (this.state.value === \"type\" || this.state.value === \"interface\" || this.state.value === \"opaque\" || this.shouldParseEnums() && this.state.value === \"enum\")) {\n      return false;\n    }\n\n    return super.isExportDefaultSpecifier();\n  }\n\n  parseExportDefaultExpression() {\n    if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n      const node = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(node);\n    }\n\n    return super.parseExportDefaultExpression();\n  }\n\n  parseConditional(expr, startPos, startLoc, refNeedsArrowPos) {\n    if (!this.match(types.question)) return expr;\n\n    if (refNeedsArrowPos) {\n      const result = this.tryParse(() => super.parseConditional(expr, startPos, startLoc));\n\n      if (!result.node) {\n        refNeedsArrowPos.start = result.error.pos || this.state.start;\n        return expr;\n      }\n\n      if (result.error) this.state = result.failState;\n      return result.node;\n    }\n\n    this.expect(types.question);\n    const state = this.state.clone();\n    const originalNoArrowAt = this.state.noArrowAt;\n    const node = this.startNodeAt(startPos, startLoc);\n    let {\n      consequent,\n      failed\n    } = this.tryParseConditionalConsequent();\n    let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n\n    if (failed || invalid.length > 0) {\n      const noArrowAt = [...originalNoArrowAt];\n\n      if (invalid.length > 0) {\n        this.state = state;\n        this.state.noArrowAt = noArrowAt;\n\n        for (let i = 0; i < invalid.length; i++) {\n          noArrowAt.push(invalid[i].start);\n        }\n\n        ({\n          consequent,\n          failed\n        } = this.tryParseConditionalConsequent());\n        [valid, invalid] = this.getArrowLikeExpressions(consequent);\n      }\n\n      if (failed && valid.length > 1) {\n        this.raise(state.start, FlowErrors.AmbiguousConditionalArrow);\n      }\n\n      if (failed && valid.length === 1) {\n        this.state = state;\n        this.state.noArrowAt = noArrowAt.concat(valid[0].start);\n        ({\n          consequent,\n          failed\n        } = this.tryParseConditionalConsequent());\n      }\n    }\n\n    this.getArrowLikeExpressions(consequent, true);\n    this.state.noArrowAt = originalNoArrowAt;\n    this.expect(types.colon);\n    node.test = expr;\n    node.consequent = consequent;\n    node.alternate = this.forwardNoArrowParamsConversionAt(node, () => this.parseMaybeAssign(undefined, undefined, undefined));\n    return this.finishNode(node, \"ConditionalExpression\");\n  }\n\n  tryParseConditionalConsequent() {\n    this.state.noArrowParamsConversionAt.push(this.state.start);\n    const consequent = this.parseMaybeAssignAllowIn();\n    const failed = !this.match(types.colon);\n    this.state.noArrowParamsConversionAt.pop();\n    return {\n      consequent,\n      failed\n    };\n  }\n\n  getArrowLikeExpressions(node, disallowInvalid) {\n    const stack = [node];\n    const arrows = [];\n\n    while (stack.length !== 0) {\n      const node = stack.pop();\n\n      if (node.type === \"ArrowFunctionExpression\") {\n        if (node.typeParameters || !node.returnType) {\n          this.finishArrowValidation(node);\n        } else {\n          arrows.push(node);\n        }\n\n        stack.push(node.body);\n      } else if (node.type === \"ConditionalExpression\") {\n        stack.push(node.consequent);\n        stack.push(node.alternate);\n      }\n    }\n\n    if (disallowInvalid) {\n      arrows.forEach(node => this.finishArrowValidation(node));\n      return [arrows, []];\n    }\n\n    return partition(arrows, node => node.params.every(param => this.isAssignable(param, true)));\n  }\n\n  finishArrowValidation(node) {\n    var _node$extra;\n\n    this.toAssignableList(node.params, (_node$extra = node.extra) == null ? void 0 : _node$extra.trailingComma);\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    super.checkParams(node, false, true);\n    this.scope.exit();\n  }\n\n  forwardNoArrowParamsConversionAt(node, parse) {\n    let result;\n\n    if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n      result = parse();\n      this.state.noArrowParamsConversionAt.pop();\n    } else {\n      result = parse();\n    }\n\n    return result;\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    node = super.parseParenItem(node, startPos, startLoc);\n\n    if (this.eat(types.question)) {\n      node.optional = true;\n      this.resetEndLocation(node);\n    }\n\n    if (this.match(types.colon)) {\n      const typeCastNode = this.startNodeAt(startPos, startLoc);\n      typeCastNode.expression = node;\n      typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n      return this.finishNode(typeCastNode, \"TypeCastExpression\");\n    }\n\n    return node;\n  }\n\n  assertModuleNodeAllowed(node) {\n    if (node.type === \"ImportDeclaration\" && (node.importKind === \"type\" || node.importKind === \"typeof\") || node.type === \"ExportNamedDeclaration\" && node.exportKind === \"type\" || node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\") {\n      return;\n    }\n\n    super.assertModuleNodeAllowed(node);\n  }\n\n  parseExport(node) {\n    const decl = super.parseExport(node);\n\n    if (decl.type === \"ExportNamedDeclaration\" || decl.type === \"ExportAllDeclaration\") {\n      decl.exportKind = decl.exportKind || \"value\";\n    }\n\n    return decl;\n  }\n\n  parseExportDeclaration(node) {\n    if (this.isContextual(\"type\")) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n\n      if (this.match(types.braceL)) {\n        node.specifiers = this.parseExportSpecifiers();\n        this.parseExportFrom(node);\n        return null;\n      } else {\n        return this.flowParseTypeAlias(declarationNode);\n      }\n    } else if (this.isContextual(\"opaque\")) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseOpaqueType(declarationNode, false);\n    } else if (this.isContextual(\"interface\")) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseInterface(declarationNode);\n    } else if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n      node.exportKind = \"value\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(declarationNode);\n    } else {\n      return super.parseExportDeclaration(node);\n    }\n  }\n\n  eatExportStar(node) {\n    if (super.eatExportStar(...arguments)) return true;\n\n    if (this.isContextual(\"type\") && this.lookahead().type === types.star) {\n      node.exportKind = \"type\";\n      this.next();\n      this.next();\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node) {\n    const pos = this.state.start;\n    const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n\n    if (hasNamespace && node.exportKind === \"type\") {\n      this.unexpected(pos);\n    }\n\n    return hasNamespace;\n  }\n\n  parseClassId(node, isStatement, optionalId) {\n    super.parseClassId(node, isStatement, optionalId);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n  }\n\n  parseClassMember(classBody, member, state, constructorAllowsSuper) {\n    const pos = this.state.start;\n\n    if (this.isContextual(\"declare\")) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        return;\n      }\n\n      member.declare = true;\n    }\n\n    super.parseClassMember(classBody, member, state, constructorAllowsSuper);\n\n    if (member.declare) {\n      if (member.type !== \"ClassProperty\" && member.type !== \"ClassPrivateProperty\") {\n        this.raise(pos, FlowErrors.DeclareClassElement);\n      } else if (member.value) {\n        this.raise(member.value.start, FlowErrors.DeclareClassFieldInitializer);\n      }\n    }\n  }\n\n  getTokenFromCode(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 123 && next === 124) {\n      return this.finishOp(types.braceBarL, 2);\n    } else if (this.state.inType && (code === 62 || code === 60)) {\n      return this.finishOp(types.relational, 1);\n    } else if (this.state.inType && code === 63) {\n      return this.finishOp(types.question, 1);\n    } else if (isIteratorStart(code, next)) {\n      this.state.isIterator = true;\n      return super.readWord();\n    } else {\n      return super.getTokenFromCode(code);\n    }\n  }\n\n  isAssignable(node, isBinding) {\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n        return true;\n\n      case \"ObjectExpression\":\n        {\n          const last = node.properties.length - 1;\n          return node.properties.every((prop, i) => {\n            return prop.type !== \"ObjectMethod\" && (i === last || prop.type === \"SpreadElement\") && this.isAssignable(prop);\n          });\n        }\n\n      case \"ObjectProperty\":\n        return this.isAssignable(node.value);\n\n      case \"SpreadElement\":\n        return this.isAssignable(node.argument);\n\n      case \"ArrayExpression\":\n        return node.elements.every(element => this.isAssignable(element));\n\n      case \"AssignmentExpression\":\n        return node.operator === \"=\";\n\n      case \"ParenthesizedExpression\":\n      case \"TypeCastExpression\":\n        return this.isAssignable(node.expression);\n\n      case \"MemberExpression\":\n      case \"OptionalMemberExpression\":\n        return !isBinding;\n\n      default:\n        return false;\n    }\n  }\n\n  toAssignable(node) {\n    if (node.type === \"TypeCastExpression\") {\n      return super.toAssignable(this.typeCastToParameter(node));\n    } else {\n      return super.toAssignable(node);\n    }\n  }\n\n  toAssignableList(exprList, trailingCommaPos) {\n    for (let i = 0; i < exprList.length; i++) {\n      const expr = exprList[i];\n\n      if ((expr == null ? void 0 : expr.type) === \"TypeCastExpression\") {\n        exprList[i] = this.typeCastToParameter(expr);\n      }\n    }\n\n    return super.toAssignableList(exprList, trailingCommaPos);\n  }\n\n  toReferencedList(exprList, isParenthesizedExpr) {\n    for (let i = 0; i < exprList.length; i++) {\n      var _expr$extra;\n\n      const expr = exprList[i];\n\n      if (expr && expr.type === \"TypeCastExpression\" && !((_expr$extra = expr.extra) == null ? void 0 : _expr$extra.parenthesized) && (exprList.length > 1 || !isParenthesizedExpr)) {\n        this.raise(expr.typeAnnotation.start, FlowErrors.TypeCastInPattern);\n      }\n    }\n\n    return exprList;\n  }\n\n  checkLVal(expr, bindingType = BIND_NONE, checkClashes, contextDescription) {\n    if (expr.type !== \"TypeCastExpression\") {\n      return super.checkLVal(expr, bindingType, checkClashes, contextDescription);\n    }\n  }\n\n  parseClassProperty(node) {\n    if (this.match(types.colon)) {\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n    }\n\n    return super.parseClassProperty(node);\n  }\n\n  parseClassPrivateProperty(node) {\n    if (this.match(types.colon)) {\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n    }\n\n    return super.parseClassPrivateProperty(node);\n  }\n\n  isClassMethod() {\n    return this.isRelational(\"<\") || super.isClassMethod();\n  }\n\n  isClassProperty() {\n    return this.match(types.colon) || super.isClassProperty();\n  }\n\n  isNonstaticConstructor(method) {\n    return !this.match(types.colon) && super.isNonstaticConstructor(method);\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    if (method.variance) {\n      this.unexpected(method.variance.start);\n    }\n\n    delete method.variance;\n\n    if (this.isRelational(\"<\")) {\n      method.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    if (method.variance) {\n      this.unexpected(method.variance.start);\n    }\n\n    delete method.variance;\n\n    if (this.isRelational(\"<\")) {\n      method.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n  }\n\n  parseClassSuper(node) {\n    super.parseClassSuper(node);\n\n    if (node.superClass && this.isRelational(\"<\")) {\n      node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n    }\n\n    if (this.isContextual(\"implements\")) {\n      this.next();\n      const implemented = node.implements = [];\n\n      do {\n        const node = this.startNode();\n        node.id = this.flowParseRestrictedIdentifier(true);\n\n        if (this.isRelational(\"<\")) {\n          node.typeParameters = this.flowParseTypeParameterInstantiation();\n        } else {\n          node.typeParameters = null;\n        }\n\n        implemented.push(this.finishNode(node, \"ClassImplements\"));\n      } while (this.eat(types.comma));\n    }\n  }\n\n  parsePropertyName(node, isPrivateNameAllowed) {\n    const variance = this.flowParseVariance();\n    const key = super.parsePropertyName(node, isPrivateNameAllowed);\n    node.variance = variance;\n    return key;\n  }\n\n  parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {\n    if (prop.variance) {\n      this.unexpected(prop.variance.start);\n    }\n\n    delete prop.variance;\n    let typeParameters;\n\n    if (this.isRelational(\"<\") && !isAccessor) {\n      typeParameters = this.flowParseTypeParameterDeclaration();\n      if (!this.match(types.parenL)) this.unexpected();\n    }\n\n    super.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);\n\n    if (typeParameters) {\n      (prop.value || prop).typeParameters = typeParameters;\n    }\n  }\n\n  parseAssignableListItemTypes(param) {\n    if (this.eat(types.question)) {\n      if (param.type !== \"Identifier\") {\n        this.raise(param.start, FlowErrors.OptionalBindingPattern);\n      }\n\n      param.optional = true;\n    }\n\n    if (this.match(types.colon)) {\n      param.typeAnnotation = this.flowParseTypeAnnotation();\n    }\n\n    this.resetEndLocation(param);\n    return param;\n  }\n\n  parseMaybeDefault(startPos, startLoc, left) {\n    const node = super.parseMaybeDefault(startPos, startLoc, left);\n\n    if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n      this.raise(node.typeAnnotation.start, FlowErrors.TypeBeforeInitializer);\n    }\n\n    return node;\n  }\n\n  shouldParseDefaultImport(node) {\n    if (!hasTypeImportKind(node)) {\n      return super.shouldParseDefaultImport(node);\n    }\n\n    return isMaybeDefaultImport(this.state);\n  }\n\n  parseImportSpecifierLocal(node, specifier, type, contextDescription) {\n    specifier.local = hasTypeImportKind(node) ? this.flowParseRestrictedIdentifier(true, true) : this.parseIdentifier();\n    this.checkLVal(specifier.local, BIND_LEXICAL, undefined, contextDescription);\n    node.specifiers.push(this.finishNode(specifier, type));\n  }\n\n  maybeParseDefaultImportSpecifier(node) {\n    node.importKind = \"value\";\n    let kind = null;\n\n    if (this.match(types._typeof)) {\n      kind = \"typeof\";\n    } else if (this.isContextual(\"type\")) {\n      kind = \"type\";\n    }\n\n    if (kind) {\n      const lh = this.lookahead();\n\n      if (kind === \"type\" && lh.type === types.star) {\n        this.unexpected(lh.start);\n      }\n\n      if (isMaybeDefaultImport(lh) || lh.type === types.braceL || lh.type === types.star) {\n        this.next();\n        node.importKind = kind;\n      }\n    }\n\n    return super.maybeParseDefaultImportSpecifier(node);\n  }\n\n  parseImportSpecifier(node) {\n    const specifier = this.startNode();\n    const firstIdentLoc = this.state.start;\n    const firstIdent = this.parseIdentifier(true);\n    let specifierTypeKind = null;\n\n    if (firstIdent.name === \"type\") {\n      specifierTypeKind = \"type\";\n    } else if (firstIdent.name === \"typeof\") {\n      specifierTypeKind = \"typeof\";\n    }\n\n    let isBinding = false;\n\n    if (this.isContextual(\"as\") && !this.isLookaheadContextual(\"as\")) {\n      const as_ident = this.parseIdentifier(true);\n\n      if (specifierTypeKind !== null && !this.match(types.name) && !this.state.type.keyword) {\n        specifier.imported = as_ident;\n        specifier.importKind = specifierTypeKind;\n        specifier.local = as_ident.__clone();\n      } else {\n        specifier.imported = firstIdent;\n        specifier.importKind = null;\n        specifier.local = this.parseIdentifier();\n      }\n    } else if (specifierTypeKind !== null && (this.match(types.name) || this.state.type.keyword)) {\n      specifier.imported = this.parseIdentifier(true);\n      specifier.importKind = specifierTypeKind;\n\n      if (this.eatContextual(\"as\")) {\n        specifier.local = this.parseIdentifier();\n      } else {\n        isBinding = true;\n        specifier.local = specifier.imported.__clone();\n      }\n    } else {\n      isBinding = true;\n      specifier.imported = firstIdent;\n      specifier.importKind = null;\n      specifier.local = specifier.imported.__clone();\n    }\n\n    const nodeIsTypeImport = hasTypeImportKind(node);\n    const specifierIsTypeImport = hasTypeImportKind(specifier);\n\n    if (nodeIsTypeImport && specifierIsTypeImport) {\n      this.raise(firstIdentLoc, FlowErrors.ImportTypeShorthandOnlyInPureImport);\n    }\n\n    if (nodeIsTypeImport || specifierIsTypeImport) {\n      this.checkReservedType(specifier.local.name, specifier.local.start, true);\n    }\n\n    if (isBinding && !nodeIsTypeImport && !specifierIsTypeImport) {\n      this.checkReservedWord(specifier.local.name, specifier.start, true, true);\n    }\n\n    this.checkLVal(specifier.local, BIND_LEXICAL, undefined, \"import specifier\");\n    node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    const kind = node.kind;\n\n    if (kind !== \"get\" && kind !== \"set\" && this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    super.parseFunctionParams(node, allowModifiers);\n  }\n\n  parseVarId(decl, kind) {\n    super.parseVarId(decl, kind);\n\n    if (this.match(types.colon)) {\n      decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n      this.resetEndLocation(decl.id);\n    }\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    if (this.match(types.colon)) {\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n      this.state.noAnonFunctionType = true;\n      node.returnType = this.flowParseTypeAnnotation();\n      this.state.noAnonFunctionType = oldNoAnonFunctionType;\n    }\n\n    return super.parseAsyncArrowFromCallExpression(node, call);\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(types.colon) || super.shouldParseAsyncArrow();\n  }\n\n  parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos) {\n    var _jsx;\n\n    let state = null;\n    let jsx;\n\n    if (this.hasPlugin(\"jsx\") && (this.match(types.jsxTagStart) || this.isRelational(\"<\"))) {\n      state = this.state.clone();\n      jsx = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos), state);\n      if (!jsx.error) return jsx.node;\n      const {\n        context\n      } = this.state;\n\n      if (context[context.length - 1] === types$1.j_oTag) {\n        context.length -= 2;\n      } else if (context[context.length - 1] === types$1.j_expr) {\n        context.length -= 1;\n      }\n    }\n\n    if (((_jsx = jsx) == null ? void 0 : _jsx.error) || this.isRelational(\"<\")) {\n      var _jsx2, _jsx3;\n\n      state = state || this.state.clone();\n      let typeParameters;\n      const arrow = this.tryParse(abort => {\n        var _arrowExpression$extr;\n\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        const arrowExpression = this.forwardNoArrowParamsConversionAt(typeParameters, () => {\n          const result = super.parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos);\n          this.resetStartLocationFromNode(result, typeParameters);\n          return result;\n        });\n\n        if (arrowExpression.type !== \"ArrowFunctionExpression\" && ((_arrowExpression$extr = arrowExpression.extra) == null ? void 0 : _arrowExpression$extr.parenthesized)) {\n          abort();\n        }\n\n        const expr = this.maybeUnwrapTypeCastExpression(arrowExpression);\n        expr.typeParameters = typeParameters;\n        this.resetStartLocationFromNode(expr, typeParameters);\n        return arrowExpression;\n      }, state);\n      let arrowExpression = null;\n\n      if (arrow.node && this.maybeUnwrapTypeCastExpression(arrow.node).type === \"ArrowFunctionExpression\") {\n        if (!arrow.error && !arrow.aborted) {\n          if (arrow.node.async) {\n            this.raise(typeParameters.start, FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction);\n          }\n\n          return arrow.node;\n        }\n\n        arrowExpression = arrow.node;\n      }\n\n      if ((_jsx2 = jsx) == null ? void 0 : _jsx2.node) {\n        this.state = jsx.failState;\n        return jsx.node;\n      }\n\n      if (arrowExpression) {\n        this.state = arrow.failState;\n        return arrowExpression;\n      }\n\n      if ((_jsx3 = jsx) == null ? void 0 : _jsx3.thrown) throw jsx.error;\n      if (arrow.thrown) throw arrow.error;\n      throw this.raise(typeParameters.start, FlowErrors.UnexpectedTokenAfterTypeParameter);\n    }\n\n    return super.parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos);\n  }\n\n  parseArrow(node) {\n    if (this.match(types.colon)) {\n      const result = this.tryParse(() => {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        const typeNode = this.startNode();\n        [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n        if (this.canInsertSemicolon()) this.unexpected();\n        if (!this.match(types.arrow)) this.unexpected();\n        return typeNode;\n      });\n      if (result.thrown) return null;\n      if (result.error) this.state = result.failState;\n      node.returnType = result.node.typeAnnotation ? this.finishNode(result.node, \"TypeAnnotation\") : null;\n    }\n\n    return super.parseArrow(node);\n  }\n\n  shouldParseArrow() {\n    return this.match(types.colon) || super.shouldParseArrow();\n  }\n\n  setArrowFunctionParameters(node, params) {\n    if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      node.params = params;\n    } else {\n      super.setArrowFunctionParameters(node, params);\n    }\n  }\n\n  checkParams(node, allowDuplicates, isArrowFunction) {\n    if (isArrowFunction && this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      return;\n    }\n\n    return super.checkParams(...arguments);\n  }\n\n  parseParenAndDistinguishExpression(canBeArrow) {\n    return super.parseParenAndDistinguishExpression(canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1);\n  }\n\n  parseSubscripts(base, startPos, startLoc, noCalls) {\n    if (base.type === \"Identifier\" && base.name === \"async\" && this.state.noArrowAt.indexOf(startPos) !== -1) {\n      this.next();\n      const node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n      base = this.finishNode(node, \"CallExpression\");\n    } else if (base.type === \"Identifier\" && base.name === \"async\" && this.isRelational(\"<\")) {\n      const state = this.state.clone();\n      const arrow = this.tryParse(abort => this.parseAsyncArrowWithTypeParameters(startPos, startLoc) || abort(), state);\n      if (!arrow.error && !arrow.aborted) return arrow.node;\n      const result = this.tryParse(() => super.parseSubscripts(base, startPos, startLoc, noCalls), state);\n      if (result.node && !result.error) return result.node;\n\n      if (arrow.node) {\n        this.state = arrow.failState;\n        return arrow.node;\n      }\n\n      if (result.node) {\n        this.state = result.failState;\n        return result.node;\n      }\n\n      throw arrow.error || result.error;\n    }\n\n    return super.parseSubscripts(base, startPos, startLoc, noCalls);\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, subscriptState) {\n    if (this.match(types.questionDot) && this.isLookaheadToken_lt()) {\n      subscriptState.optionalChainMember = true;\n\n      if (noCalls) {\n        subscriptState.stop = true;\n        return base;\n      }\n\n      this.next();\n      const node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      node.typeArguments = this.flowParseTypeParameterInstantiation();\n      this.expect(types.parenL);\n      node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n      node.optional = true;\n      return this.finishCallExpression(node, true);\n    } else if (!noCalls && this.shouldParseTypes() && this.isRelational(\"<\")) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      const result = this.tryParse(() => {\n        node.typeArguments = this.flowParseTypeParameterInstantiationCallOrNew();\n        this.expect(types.parenL);\n        node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n        if (subscriptState.optionalChainMember) node.optional = false;\n        return this.finishCallExpression(node, subscriptState.optionalChainMember);\n      });\n\n      if (result.node) {\n        if (result.error) this.state = result.failState;\n        return result.node;\n      }\n    }\n\n    return super.parseSubscript(base, startPos, startLoc, noCalls, subscriptState);\n  }\n\n  parseNewArguments(node) {\n    let targs = null;\n\n    if (this.shouldParseTypes() && this.isRelational(\"<\")) {\n      targs = this.tryParse(() => this.flowParseTypeParameterInstantiationCallOrNew()).node;\n    }\n\n    node.typeArguments = targs;\n    super.parseNewArguments(node);\n  }\n\n  parseAsyncArrowWithTypeParameters(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n    this.parseFunctionParams(node);\n    if (!this.parseArrow(node)) return;\n    return this.parseArrowExpression(node, undefined, true);\n  }\n\n  readToken_mult_modulo(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 42 && next === 47 && this.state.hasFlowComment) {\n      this.state.hasFlowComment = false;\n      this.state.pos += 2;\n      this.nextToken();\n      return;\n    }\n\n    super.readToken_mult_modulo(code);\n  }\n\n  readToken_pipe_amp(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 124 && next === 125) {\n      this.finishOp(types.braceBarR, 2);\n      return;\n    }\n\n    super.readToken_pipe_amp(code);\n  }\n\n  parseTopLevel(file, program) {\n    const fileNode = super.parseTopLevel(file, program);\n\n    if (this.state.hasFlowComment) {\n      this.raise(this.state.pos, FlowErrors.UnterminatedFlowComment);\n    }\n\n    return fileNode;\n  }\n\n  skipBlockComment() {\n    if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n      if (this.state.hasFlowComment) {\n        this.unexpected(null, FlowErrors.NestedFlowComment);\n      }\n\n      this.hasFlowCommentCompletion();\n      this.state.pos += this.skipFlowComment();\n      this.state.hasFlowComment = true;\n      return;\n    }\n\n    if (this.state.hasFlowComment) {\n      const end = this.input.indexOf(\"*-/\", this.state.pos += 2);\n\n      if (end === -1) {\n        throw this.raise(this.state.pos - 2, ErrorMessages.UnterminatedComment);\n      }\n\n      this.state.pos = end + 3;\n      return;\n    }\n\n    super.skipBlockComment();\n  }\n\n  skipFlowComment() {\n    const {\n      pos\n    } = this.state;\n    let shiftToFirstNonWhiteSpace = 2;\n\n    while ([32, 9].includes(this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace))) {\n      shiftToFirstNonWhiteSpace++;\n    }\n\n    const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n    const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n    if (ch2 === 58 && ch3 === 58) {\n      return shiftToFirstNonWhiteSpace + 2;\n    }\n\n    if (this.input.slice(shiftToFirstNonWhiteSpace + pos, shiftToFirstNonWhiteSpace + pos + 12) === \"flow-include\") {\n      return shiftToFirstNonWhiteSpace + 12;\n    }\n\n    if (ch2 === 58 && ch3 !== 58) {\n      return shiftToFirstNonWhiteSpace;\n    }\n\n    return false;\n  }\n\n  hasFlowCommentCompletion() {\n    const end = this.input.indexOf(\"*/\", this.state.pos);\n\n    if (end === -1) {\n      throw this.raise(this.state.pos, ErrorMessages.UnterminatedComment);\n    }\n  }\n\n  flowEnumErrorBooleanMemberNotInitialized(pos, {\n    enumName,\n    memberName\n  }) {\n    this.raise(pos, FlowErrors.EnumBooleanMemberNotInitialized, memberName, enumName);\n  }\n\n  flowEnumErrorInvalidMemberName(pos, {\n    enumName,\n    memberName\n  }) {\n    const suggestion = memberName[0].toUpperCase() + memberName.slice(1);\n    this.raise(pos, FlowErrors.EnumInvalidMemberName, memberName, suggestion, enumName);\n  }\n\n  flowEnumErrorDuplicateMemberName(pos, {\n    enumName,\n    memberName\n  }) {\n    this.raise(pos, FlowErrors.EnumDuplicateMemberName, memberName, enumName);\n  }\n\n  flowEnumErrorInconsistentMemberValues(pos, {\n    enumName\n  }) {\n    this.raise(pos, FlowErrors.EnumInconsistentMemberValues, enumName);\n  }\n\n  flowEnumErrorInvalidExplicitType(pos, {\n    enumName,\n    suppliedType\n  }) {\n    return this.raise(pos, suppliedType === null ? FlowErrors.EnumInvalidExplicitTypeUnknownSupplied : FlowErrors.EnumInvalidExplicitType, enumName, suppliedType);\n  }\n\n  flowEnumErrorInvalidMemberInitializer(pos, {\n    enumName,\n    explicitType,\n    memberName\n  }) {\n    let message = null;\n\n    switch (explicitType) {\n      case \"boolean\":\n      case \"number\":\n      case \"string\":\n        message = FlowErrors.EnumInvalidMemberInitializerPrimaryType;\n        break;\n\n      case \"symbol\":\n        message = FlowErrors.EnumInvalidMemberInitializerSymbolType;\n        break;\n\n      default:\n        message = FlowErrors.EnumInvalidMemberInitializerUnknownType;\n    }\n\n    return this.raise(pos, message, enumName, memberName, explicitType);\n  }\n\n  flowEnumErrorNumberMemberNotInitialized(pos, {\n    enumName,\n    memberName\n  }) {\n    this.raise(pos, FlowErrors.EnumNumberMemberNotInitialized, enumName, memberName);\n  }\n\n  flowEnumErrorStringMemberInconsistentlyInitailized(pos, {\n    enumName\n  }) {\n    this.raise(pos, FlowErrors.EnumStringMemberInconsistentlyInitailized, enumName);\n  }\n\n  flowEnumMemberInit() {\n    const startPos = this.state.start;\n\n    const endOfInit = () => this.match(types.comma) || this.match(types.braceR);\n\n    switch (this.state.type) {\n      case types.num:\n        {\n          const literal = this.parseLiteral(this.state.value, \"NumericLiteral\");\n\n          if (endOfInit()) {\n            return {\n              type: \"number\",\n              pos: literal.start,\n              value: literal\n            };\n          }\n\n          return {\n            type: \"invalid\",\n            pos: startPos\n          };\n        }\n\n      case types.string:\n        {\n          const literal = this.parseLiteral(this.state.value, \"StringLiteral\");\n\n          if (endOfInit()) {\n            return {\n              type: \"string\",\n              pos: literal.start,\n              value: literal\n            };\n          }\n\n          return {\n            type: \"invalid\",\n            pos: startPos\n          };\n        }\n\n      case types._true:\n      case types._false:\n        {\n          const literal = this.parseBooleanLiteral();\n\n          if (endOfInit()) {\n            return {\n              type: \"boolean\",\n              pos: literal.start,\n              value: literal\n            };\n          }\n\n          return {\n            type: \"invalid\",\n            pos: startPos\n          };\n        }\n\n      default:\n        return {\n          type: \"invalid\",\n          pos: startPos\n        };\n    }\n  }\n\n  flowEnumMemberRaw() {\n    const pos = this.state.start;\n    const id = this.parseIdentifier(true);\n    const init = this.eat(types.eq) ? this.flowEnumMemberInit() : {\n      type: \"none\",\n      pos\n    };\n    return {\n      id,\n      init\n    };\n  }\n\n  flowEnumCheckExplicitTypeMismatch(pos, context, expectedType) {\n    const {\n      explicitType\n    } = context;\n\n    if (explicitType === null) {\n      return;\n    }\n\n    if (explicitType !== expectedType) {\n      this.flowEnumErrorInvalidMemberInitializer(pos, context);\n    }\n  }\n\n  flowEnumMembers({\n    enumName,\n    explicitType\n  }) {\n    const seenNames = new Set();\n    const members = {\n      booleanMembers: [],\n      numberMembers: [],\n      stringMembers: [],\n      defaultedMembers: []\n    };\n\n    while (!this.match(types.braceR)) {\n      const memberNode = this.startNode();\n      const {\n        id,\n        init\n      } = this.flowEnumMemberRaw();\n      const memberName = id.name;\n\n      if (memberName === \"\") {\n        continue;\n      }\n\n      if (/^[a-z]/.test(memberName)) {\n        this.flowEnumErrorInvalidMemberName(id.start, {\n          enumName,\n          memberName\n        });\n      }\n\n      if (seenNames.has(memberName)) {\n        this.flowEnumErrorDuplicateMemberName(id.start, {\n          enumName,\n          memberName\n        });\n      }\n\n      seenNames.add(memberName);\n      const context = {\n        enumName,\n        explicitType,\n        memberName\n      };\n      memberNode.id = id;\n\n      switch (init.type) {\n        case \"boolean\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"boolean\");\n            memberNode.init = init.value;\n            members.booleanMembers.push(this.finishNode(memberNode, \"EnumBooleanMember\"));\n            break;\n          }\n\n        case \"number\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"number\");\n            memberNode.init = init.value;\n            members.numberMembers.push(this.finishNode(memberNode, \"EnumNumberMember\"));\n            break;\n          }\n\n        case \"string\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"string\");\n            memberNode.init = init.value;\n            members.stringMembers.push(this.finishNode(memberNode, \"EnumStringMember\"));\n            break;\n          }\n\n        case \"invalid\":\n          {\n            throw this.flowEnumErrorInvalidMemberInitializer(init.pos, context);\n          }\n\n        case \"none\":\n          {\n            switch (explicitType) {\n              case \"boolean\":\n                this.flowEnumErrorBooleanMemberNotInitialized(init.pos, context);\n                break;\n\n              case \"number\":\n                this.flowEnumErrorNumberMemberNotInitialized(init.pos, context);\n                break;\n\n              default:\n                members.defaultedMembers.push(this.finishNode(memberNode, \"EnumDefaultedMember\"));\n            }\n          }\n      }\n\n      if (!this.match(types.braceR)) {\n        this.expect(types.comma);\n      }\n    }\n\n    return members;\n  }\n\n  flowEnumStringMembers(initializedMembers, defaultedMembers, {\n    enumName\n  }) {\n    if (initializedMembers.length === 0) {\n      return defaultedMembers;\n    } else if (defaultedMembers.length === 0) {\n      return initializedMembers;\n    } else if (defaultedMembers.length > initializedMembers.length) {\n      for (let _i = 0; _i < initializedMembers.length; _i++) {\n        const member = initializedMembers[_i];\n        this.flowEnumErrorStringMemberInconsistentlyInitailized(member.start, {\n          enumName\n        });\n      }\n\n      return defaultedMembers;\n    } else {\n      for (let _i2 = 0; _i2 < defaultedMembers.length; _i2++) {\n        const member = defaultedMembers[_i2];\n        this.flowEnumErrorStringMemberInconsistentlyInitailized(member.start, {\n          enumName\n        });\n      }\n\n      return initializedMembers;\n    }\n  }\n\n  flowEnumParseExplicitType({\n    enumName\n  }) {\n    if (this.eatContextual(\"of\")) {\n      if (!this.match(types.name)) {\n        throw this.flowEnumErrorInvalidExplicitType(this.state.start, {\n          enumName,\n          suppliedType: null\n        });\n      }\n\n      const {\n        value\n      } = this.state;\n      this.next();\n\n      if (value !== \"boolean\" && value !== \"number\" && value !== \"string\" && value !== \"symbol\") {\n        this.flowEnumErrorInvalidExplicitType(this.state.start, {\n          enumName,\n          suppliedType: value\n        });\n      }\n\n      return value;\n    }\n\n    return null;\n  }\n\n  flowEnumBody(node, {\n    enumName,\n    nameLoc\n  }) {\n    const explicitType = this.flowEnumParseExplicitType({\n      enumName\n    });\n    this.expect(types.braceL);\n    const members = this.flowEnumMembers({\n      enumName,\n      explicitType\n    });\n\n    switch (explicitType) {\n      case \"boolean\":\n        node.explicitType = true;\n        node.members = members.booleanMembers;\n        this.expect(types.braceR);\n        return this.finishNode(node, \"EnumBooleanBody\");\n\n      case \"number\":\n        node.explicitType = true;\n        node.members = members.numberMembers;\n        this.expect(types.braceR);\n        return this.finishNode(node, \"EnumNumberBody\");\n\n      case \"string\":\n        node.explicitType = true;\n        node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\n          enumName\n        });\n        this.expect(types.braceR);\n        return this.finishNode(node, \"EnumStringBody\");\n\n      case \"symbol\":\n        node.members = members.defaultedMembers;\n        this.expect(types.braceR);\n        return this.finishNode(node, \"EnumSymbolBody\");\n\n      default:\n        {\n          const empty = () => {\n            node.members = [];\n            this.expect(types.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          };\n\n          node.explicitType = false;\n          const boolsLen = members.booleanMembers.length;\n          const numsLen = members.numberMembers.length;\n          const strsLen = members.stringMembers.length;\n          const defaultedLen = members.defaultedMembers.length;\n\n          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n            return empty();\n          } else if (!boolsLen && !numsLen) {\n            node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\n              enumName\n            });\n            this.expect(types.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n            for (let _i3 = 0, _members$defaultedMem = members.defaultedMembers; _i3 < _members$defaultedMem.length; _i3++) {\n              const member = _members$defaultedMem[_i3];\n              this.flowEnumErrorBooleanMemberNotInitialized(member.start, {\n                enumName,\n                memberName: member.id.name\n              });\n            }\n\n            node.members = members.booleanMembers;\n            this.expect(types.braceR);\n            return this.finishNode(node, \"EnumBooleanBody\");\n          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n            for (let _i4 = 0, _members$defaultedMem2 = members.defaultedMembers; _i4 < _members$defaultedMem2.length; _i4++) {\n              const member = _members$defaultedMem2[_i4];\n              this.flowEnumErrorNumberMemberNotInitialized(member.start, {\n                enumName,\n                memberName: member.id.name\n              });\n            }\n\n            node.members = members.numberMembers;\n            this.expect(types.braceR);\n            return this.finishNode(node, \"EnumNumberBody\");\n          } else {\n            this.flowEnumErrorInconsistentMemberValues(nameLoc, {\n              enumName\n            });\n            return empty();\n          }\n        }\n    }\n  }\n\n  flowParseEnumDeclaration(node) {\n    const id = this.parseIdentifier();\n    node.id = id;\n    node.body = this.flowEnumBody(this.startNode(), {\n      enumName: id.name,\n      nameLoc: id.start\n    });\n    return this.finishNode(node, \"EnumDeclaration\");\n  }\n\n  updateContext(prevType) {\n    if (this.match(types.name) && this.state.value === \"of\" && prevType === types.name && this.input.slice(this.state.lastTokStart, this.state.lastTokEnd) === \"interface\") {\n      this.state.exprAllowed = false;\n    } else {\n      super.updateContext(prevType);\n    }\n  }\n\n  isLookaheadToken_lt() {\n    const next = this.nextTokenStart();\n\n    if (this.input.charCodeAt(next) === 60) {\n      const afterNext = this.input.charCodeAt(next + 1);\n      return afterNext !== 60 && afterNext !== 61;\n    }\n\n    return false;\n  }\n\n  maybeUnwrapTypeCastExpression(node) {\n    return node.type === \"TypeCastExpression\" ? node.expression : node;\n  }\n\n};\n\nconst entities = {\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\"\n};\nconst HEX_NUMBER = /^[\\da-fA-F]+$/;\nconst DECIMAL_NUMBER = /^\\d+$/;\nconst JsxErrors = Object.freeze({\n  AttributeIsEmpty: \"JSX attributes must only be assigned a non-empty expression\",\n  MissingClosingTagFragment: \"Expected corresponding JSX closing tag for <>\",\n  MissingClosingTagElement: \"Expected corresponding JSX closing tag for <%0>\",\n  UnsupportedJsxValue: \"JSX value should be either an expression or a quoted JSX text\",\n  UnterminatedJsxContent: \"Unterminated JSX contents\",\n  UnwrappedAdjacentJSXElements: \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\"\n});\ntypes$1.j_oTag = new TokContext(\"<tag\", false);\ntypes$1.j_cTag = new TokContext(\"</tag\", false);\ntypes$1.j_expr = new TokContext(\"<tag>...</tag>\", true, true);\ntypes.jsxName = new TokenType(\"jsxName\");\ntypes.jsxText = new TokenType(\"jsxText\", {\n  beforeExpr: true\n});\ntypes.jsxTagStart = new TokenType(\"jsxTagStart\", {\n  startsExpr: true\n});\ntypes.jsxTagEnd = new TokenType(\"jsxTagEnd\");\n\ntypes.jsxTagStart.updateContext = function () {\n  this.state.context.push(types$1.j_expr);\n  this.state.context.push(types$1.j_oTag);\n  this.state.exprAllowed = false;\n};\n\ntypes.jsxTagEnd.updateContext = function (prevType) {\n  const out = this.state.context.pop();\n\n  if (out === types$1.j_oTag && prevType === types.slash || out === types$1.j_cTag) {\n    this.state.context.pop();\n    this.state.exprAllowed = this.curContext() === types$1.j_expr;\n  } else {\n    this.state.exprAllowed = true;\n  }\n};\n\nfunction isFragment(object) {\n  return object ? object.type === \"JSXOpeningFragment\" || object.type === \"JSXClosingFragment\" : false;\n}\n\nfunction getQualifiedJSXName(object) {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return getQualifiedJSXName(object.object) + \".\" + getQualifiedJSXName(object.property);\n  }\n\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nvar jsx = superClass => class extends superClass {\n  jsxReadToken() {\n    let out = \"\";\n    let chunkStart = this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, JsxErrors.UnterminatedJsxContent);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      switch (ch) {\n        case 60:\n        case 123:\n          if (this.state.pos === this.state.start) {\n            if (ch === 60 && this.state.exprAllowed) {\n              ++this.state.pos;\n              return this.finishToken(types.jsxTagStart);\n            }\n\n            return super.getTokenFromCode(ch);\n          }\n\n          out += this.input.slice(chunkStart, this.state.pos);\n          return this.finishToken(types.jsxText, out);\n\n        case 38:\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n          break;\n\n        default:\n          if (isNewLine(ch)) {\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadNewLine(true);\n            chunkStart = this.state.pos;\n          } else {\n            ++this.state.pos;\n          }\n\n      }\n    }\n  }\n\n  jsxReadNewLine(normalizeCRLF) {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let out;\n    ++this.state.pos;\n\n    if (ch === 13 && this.input.charCodeAt(this.state.pos) === 10) {\n      ++this.state.pos;\n      out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n    } else {\n      out = String.fromCharCode(ch);\n    }\n\n    ++this.state.curLine;\n    this.state.lineStart = this.state.pos;\n    return out;\n  }\n\n  jsxReadString(quote) {\n    let out = \"\";\n    let chunkStart = ++this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedString);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n\n      if (ch === 38) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.jsxReadEntity();\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.jsxReadNewLine(false);\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n\n    out += this.input.slice(chunkStart, this.state.pos++);\n    return this.finishToken(types.string, out);\n  }\n\n  jsxReadEntity() {\n    let str = \"\";\n    let count = 0;\n    let entity;\n    let ch = this.input[this.state.pos];\n    const startPos = ++this.state.pos;\n\n    while (this.state.pos < this.length && count++ < 10) {\n      ch = this.input[this.state.pos++];\n\n      if (ch === \";\") {\n        if (str[0] === \"#\") {\n          if (str[1] === \"x\") {\n            str = str.substr(2);\n\n            if (HEX_NUMBER.test(str)) {\n              entity = String.fromCodePoint(parseInt(str, 16));\n            }\n          } else {\n            str = str.substr(1);\n\n            if (DECIMAL_NUMBER.test(str)) {\n              entity = String.fromCodePoint(parseInt(str, 10));\n            }\n          }\n        } else {\n          entity = entities[str];\n        }\n\n        break;\n      }\n\n      str += ch;\n    }\n\n    if (!entity) {\n      this.state.pos = startPos;\n      return \"&\";\n    }\n\n    return entity;\n  }\n\n  jsxReadWord() {\n    let ch;\n    const start = this.state.pos;\n\n    do {\n      ch = this.input.charCodeAt(++this.state.pos);\n    } while (isIdentifierChar(ch) || ch === 45);\n\n    return this.finishToken(types.jsxName, this.input.slice(start, this.state.pos));\n  }\n\n  jsxParseIdentifier() {\n    const node = this.startNode();\n\n    if (this.match(types.jsxName)) {\n      node.name = this.state.value;\n    } else if (this.state.type.keyword) {\n      node.name = this.state.type.keyword;\n    } else {\n      this.unexpected();\n    }\n\n    this.next();\n    return this.finishNode(node, \"JSXIdentifier\");\n  }\n\n  jsxParseNamespacedName() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const name = this.jsxParseIdentifier();\n    if (!this.eat(types.colon)) return name;\n    const node = this.startNodeAt(startPos, startLoc);\n    node.namespace = name;\n    node.name = this.jsxParseIdentifier();\n    return this.finishNode(node, \"JSXNamespacedName\");\n  }\n\n  jsxParseElementName() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let node = this.jsxParseNamespacedName();\n\n    if (node.type === \"JSXNamespacedName\") {\n      return node;\n    }\n\n    while (this.eat(types.dot)) {\n      const newNode = this.startNodeAt(startPos, startLoc);\n      newNode.object = node;\n      newNode.property = this.jsxParseIdentifier();\n      node = this.finishNode(newNode, \"JSXMemberExpression\");\n    }\n\n    return node;\n  }\n\n  jsxParseAttributeValue() {\n    let node;\n\n    switch (this.state.type) {\n      case types.braceL:\n        node = this.startNode();\n        this.next();\n        node = this.jsxParseExpressionContainer(node);\n\n        if (node.expression.type === \"JSXEmptyExpression\") {\n          this.raise(node.start, JsxErrors.AttributeIsEmpty);\n        }\n\n        return node;\n\n      case types.jsxTagStart:\n      case types.string:\n        return this.parseExprAtom();\n\n      default:\n        throw this.raise(this.state.start, JsxErrors.UnsupportedJsxValue);\n    }\n  }\n\n  jsxParseEmptyExpression() {\n    const node = this.startNodeAt(this.state.lastTokEnd, this.state.lastTokEndLoc);\n    return this.finishNodeAt(node, \"JSXEmptyExpression\", this.state.start, this.state.startLoc);\n  }\n\n  jsxParseSpreadChild(node) {\n    this.next();\n    node.expression = this.parseExpression();\n    this.expect(types.braceR);\n    return this.finishNode(node, \"JSXSpreadChild\");\n  }\n\n  jsxParseExpressionContainer(node) {\n    if (this.match(types.braceR)) {\n      node.expression = this.jsxParseEmptyExpression();\n    } else {\n      node.expression = this.parseExpression();\n    }\n\n    this.expect(types.braceR);\n    return this.finishNode(node, \"JSXExpressionContainer\");\n  }\n\n  jsxParseAttribute() {\n    const node = this.startNode();\n\n    if (this.eat(types.braceL)) {\n      this.expect(types.ellipsis);\n      node.argument = this.parseMaybeAssignAllowIn();\n      this.expect(types.braceR);\n      return this.finishNode(node, \"JSXSpreadAttribute\");\n    }\n\n    node.name = this.jsxParseNamespacedName();\n    node.value = this.eat(types.eq) ? this.jsxParseAttributeValue() : null;\n    return this.finishNode(node, \"JSXAttribute\");\n  }\n\n  jsxParseOpeningElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n\n    if (this.match(types.jsxTagEnd)) {\n      this.expect(types.jsxTagEnd);\n      return this.finishNode(node, \"JSXOpeningFragment\");\n    }\n\n    node.name = this.jsxParseElementName();\n    return this.jsxParseOpeningElementAfterName(node);\n  }\n\n  jsxParseOpeningElementAfterName(node) {\n    const attributes = [];\n\n    while (!this.match(types.slash) && !this.match(types.jsxTagEnd)) {\n      attributes.push(this.jsxParseAttribute());\n    }\n\n    node.attributes = attributes;\n    node.selfClosing = this.eat(types.slash);\n    this.expect(types.jsxTagEnd);\n    return this.finishNode(node, \"JSXOpeningElement\");\n  }\n\n  jsxParseClosingElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n\n    if (this.match(types.jsxTagEnd)) {\n      this.expect(types.jsxTagEnd);\n      return this.finishNode(node, \"JSXClosingFragment\");\n    }\n\n    node.name = this.jsxParseElementName();\n    this.expect(types.jsxTagEnd);\n    return this.finishNode(node, \"JSXClosingElement\");\n  }\n\n  jsxParseElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n    const children = [];\n    const openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);\n    let closingElement = null;\n\n    if (!openingElement.selfClosing) {\n      contents: for (;;) {\n        switch (this.state.type) {\n          case types.jsxTagStart:\n            startPos = this.state.start;\n            startLoc = this.state.startLoc;\n            this.next();\n\n            if (this.eat(types.slash)) {\n              closingElement = this.jsxParseClosingElementAt(startPos, startLoc);\n              break contents;\n            }\n\n            children.push(this.jsxParseElementAt(startPos, startLoc));\n            break;\n\n          case types.jsxText:\n            children.push(this.parseExprAtom());\n            break;\n\n          case types.braceL:\n            {\n              const node = this.startNode();\n              this.next();\n\n              if (this.match(types.ellipsis)) {\n                children.push(this.jsxParseSpreadChild(node));\n              } else {\n                children.push(this.jsxParseExpressionContainer(node));\n              }\n\n              break;\n            }\n\n          default:\n            throw this.unexpected();\n        }\n      }\n\n      if (isFragment(openingElement) && !isFragment(closingElement)) {\n        this.raise(closingElement.start, JsxErrors.MissingClosingTagFragment);\n      } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n        this.raise(closingElement.start, JsxErrors.MissingClosingTagElement, getQualifiedJSXName(openingElement.name));\n      } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n        if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {\n          this.raise(closingElement.start, JsxErrors.MissingClosingTagElement, getQualifiedJSXName(openingElement.name));\n        }\n      }\n    }\n\n    if (isFragment(openingElement)) {\n      node.openingFragment = openingElement;\n      node.closingFragment = closingElement;\n    } else {\n      node.openingElement = openingElement;\n      node.closingElement = closingElement;\n    }\n\n    node.children = children;\n\n    if (this.isRelational(\"<\")) {\n      throw this.raise(this.state.start, JsxErrors.UnwrappedAdjacentJSXElements);\n    }\n\n    return isFragment(openingElement) ? this.finishNode(node, \"JSXFragment\") : this.finishNode(node, \"JSXElement\");\n  }\n\n  jsxParseElement() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    this.next();\n    return this.jsxParseElementAt(startPos, startLoc);\n  }\n\n  parseExprAtom(refExpressionErrors) {\n    if (this.match(types.jsxText)) {\n      return this.parseLiteral(this.state.value, \"JSXText\");\n    } else if (this.match(types.jsxTagStart)) {\n      return this.jsxParseElement();\n    } else if (this.isRelational(\"<\") && this.input.charCodeAt(this.state.pos) !== 33) {\n      this.finishToken(types.jsxTagStart);\n      return this.jsxParseElement();\n    } else {\n      return super.parseExprAtom(refExpressionErrors);\n    }\n  }\n\n  getTokenFromCode(code) {\n    if (this.state.inPropertyName) return super.getTokenFromCode(code);\n    const context = this.curContext();\n\n    if (context === types$1.j_expr) {\n      return this.jsxReadToken();\n    }\n\n    if (context === types$1.j_oTag || context === types$1.j_cTag) {\n      if (isIdentifierStart(code)) {\n        return this.jsxReadWord();\n      }\n\n      if (code === 62) {\n        ++this.state.pos;\n        return this.finishToken(types.jsxTagEnd);\n      }\n\n      if ((code === 34 || code === 39) && context === types$1.j_oTag) {\n        return this.jsxReadString(code);\n      }\n    }\n\n    if (code === 60 && this.state.exprAllowed && this.input.charCodeAt(this.state.pos + 1) !== 33) {\n      ++this.state.pos;\n      return this.finishToken(types.jsxTagStart);\n    }\n\n    return super.getTokenFromCode(code);\n  }\n\n  updateContext(prevType) {\n    if (this.match(types.braceL)) {\n      const curContext = this.curContext();\n\n      if (curContext === types$1.j_oTag) {\n        this.state.context.push(types$1.braceExpression);\n      } else if (curContext === types$1.j_expr) {\n        this.state.context.push(types$1.templateQuasi);\n      } else {\n        super.updateContext(prevType);\n      }\n\n      this.state.exprAllowed = true;\n    } else if (this.match(types.slash) && prevType === types.jsxTagStart) {\n      this.state.context.length -= 2;\n      this.state.context.push(types$1.j_cTag);\n      this.state.exprAllowed = false;\n    } else {\n      return super.updateContext(prevType);\n    }\n  }\n\n};\n\nclass Scope {\n  constructor(flags) {\n    this.var = [];\n    this.lexical = [];\n    this.functions = [];\n    this.flags = flags;\n  }\n\n}\n\nclass ScopeHandler {\n  constructor(raise, inModule) {\n    this.scopeStack = [];\n    this.undefinedExports = new Map();\n    this.undefinedPrivateNames = new Map();\n    this.raise = raise;\n    this.inModule = inModule;\n  }\n\n  get inFunction() {\n    return (this.currentVarScope().flags & SCOPE_FUNCTION) > 0;\n  }\n\n  get allowSuper() {\n    return (this.currentThisScope().flags & SCOPE_SUPER) > 0;\n  }\n\n  get allowDirectSuper() {\n    return (this.currentThisScope().flags & SCOPE_DIRECT_SUPER) > 0;\n  }\n\n  get inClass() {\n    return (this.currentThisScope().flags & SCOPE_CLASS) > 0;\n  }\n\n  get inNonArrowFunction() {\n    return (this.currentThisScope().flags & SCOPE_FUNCTION) > 0;\n  }\n\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n\n  createScope(flags) {\n    return new Scope(flags);\n  }\n\n  enter(flags) {\n    this.scopeStack.push(this.createScope(flags));\n  }\n\n  exit() {\n    this.scopeStack.pop();\n  }\n\n  treatFunctionsAsVarInScope(scope) {\n    return !!(scope.flags & SCOPE_FUNCTION || !this.inModule && scope.flags & SCOPE_PROGRAM);\n  }\n\n  declareName(name, bindingType, pos) {\n    let scope = this.currentScope();\n\n    if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {\n      this.checkRedeclarationInScope(scope, name, bindingType, pos);\n\n      if (bindingType & BIND_SCOPE_FUNCTION) {\n        scope.functions.push(name);\n      } else {\n        scope.lexical.push(name);\n      }\n\n      if (bindingType & BIND_SCOPE_LEXICAL) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & BIND_SCOPE_VAR) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n        scope.var.push(name);\n        this.maybeExportDefined(scope, name);\n        if (scope.flags & SCOPE_VAR) break;\n      }\n    }\n\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  maybeExportDefined(scope, name) {\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  checkRedeclarationInScope(scope, name, bindingType, pos) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.raise(pos, ErrorMessages.VarRedeclaration, name);\n    }\n  }\n\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (!(bindingType & BIND_KIND_VALUE)) return false;\n\n    if (bindingType & BIND_SCOPE_LEXICAL) {\n      return scope.lexical.indexOf(name) > -1 || scope.functions.indexOf(name) > -1 || scope.var.indexOf(name) > -1;\n    }\n\n    if (bindingType & BIND_SCOPE_FUNCTION) {\n      return scope.lexical.indexOf(name) > -1 || !this.treatFunctionsAsVarInScope(scope) && scope.var.indexOf(name) > -1;\n    }\n\n    return scope.lexical.indexOf(name) > -1 && !(scope.flags & SCOPE_SIMPLE_CATCH && scope.lexical[0] === name) || !this.treatFunctionsAsVarInScope(scope) && scope.functions.indexOf(name) > -1;\n  }\n\n  checkLocalExport(id) {\n    if (this.scopeStack[0].lexical.indexOf(id.name) === -1 && this.scopeStack[0].var.indexOf(id.name) === -1 && this.scopeStack[0].functions.indexOf(id.name) === -1) {\n      this.undefinedExports.set(id.name, id.start);\n    }\n  }\n\n  currentScope() {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n\n  currentVarScope() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const scope = this.scopeStack[i];\n\n      if (scope.flags & SCOPE_VAR) {\n        return scope;\n      }\n    }\n  }\n\n  currentThisScope() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const scope = this.scopeStack[i];\n\n      if ((scope.flags & SCOPE_VAR || scope.flags & SCOPE_CLASS) && !(scope.flags & SCOPE_ARROW)) {\n        return scope;\n      }\n    }\n  }\n\n}\n\nclass TypeScriptScope extends Scope {\n  constructor(...args) {\n    super(...args);\n    this.types = [];\n    this.enums = [];\n    this.constEnums = [];\n    this.classes = [];\n    this.exportOnlyBindings = [];\n  }\n\n}\n\nclass TypeScriptScopeHandler extends ScopeHandler {\n  createScope(flags) {\n    return new TypeScriptScope(flags);\n  }\n\n  declareName(name, bindingType, pos) {\n    const scope = this.currentScope();\n\n    if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.exportOnlyBindings.push(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n\n    if (bindingType & BIND_KIND_TYPE) {\n      if (!(bindingType & BIND_KIND_VALUE)) {\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n        this.maybeExportDefined(scope, name);\n      }\n\n      scope.types.push(name);\n    }\n\n    if (bindingType & BIND_FLAGS_TS_ENUM) scope.enums.push(name);\n    if (bindingType & BIND_FLAGS_TS_CONST_ENUM) scope.constEnums.push(name);\n    if (bindingType & BIND_FLAGS_CLASS) scope.classes.push(name);\n  }\n\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (scope.enums.indexOf(name) > -1) {\n      if (bindingType & BIND_FLAGS_TS_ENUM) {\n        const isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);\n        const wasConst = scope.constEnums.indexOf(name) > -1;\n        return isConst !== wasConst;\n      }\n\n      return true;\n    }\n\n    if (bindingType & BIND_FLAGS_CLASS && scope.classes.indexOf(name) > -1) {\n      if (scope.lexical.indexOf(name) > -1) {\n        return !!(bindingType & BIND_KIND_VALUE);\n      } else {\n        return false;\n      }\n    }\n\n    if (bindingType & BIND_KIND_TYPE && scope.types.indexOf(name) > -1) {\n      return true;\n    }\n\n    return super.isRedeclaredInScope(...arguments);\n  }\n\n  checkLocalExport(id) {\n    if (this.scopeStack[0].types.indexOf(id.name) === -1 && this.scopeStack[0].exportOnlyBindings.indexOf(id.name) === -1) {\n      super.checkLocalExport(id);\n    }\n  }\n\n}\n\nconst PARAM = 0b0000,\n      PARAM_YIELD = 0b0001,\n      PARAM_AWAIT = 0b0010,\n      PARAM_RETURN = 0b0100,\n      PARAM_IN = 0b1000;\n\nclass ProductionParameterHandler {\n  constructor() {\n    this.stacks = [];\n  }\n\n  enter(flags) {\n    this.stacks.push(flags);\n  }\n\n  exit() {\n    this.stacks.pop();\n  }\n\n  currentFlags() {\n    return this.stacks[this.stacks.length - 1];\n  }\n\n  get hasAwait() {\n    return (this.currentFlags() & PARAM_AWAIT) > 0;\n  }\n\n  get hasYield() {\n    return (this.currentFlags() & PARAM_YIELD) > 0;\n  }\n\n  get hasReturn() {\n    return (this.currentFlags() & PARAM_RETURN) > 0;\n  }\n\n  get hasIn() {\n    return (this.currentFlags() & PARAM_IN) > 0;\n  }\n\n}\n\nfunction functionFlags(isAsync, isGenerator) {\n  return (isAsync ? PARAM_AWAIT : 0) | (isGenerator ? PARAM_YIELD : 0);\n}\n\nfunction nonNull(x) {\n  if (x == null) {\n    throw new Error(`Unexpected ${x} value.`);\n  }\n\n  return x;\n}\n\nfunction assert(x) {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\nconst TSErrors = Object.freeze({\n  ClassMethodHasDeclare: \"Class methods cannot have the 'declare' modifier\",\n  ClassMethodHasReadonly: \"Class methods cannot have the 'readonly' modifier\",\n  DeclareClassFieldHasInitializer: \"'declare' class fields cannot have an initializer\",\n  DuplicateModifier: \"Duplicate modifier: '%0'\",\n  EmptyHeritageClauseType: \"'%0' list cannot be empty.\",\n  IndexSignatureHasAbstract: \"Index signatures cannot have the 'abstract' modifier\",\n  IndexSignatureHasAccessibility: \"Index signatures cannot have an accessibility modifier ('%0')\",\n  IndexSignatureHasStatic: \"Index signatures cannot have the 'static' modifier\",\n  InvalidTupleMemberLabel: \"Tuple members must be labeled with a simple identifier.\",\n  MixedLabeledAndUnlabeledElements: \"Tuple members must all have names or all not have names.\",\n  OptionalTypeBeforeRequired: \"A required element cannot follow an optional element.\",\n  PatternIsOptional: \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  PrivateElementHasAbstract: \"Private elements cannot have the 'abstract' modifier.\",\n  PrivateElementHasAccessibility: \"Private elements cannot have an accessibility modifier ('%0')\",\n  TemplateTypeHasSubstitution: \"Template literal types cannot have any substitution\",\n  TypeAnnotationAfterAssign: \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`\",\n  UnexpectedReadonly: \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n  UnexpectedTypeAnnotation: \"Did not expect a type annotation here.\",\n  UnexpectedTypeCastInParameter: \"Unexpected type cast in parameter position.\",\n  UnsupportedImportTypeArgument: \"Argument in a type import must be a string literal\",\n  UnsupportedParameterPropertyKind: \"A parameter property may not be declared using a binding pattern.\",\n  UnsupportedSignatureParameterKind: \"Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got %0\"\n});\n\nfunction keywordTypeFromName(value) {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n\n    case \"never\":\n      return \"TSNeverKeyword\";\n\n    case \"number\":\n      return \"TSNumberKeyword\";\n\n    case \"object\":\n      return \"TSObjectKeyword\";\n\n    case \"string\":\n      return \"TSStringKeyword\";\n\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n\n    default:\n      return undefined;\n  }\n}\n\nvar typescript = superClass => class extends superClass {\n  getScopeHandler() {\n    return TypeScriptScopeHandler;\n  }\n\n  tsIsIdentifier() {\n    return this.match(types.name);\n  }\n\n  tsNextTokenCanFollowModifier() {\n    this.next();\n    return !this.hasPrecedingLineBreak() && !this.match(types.parenL) && !this.match(types.parenR) && !this.match(types.colon) && !this.match(types.eq) && !this.match(types.question) && !this.match(types.bang);\n  }\n\n  tsParseModifier(allowedModifiers) {\n    if (!this.match(types.name)) {\n      return undefined;\n    }\n\n    const modifier = this.state.value;\n\n    if (allowedModifiers.indexOf(modifier) !== -1 && this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {\n      return modifier;\n    }\n\n    return undefined;\n  }\n\n  tsParseModifiers(modified, allowedModifiers) {\n    for (;;) {\n      const startPos = this.state.start;\n      const modifier = this.tsParseModifier(allowedModifiers);\n      if (!modifier) break;\n\n      if (Object.hasOwnProperty.call(modified, modifier)) {\n        this.raise(startPos, TSErrors.DuplicateModifier, modifier);\n      }\n\n      modified[modifier] = true;\n    }\n  }\n\n  tsIsListTerminator(kind) {\n    switch (kind) {\n      case \"EnumMembers\":\n      case \"TypeMembers\":\n        return this.match(types.braceR);\n\n      case \"HeritageClauseElement\":\n        return this.match(types.braceL);\n\n      case \"TupleElementTypes\":\n        return this.match(types.bracketR);\n\n      case \"TypeParametersOrArguments\":\n        return this.isRelational(\">\");\n    }\n\n    throw new Error(\"Unreachable\");\n  }\n\n  tsParseList(kind, parseElement) {\n    const result = [];\n\n    while (!this.tsIsListTerminator(kind)) {\n      result.push(parseElement());\n    }\n\n    return result;\n  }\n\n  tsParseDelimitedList(kind, parseElement) {\n    return nonNull(this.tsParseDelimitedListWorker(kind, parseElement, true));\n  }\n\n  tsParseDelimitedListWorker(kind, parseElement, expectSuccess) {\n    const result = [];\n\n    for (;;) {\n      if (this.tsIsListTerminator(kind)) {\n        break;\n      }\n\n      const element = parseElement();\n\n      if (element == null) {\n        return undefined;\n      }\n\n      result.push(element);\n\n      if (this.eat(types.comma)) {\n        continue;\n      }\n\n      if (this.tsIsListTerminator(kind)) {\n        break;\n      }\n\n      if (expectSuccess) {\n        this.expect(types.comma);\n      }\n\n      return undefined;\n    }\n\n    return result;\n  }\n\n  tsParseBracketedList(kind, parseElement, bracket, skipFirstToken) {\n    if (!skipFirstToken) {\n      if (bracket) {\n        this.expect(types.bracketL);\n      } else {\n        this.expectRelational(\"<\");\n      }\n    }\n\n    const result = this.tsParseDelimitedList(kind, parseElement);\n\n    if (bracket) {\n      this.expect(types.bracketR);\n    } else {\n      this.expectRelational(\">\");\n    }\n\n    return result;\n  }\n\n  tsParseImportType() {\n    const node = this.startNode();\n    this.expect(types._import);\n    this.expect(types.parenL);\n\n    if (!this.match(types.string)) {\n      this.raise(this.state.start, TSErrors.UnsupportedImportTypeArgument);\n    }\n\n    node.argument = this.parseExprAtom();\n    this.expect(types.parenR);\n\n    if (this.eat(types.dot)) {\n      node.qualifier = this.tsParseEntityName(true);\n    }\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSImportType\");\n  }\n\n  tsParseEntityName(allowReservedWords) {\n    let entity = this.parseIdentifier();\n\n    while (this.eat(types.dot)) {\n      const node = this.startNodeAtNode(entity);\n      node.left = entity;\n      node.right = this.parseIdentifier(allowReservedWords);\n      entity = this.finishNode(node, \"TSQualifiedName\");\n    }\n\n    return entity;\n  }\n\n  tsParseTypeReference() {\n    const node = this.startNode();\n    node.typeName = this.tsParseEntityName(false);\n\n    if (!this.hasPrecedingLineBreak() && this.isRelational(\"<\")) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSTypeReference\");\n  }\n\n  tsParseThisTypePredicate(lhs) {\n    this.next();\n    const node = this.startNodeAtNode(lhs);\n    node.parameterName = lhs;\n    node.typeAnnotation = this.tsParseTypeAnnotation(false);\n    return this.finishNode(node, \"TSTypePredicate\");\n  }\n\n  tsParseThisTypeNode() {\n    const node = this.startNode();\n    this.next();\n    return this.finishNode(node, \"TSThisType\");\n  }\n\n  tsParseTypeQuery() {\n    const node = this.startNode();\n    this.expect(types._typeof);\n\n    if (this.match(types._import)) {\n      node.exprName = this.tsParseImportType();\n    } else {\n      node.exprName = this.tsParseEntityName(true);\n    }\n\n    return this.finishNode(node, \"TSTypeQuery\");\n  }\n\n  tsParseTypeParameter() {\n    const node = this.startNode();\n    node.name = this.parseIdentifierName(node.start);\n    node.constraint = this.tsEatThenParseType(types._extends);\n    node.default = this.tsEatThenParseType(types.eq);\n    return this.finishNode(node, \"TSTypeParameter\");\n  }\n\n  tsTryParseTypeParameters() {\n    if (this.isRelational(\"<\")) {\n      return this.tsParseTypeParameters();\n    }\n  }\n\n  tsParseTypeParameters() {\n    const node = this.startNode();\n\n    if (this.isRelational(\"<\") || this.match(types.jsxTagStart)) {\n      this.next();\n    } else {\n      this.unexpected();\n    }\n\n    node.params = this.tsParseBracketedList(\"TypeParametersOrArguments\", this.tsParseTypeParameter.bind(this), false, true);\n    return this.finishNode(node, \"TSTypeParameterDeclaration\");\n  }\n\n  tsTryNextParseConstantContext() {\n    if (this.lookahead().type === types._const) {\n      this.next();\n      return this.tsParseTypeReference();\n    }\n\n    return null;\n  }\n\n  tsFillSignature(returnToken, signature) {\n    const returnTokenRequired = returnToken === types.arrow;\n    signature.typeParameters = this.tsTryParseTypeParameters();\n    this.expect(types.parenL);\n    signature.parameters = this.tsParseBindingListForSignature();\n\n    if (returnTokenRequired) {\n      signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n    } else if (this.match(returnToken)) {\n      signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n    }\n  }\n\n  tsParseBindingListForSignature() {\n    return this.parseBindingList(types.parenR, 41).map(pattern => {\n      if (pattern.type !== \"Identifier\" && pattern.type !== \"RestElement\" && pattern.type !== \"ObjectPattern\" && pattern.type !== \"ArrayPattern\") {\n        this.raise(pattern.start, TSErrors.UnsupportedSignatureParameterKind, pattern.type);\n      }\n\n      return pattern;\n    });\n  }\n\n  tsParseTypeMemberSemicolon() {\n    if (!this.eat(types.comma)) {\n      this.semicolon();\n    }\n  }\n\n  tsParseSignatureMember(kind, node) {\n    this.tsFillSignature(types.colon, node);\n    this.tsParseTypeMemberSemicolon();\n    return this.finishNode(node, kind);\n  }\n\n  tsIsUnambiguouslyIndexSignature() {\n    this.next();\n    return this.eat(types.name) && this.match(types.colon);\n  }\n\n  tsTryParseIndexSignature(node) {\n    if (!(this.match(types.bracketL) && this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this)))) {\n      return undefined;\n    }\n\n    this.expect(types.bracketL);\n    const id = this.parseIdentifier();\n    id.typeAnnotation = this.tsParseTypeAnnotation();\n    this.resetEndLocation(id);\n    this.expect(types.bracketR);\n    node.parameters = [id];\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) node.typeAnnotation = type;\n    this.tsParseTypeMemberSemicolon();\n    return this.finishNode(node, \"TSIndexSignature\");\n  }\n\n  tsParsePropertyOrMethodSignature(node, readonly) {\n    if (this.eat(types.question)) node.optional = true;\n    const nodeAny = node;\n\n    if (!readonly && (this.match(types.parenL) || this.isRelational(\"<\"))) {\n      const method = nodeAny;\n      this.tsFillSignature(types.colon, method);\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(method, \"TSMethodSignature\");\n    } else {\n      const property = nodeAny;\n      if (readonly) property.readonly = true;\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) property.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(property, \"TSPropertySignature\");\n    }\n  }\n\n  tsParseTypeMember() {\n    const node = this.startNode();\n\n    if (this.match(types.parenL) || this.isRelational(\"<\")) {\n      return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n    }\n\n    if (this.match(types._new)) {\n      const id = this.startNode();\n      this.next();\n\n      if (this.match(types.parenL) || this.isRelational(\"<\")) {\n        return this.tsParseSignatureMember(\"TSConstructSignatureDeclaration\", node);\n      } else {\n        node.key = this.createIdentifier(id, \"new\");\n        return this.tsParsePropertyOrMethodSignature(node, false);\n      }\n    }\n\n    const readonly = !!this.tsParseModifier([\"readonly\"]);\n    const idx = this.tsTryParseIndexSignature(node);\n\n    if (idx) {\n      if (readonly) node.readonly = true;\n      return idx;\n    }\n\n    this.parsePropertyName(node, false);\n    return this.tsParsePropertyOrMethodSignature(node, readonly);\n  }\n\n  tsParseTypeLiteral() {\n    const node = this.startNode();\n    node.members = this.tsParseObjectTypeMembers();\n    return this.finishNode(node, \"TSTypeLiteral\");\n  }\n\n  tsParseObjectTypeMembers() {\n    this.expect(types.braceL);\n    const members = this.tsParseList(\"TypeMembers\", this.tsParseTypeMember.bind(this));\n    this.expect(types.braceR);\n    return members;\n  }\n\n  tsIsStartOfMappedType() {\n    this.next();\n\n    if (this.eat(types.plusMin)) {\n      return this.isContextual(\"readonly\");\n    }\n\n    if (this.isContextual(\"readonly\")) {\n      this.next();\n    }\n\n    if (!this.match(types.bracketL)) {\n      return false;\n    }\n\n    this.next();\n\n    if (!this.tsIsIdentifier()) {\n      return false;\n    }\n\n    this.next();\n    return this.match(types._in);\n  }\n\n  tsParseMappedTypeParameter() {\n    const node = this.startNode();\n    node.name = this.parseIdentifierName(node.start);\n    node.constraint = this.tsExpectThenParseType(types._in);\n    return this.finishNode(node, \"TSTypeParameter\");\n  }\n\n  tsParseMappedType() {\n    const node = this.startNode();\n    this.expect(types.braceL);\n\n    if (this.match(types.plusMin)) {\n      node.readonly = this.state.value;\n      this.next();\n      this.expectContextual(\"readonly\");\n    } else if (this.eatContextual(\"readonly\")) {\n      node.readonly = true;\n    }\n\n    this.expect(types.bracketL);\n    node.typeParameter = this.tsParseMappedTypeParameter();\n    this.expect(types.bracketR);\n\n    if (this.match(types.plusMin)) {\n      node.optional = this.state.value;\n      this.next();\n      this.expect(types.question);\n    } else if (this.eat(types.question)) {\n      node.optional = true;\n    }\n\n    node.typeAnnotation = this.tsTryParseType();\n    this.semicolon();\n    this.expect(types.braceR);\n    return this.finishNode(node, \"TSMappedType\");\n  }\n\n  tsParseTupleType() {\n    const node = this.startNode();\n    node.elementTypes = this.tsParseBracketedList(\"TupleElementTypes\", this.tsParseTupleElementType.bind(this), true, false);\n    let seenOptionalElement = false;\n    let labeledElements = null;\n    node.elementTypes.forEach(elementNode => {\n      var _labeledElements;\n\n      let {\n        type\n      } = elementNode;\n\n      if (seenOptionalElement && type !== \"TSRestType\" && type !== \"TSOptionalType\" && !(type === \"TSNamedTupleMember\" && elementNode.optional)) {\n        this.raise(elementNode.start, TSErrors.OptionalTypeBeforeRequired);\n      }\n\n      seenOptionalElement = seenOptionalElement || type === \"TSNamedTupleMember\" && elementNode.optional || type === \"TSOptionalType\";\n\n      if (type === \"TSRestType\") {\n        elementNode = elementNode.typeAnnotation;\n        type = elementNode.type;\n      }\n\n      const isLabeled = type === \"TSNamedTupleMember\";\n      labeledElements = (_labeledElements = labeledElements) != null ? _labeledElements : isLabeled;\n\n      if (labeledElements !== isLabeled) {\n        this.raise(elementNode.start, TSErrors.MixedLabeledAndUnlabeledElements);\n      }\n    });\n    return this.finishNode(node, \"TSTupleType\");\n  }\n\n  tsParseTupleElementType() {\n    const {\n      start: startPos,\n      startLoc\n    } = this.state;\n    const rest = this.eat(types.ellipsis);\n    let type = this.tsParseType();\n    const optional = this.eat(types.question);\n    const labeled = this.eat(types.colon);\n\n    if (labeled) {\n      const labeledNode = this.startNodeAtNode(type);\n      labeledNode.optional = optional;\n\n      if (type.type === \"TSTypeReference\" && !type.typeParameters && type.typeName.type === \"Identifier\") {\n        labeledNode.label = type.typeName;\n      } else {\n        this.raise(type.start, TSErrors.InvalidTupleMemberLabel);\n        labeledNode.label = type;\n      }\n\n      labeledNode.elementType = this.tsParseType();\n      type = this.finishNode(labeledNode, \"TSNamedTupleMember\");\n    } else if (optional) {\n      const optionalTypeNode = this.startNodeAtNode(type);\n      optionalTypeNode.typeAnnotation = type;\n      type = this.finishNode(optionalTypeNode, \"TSOptionalType\");\n    }\n\n    if (rest) {\n      const restNode = this.startNodeAt(startPos, startLoc);\n      restNode.typeAnnotation = type;\n      type = this.finishNode(restNode, \"TSRestType\");\n    }\n\n    return type;\n  }\n\n  tsParseParenthesizedType() {\n    const node = this.startNode();\n    this.expect(types.parenL);\n    node.typeAnnotation = this.tsParseType();\n    this.expect(types.parenR);\n    return this.finishNode(node, \"TSParenthesizedType\");\n  }\n\n  tsParseFunctionOrConstructorType(type) {\n    const node = this.startNode();\n\n    if (type === \"TSConstructorType\") {\n      this.expect(types._new);\n    }\n\n    this.tsFillSignature(types.arrow, node);\n    return this.finishNode(node, type);\n  }\n\n  tsParseLiteralTypeNode() {\n    const node = this.startNode();\n\n    node.literal = (() => {\n      switch (this.state.type) {\n        case types.num:\n        case types.bigint:\n        case types.string:\n        case types._true:\n        case types._false:\n          return this.parseExprAtom();\n\n        default:\n          throw this.unexpected();\n      }\n    })();\n\n    return this.finishNode(node, \"TSLiteralType\");\n  }\n\n  tsParseTemplateLiteralType() {\n    const node = this.startNode();\n    const templateNode = this.parseTemplate(false);\n\n    if (templateNode.expressions.length > 0) {\n      this.raise(templateNode.expressions[0].start, TSErrors.TemplateTypeHasSubstitution);\n    }\n\n    node.literal = templateNode;\n    return this.finishNode(node, \"TSLiteralType\");\n  }\n\n  tsParseThisTypeOrThisTypePredicate() {\n    const thisKeyword = this.tsParseThisTypeNode();\n\n    if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) {\n      return this.tsParseThisTypePredicate(thisKeyword);\n    } else {\n      return thisKeyword;\n    }\n  }\n\n  tsParseNonArrayType() {\n    switch (this.state.type) {\n      case types.name:\n      case types._void:\n      case types._null:\n        {\n          const type = this.match(types._void) ? \"TSVoidKeyword\" : this.match(types._null) ? \"TSNullKeyword\" : keywordTypeFromName(this.state.value);\n\n          if (type !== undefined && this.lookaheadCharCode() !== 46) {\n            const node = this.startNode();\n            this.next();\n            return this.finishNode(node, type);\n          }\n\n          return this.tsParseTypeReference();\n        }\n\n      case types.string:\n      case types.num:\n      case types.bigint:\n      case types._true:\n      case types._false:\n        return this.tsParseLiteralTypeNode();\n\n      case types.plusMin:\n        if (this.state.value === \"-\") {\n          const node = this.startNode();\n          const nextToken = this.lookahead();\n\n          if (nextToken.type !== types.num && nextToken.type !== types.bigint) {\n            throw this.unexpected();\n          }\n\n          node.literal = this.parseMaybeUnary();\n          return this.finishNode(node, \"TSLiteralType\");\n        }\n\n        break;\n\n      case types._this:\n        return this.tsParseThisTypeOrThisTypePredicate();\n\n      case types._typeof:\n        return this.tsParseTypeQuery();\n\n      case types._import:\n        return this.tsParseImportType();\n\n      case types.braceL:\n        return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this)) ? this.tsParseMappedType() : this.tsParseTypeLiteral();\n\n      case types.bracketL:\n        return this.tsParseTupleType();\n\n      case types.parenL:\n        return this.tsParseParenthesizedType();\n\n      case types.backQuote:\n        return this.tsParseTemplateLiteralType();\n    }\n\n    throw this.unexpected();\n  }\n\n  tsParseArrayTypeOrHigher() {\n    let type = this.tsParseNonArrayType();\n\n    while (!this.hasPrecedingLineBreak() && this.eat(types.bracketL)) {\n      if (this.match(types.bracketR)) {\n        const node = this.startNodeAtNode(type);\n        node.elementType = type;\n        this.expect(types.bracketR);\n        type = this.finishNode(node, \"TSArrayType\");\n      } else {\n        const node = this.startNodeAtNode(type);\n        node.objectType = type;\n        node.indexType = this.tsParseType();\n        this.expect(types.bracketR);\n        type = this.finishNode(node, \"TSIndexedAccessType\");\n      }\n    }\n\n    return type;\n  }\n\n  tsParseTypeOperator(operator) {\n    const node = this.startNode();\n    this.expectContextual(operator);\n    node.operator = operator;\n    node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n    if (operator === \"readonly\") {\n      this.tsCheckTypeAnnotationForReadOnly(node);\n    }\n\n    return this.finishNode(node, \"TSTypeOperator\");\n  }\n\n  tsCheckTypeAnnotationForReadOnly(node) {\n    switch (node.typeAnnotation.type) {\n      case \"TSTupleType\":\n      case \"TSArrayType\":\n        return;\n\n      default:\n        this.raise(node.start, TSErrors.UnexpectedReadonly);\n    }\n  }\n\n  tsParseInferType() {\n    const node = this.startNode();\n    this.expectContextual(\"infer\");\n    const typeParameter = this.startNode();\n    typeParameter.name = this.parseIdentifierName(typeParameter.start);\n    node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n    return this.finishNode(node, \"TSInferType\");\n  }\n\n  tsParseTypeOperatorOrHigher() {\n    const operator = [\"keyof\", \"unique\", \"readonly\"].find(kw => this.isContextual(kw));\n    return operator ? this.tsParseTypeOperator(operator) : this.isContextual(\"infer\") ? this.tsParseInferType() : this.tsParseArrayTypeOrHigher();\n  }\n\n  tsParseUnionOrIntersectionType(kind, parseConstituentType, operator) {\n    this.eat(operator);\n    let type = parseConstituentType();\n\n    if (this.match(operator)) {\n      const types = [type];\n\n      while (this.eat(operator)) {\n        types.push(parseConstituentType());\n      }\n\n      const node = this.startNodeAtNode(type);\n      node.types = types;\n      type = this.finishNode(node, kind);\n    }\n\n    return type;\n  }\n\n  tsParseIntersectionTypeOrHigher() {\n    return this.tsParseUnionOrIntersectionType(\"TSIntersectionType\", this.tsParseTypeOperatorOrHigher.bind(this), types.bitwiseAND);\n  }\n\n  tsParseUnionTypeOrHigher() {\n    return this.tsParseUnionOrIntersectionType(\"TSUnionType\", this.tsParseIntersectionTypeOrHigher.bind(this), types.bitwiseOR);\n  }\n\n  tsIsStartOfFunctionType() {\n    if (this.isRelational(\"<\")) {\n      return true;\n    }\n\n    return this.match(types.parenL) && this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this));\n  }\n\n  tsSkipParameterStart() {\n    if (this.match(types.name) || this.match(types._this)) {\n      this.next();\n      return true;\n    }\n\n    if (this.match(types.braceL)) {\n      let braceStackCounter = 1;\n      this.next();\n\n      while (braceStackCounter > 0) {\n        if (this.match(types.braceL)) {\n          ++braceStackCounter;\n        } else if (this.match(types.braceR)) {\n          --braceStackCounter;\n        }\n\n        this.next();\n      }\n\n      return true;\n    }\n\n    if (this.match(types.bracketL)) {\n      let braceStackCounter = 1;\n      this.next();\n\n      while (braceStackCounter > 0) {\n        if (this.match(types.bracketL)) {\n          ++braceStackCounter;\n        } else if (this.match(types.bracketR)) {\n          --braceStackCounter;\n        }\n\n        this.next();\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  tsIsUnambiguouslyStartOfFunctionType() {\n    this.next();\n\n    if (this.match(types.parenR) || this.match(types.ellipsis)) {\n      return true;\n    }\n\n    if (this.tsSkipParameterStart()) {\n      if (this.match(types.colon) || this.match(types.comma) || this.match(types.question) || this.match(types.eq)) {\n        return true;\n      }\n\n      if (this.match(types.parenR)) {\n        this.next();\n\n        if (this.match(types.arrow)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  tsParseTypeOrTypePredicateAnnotation(returnToken) {\n    return this.tsInType(() => {\n      const t = this.startNode();\n      this.expect(returnToken);\n      const asserts = this.tsTryParse(this.tsParseTypePredicateAsserts.bind(this));\n\n      if (asserts && this.match(types._this)) {\n        let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n\n        if (thisTypePredicate.type === \"TSThisType\") {\n          const node = this.startNodeAtNode(t);\n          node.parameterName = thisTypePredicate;\n          node.asserts = true;\n          thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n        } else {\n          thisTypePredicate.asserts = true;\n        }\n\n        t.typeAnnotation = thisTypePredicate;\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      }\n\n      const typePredicateVariable = this.tsIsIdentifier() && this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n\n      if (!typePredicateVariable) {\n        if (!asserts) {\n          return this.tsParseTypeAnnotation(false, t);\n        }\n\n        const node = this.startNodeAtNode(t);\n        node.parameterName = this.parseIdentifier();\n        node.asserts = asserts;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      }\n\n      const type = this.tsParseTypeAnnotation(false);\n      const node = this.startNodeAtNode(t);\n      node.parameterName = typePredicateVariable;\n      node.typeAnnotation = type;\n      node.asserts = asserts;\n      t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    });\n  }\n\n  tsTryParseTypeOrTypePredicateAnnotation() {\n    return this.match(types.colon) ? this.tsParseTypeOrTypePredicateAnnotation(types.colon) : undefined;\n  }\n\n  tsTryParseTypeAnnotation() {\n    return this.match(types.colon) ? this.tsParseTypeAnnotation() : undefined;\n  }\n\n  tsTryParseType() {\n    return this.tsEatThenParseType(types.colon);\n  }\n\n  tsParseTypePredicatePrefix() {\n    const id = this.parseIdentifier();\n\n    if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) {\n      this.next();\n      return id;\n    }\n  }\n\n  tsParseTypePredicateAsserts() {\n    if (!this.match(types.name) || this.state.value !== \"asserts\" || this.hasPrecedingLineBreak()) {\n      return false;\n    }\n\n    const containsEsc = this.state.containsEsc;\n    this.next();\n\n    if (!this.match(types.name) && !this.match(types._this)) {\n      return false;\n    }\n\n    if (containsEsc) {\n      this.raise(this.state.lastTokStart, ErrorMessages.InvalidEscapedReservedWord, \"asserts\");\n    }\n\n    return true;\n  }\n\n  tsParseTypeAnnotation(eatColon = true, t = this.startNode()) {\n    this.tsInType(() => {\n      if (eatColon) this.expect(types.colon);\n      t.typeAnnotation = this.tsParseType();\n    });\n    return this.finishNode(t, \"TSTypeAnnotation\");\n  }\n\n  tsParseType() {\n    assert(this.state.inType);\n    const type = this.tsParseNonConditionalType();\n\n    if (this.hasPrecedingLineBreak() || !this.eat(types._extends)) {\n      return type;\n    }\n\n    const node = this.startNodeAtNode(type);\n    node.checkType = type;\n    node.extendsType = this.tsParseNonConditionalType();\n    this.expect(types.question);\n    node.trueType = this.tsParseType();\n    this.expect(types.colon);\n    node.falseType = this.tsParseType();\n    return this.finishNode(node, \"TSConditionalType\");\n  }\n\n  tsParseNonConditionalType() {\n    if (this.tsIsStartOfFunctionType()) {\n      return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n    }\n\n    if (this.match(types._new)) {\n      return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n    }\n\n    return this.tsParseUnionTypeOrHigher();\n  }\n\n  tsParseTypeAssertion() {\n    const node = this.startNode();\n\n    const _const = this.tsTryNextParseConstantContext();\n\n    node.typeAnnotation = _const || this.tsNextThenParseType();\n    this.expectRelational(\">\");\n    node.expression = this.parseMaybeUnary();\n    return this.finishNode(node, \"TSTypeAssertion\");\n  }\n\n  tsParseHeritageClause(descriptor) {\n    const originalStart = this.state.start;\n    const delimitedList = this.tsParseDelimitedList(\"HeritageClauseElement\", this.tsParseExpressionWithTypeArguments.bind(this));\n\n    if (!delimitedList.length) {\n      this.raise(originalStart, TSErrors.EmptyHeritageClauseType, descriptor);\n    }\n\n    return delimitedList;\n  }\n\n  tsParseExpressionWithTypeArguments() {\n    const node = this.startNode();\n    node.expression = this.tsParseEntityName(false);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSExpressionWithTypeArguments\");\n  }\n\n  tsParseInterfaceDeclaration(node) {\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, BIND_TS_INTERFACE, undefined, \"typescript interface declaration\");\n    node.typeParameters = this.tsTryParseTypeParameters();\n\n    if (this.eat(types._extends)) {\n      node.extends = this.tsParseHeritageClause(\"extends\");\n    }\n\n    const body = this.startNode();\n    body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n    node.body = this.finishNode(body, \"TSInterfaceBody\");\n    return this.finishNode(node, \"TSInterfaceDeclaration\");\n  }\n\n  tsParseTypeAliasDeclaration(node) {\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, BIND_TS_TYPE, undefined, \"typescript type alias\");\n    node.typeParameters = this.tsTryParseTypeParameters();\n    node.typeAnnotation = this.tsExpectThenParseType(types.eq);\n    this.semicolon();\n    return this.finishNode(node, \"TSTypeAliasDeclaration\");\n  }\n\n  tsInNoContext(cb) {\n    const oldContext = this.state.context;\n    this.state.context = [oldContext[0]];\n\n    try {\n      return cb();\n    } finally {\n      this.state.context = oldContext;\n    }\n  }\n\n  tsInType(cb) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n\n    try {\n      return cb();\n    } finally {\n      this.state.inType = oldInType;\n    }\n  }\n\n  tsEatThenParseType(token) {\n    return !this.match(token) ? undefined : this.tsNextThenParseType();\n  }\n\n  tsExpectThenParseType(token) {\n    return this.tsDoThenParseType(() => this.expect(token));\n  }\n\n  tsNextThenParseType() {\n    return this.tsDoThenParseType(() => this.next());\n  }\n\n  tsDoThenParseType(cb) {\n    return this.tsInType(() => {\n      cb();\n      return this.tsParseType();\n    });\n  }\n\n  tsParseEnumMember() {\n    const node = this.startNode();\n    node.id = this.match(types.string) ? this.parseExprAtom() : this.parseIdentifier(true);\n\n    if (this.eat(types.eq)) {\n      node.initializer = this.parseMaybeAssignAllowIn();\n    }\n\n    return this.finishNode(node, \"TSEnumMember\");\n  }\n\n  tsParseEnumDeclaration(node, isConst) {\n    if (isConst) node.const = true;\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, isConst ? BIND_TS_CONST_ENUM : BIND_TS_ENUM, undefined, \"typescript enum declaration\");\n    this.expect(types.braceL);\n    node.members = this.tsParseDelimitedList(\"EnumMembers\", this.tsParseEnumMember.bind(this));\n    this.expect(types.braceR);\n    return this.finishNode(node, \"TSEnumDeclaration\");\n  }\n\n  tsParseModuleBlock() {\n    const node = this.startNode();\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(types.braceL);\n    this.parseBlockOrModuleBlockBody(node.body = [], undefined, true, types.braceR);\n    this.scope.exit();\n    return this.finishNode(node, \"TSModuleBlock\");\n  }\n\n  tsParseModuleOrNamespaceDeclaration(node, nested = false) {\n    node.id = this.parseIdentifier();\n\n    if (!nested) {\n      this.checkLVal(node.id, BIND_TS_NAMESPACE, null, \"module or namespace declaration\");\n    }\n\n    if (this.eat(types.dot)) {\n      const inner = this.startNode();\n      this.tsParseModuleOrNamespaceDeclaration(inner, true);\n      node.body = inner;\n    } else {\n      this.scope.enter(SCOPE_TS_MODULE);\n      this.prodParam.enter(PARAM);\n      node.body = this.tsParseModuleBlock();\n      this.prodParam.exit();\n      this.scope.exit();\n    }\n\n    return this.finishNode(node, \"TSModuleDeclaration\");\n  }\n\n  tsParseAmbientExternalModuleDeclaration(node) {\n    if (this.isContextual(\"global\")) {\n      node.global = true;\n      node.id = this.parseIdentifier();\n    } else if (this.match(types.string)) {\n      node.id = this.parseExprAtom();\n    } else {\n      this.unexpected();\n    }\n\n    if (this.match(types.braceL)) {\n      this.scope.enter(SCOPE_TS_MODULE);\n      this.prodParam.enter(PARAM);\n      node.body = this.tsParseModuleBlock();\n      this.prodParam.exit();\n      this.scope.exit();\n    } else {\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"TSModuleDeclaration\");\n  }\n\n  tsParseImportEqualsDeclaration(node, isExport) {\n    node.isExport = isExport || false;\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, BIND_LEXICAL, undefined, \"import equals declaration\");\n    this.expect(types.eq);\n    node.moduleReference = this.tsParseModuleReference();\n    this.semicolon();\n    return this.finishNode(node, \"TSImportEqualsDeclaration\");\n  }\n\n  tsIsExternalModuleReference() {\n    return this.isContextual(\"require\") && this.lookaheadCharCode() === 40;\n  }\n\n  tsParseModuleReference() {\n    return this.tsIsExternalModuleReference() ? this.tsParseExternalModuleReference() : this.tsParseEntityName(false);\n  }\n\n  tsParseExternalModuleReference() {\n    const node = this.startNode();\n    this.expectContextual(\"require\");\n    this.expect(types.parenL);\n\n    if (!this.match(types.string)) {\n      throw this.unexpected();\n    }\n\n    node.expression = this.parseExprAtom();\n    this.expect(types.parenR);\n    return this.finishNode(node, \"TSExternalModuleReference\");\n  }\n\n  tsLookAhead(f) {\n    const state = this.state.clone();\n    const res = f();\n    this.state = state;\n    return res;\n  }\n\n  tsTryParseAndCatch(f) {\n    const result = this.tryParse(abort => f() || abort());\n    if (result.aborted || !result.node) return undefined;\n    if (result.error) this.state = result.failState;\n    return result.node;\n  }\n\n  tsTryParse(f) {\n    const state = this.state.clone();\n    const result = f();\n\n    if (result !== undefined && result !== false) {\n      return result;\n    } else {\n      this.state = state;\n      return undefined;\n    }\n  }\n\n  tsTryParseDeclare(nany) {\n    if (this.isLineTerminator()) {\n      return;\n    }\n\n    let starttype = this.state.type;\n    let kind;\n\n    if (this.isContextual(\"let\")) {\n      starttype = types._var;\n      kind = \"let\";\n    }\n\n    switch (starttype) {\n      case types._function:\n        return this.parseFunctionStatement(nany, false, true);\n\n      case types._class:\n        nany.declare = true;\n        return this.parseClass(nany, true, false);\n\n      case types._const:\n        if (this.match(types._const) && this.isLookaheadContextual(\"enum\")) {\n          this.expect(types._const);\n          this.expectContextual(\"enum\");\n          return this.tsParseEnumDeclaration(nany, true);\n        }\n\n      case types._var:\n        kind = kind || this.state.value;\n        return this.parseVarStatement(nany, kind);\n\n      case types.name:\n        {\n          const value = this.state.value;\n\n          if (value === \"global\") {\n            return this.tsParseAmbientExternalModuleDeclaration(nany);\n          } else {\n            return this.tsParseDeclaration(nany, value, true);\n          }\n        }\n    }\n  }\n\n  tsTryParseExportDeclaration() {\n    return this.tsParseDeclaration(this.startNode(), this.state.value, true);\n  }\n\n  tsParseExpressionStatement(node, expr) {\n    switch (expr.name) {\n      case \"declare\":\n        {\n          const declaration = this.tsTryParseDeclare(node);\n\n          if (declaration) {\n            declaration.declare = true;\n            return declaration;\n          }\n\n          break;\n        }\n\n      case \"global\":\n        if (this.match(types.braceL)) {\n          this.scope.enter(SCOPE_TS_MODULE);\n          this.prodParam.enter(PARAM);\n          const mod = node;\n          mod.global = true;\n          mod.id = expr;\n          mod.body = this.tsParseModuleBlock();\n          this.scope.exit();\n          this.prodParam.exit();\n          return this.finishNode(mod, \"TSModuleDeclaration\");\n        }\n\n        break;\n\n      default:\n        return this.tsParseDeclaration(node, expr.name, false);\n    }\n  }\n\n  tsParseDeclaration(node, value, next) {\n    switch (value) {\n      case \"abstract\":\n        if (this.tsCheckLineTerminatorAndMatch(types._class, next)) {\n          const cls = node;\n          cls.abstract = true;\n\n          if (next) {\n            this.next();\n\n            if (!this.match(types._class)) {\n              this.unexpected(null, types._class);\n            }\n          }\n\n          return this.parseClass(cls, true, false);\n        }\n\n        break;\n\n      case \"enum\":\n        if (next || this.match(types.name)) {\n          if (next) this.next();\n          return this.tsParseEnumDeclaration(node, false);\n        }\n\n        break;\n\n      case \"interface\":\n        if (this.tsCheckLineTerminatorAndMatch(types.name, next)) {\n          if (next) this.next();\n          return this.tsParseInterfaceDeclaration(node);\n        }\n\n        break;\n\n      case \"module\":\n        if (next) this.next();\n\n        if (this.match(types.string)) {\n          return this.tsParseAmbientExternalModuleDeclaration(node);\n        } else if (this.tsCheckLineTerminatorAndMatch(types.name, next)) {\n          return this.tsParseModuleOrNamespaceDeclaration(node);\n        }\n\n        break;\n\n      case \"namespace\":\n        if (this.tsCheckLineTerminatorAndMatch(types.name, next)) {\n          if (next) this.next();\n          return this.tsParseModuleOrNamespaceDeclaration(node);\n        }\n\n        break;\n\n      case \"type\":\n        if (this.tsCheckLineTerminatorAndMatch(types.name, next)) {\n          if (next) this.next();\n          return this.tsParseTypeAliasDeclaration(node);\n        }\n\n        break;\n    }\n  }\n\n  tsCheckLineTerminatorAndMatch(tokenType, next) {\n    return (next || this.match(tokenType)) && !this.isLineTerminator();\n  }\n\n  tsTryParseGenericAsyncArrowFunction(startPos, startLoc) {\n    if (!this.isRelational(\"<\")) {\n      return undefined;\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldYieldPos = this.state.yieldPos;\n    const oldAwaitPos = this.state.awaitPos;\n    this.state.maybeInArrowParameters = true;\n    this.state.yieldPos = -1;\n    this.state.awaitPos = -1;\n    const res = this.tsTryParseAndCatch(() => {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.typeParameters = this.tsParseTypeParameters();\n      super.parseFunctionParams(node);\n      node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n      this.expect(types.arrow);\n      return node;\n    });\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.yieldPos = oldYieldPos;\n    this.state.awaitPos = oldAwaitPos;\n\n    if (!res) {\n      return undefined;\n    }\n\n    return this.parseArrowExpression(res, null, true);\n  }\n\n  tsParseTypeArguments() {\n    const node = this.startNode();\n    node.params = this.tsInType(() => this.tsInNoContext(() => {\n      this.expectRelational(\"<\");\n      return this.tsParseDelimitedList(\"TypeParametersOrArguments\", this.tsParseType.bind(this));\n    }));\n    this.state.exprAllowed = false;\n    this.expectRelational(\">\");\n    return this.finishNode(node, \"TSTypeParameterInstantiation\");\n  }\n\n  tsIsDeclarationStart() {\n    if (this.match(types.name)) {\n      switch (this.state.value) {\n        case \"abstract\":\n        case \"declare\":\n        case \"enum\":\n        case \"interface\":\n        case \"module\":\n        case \"namespace\":\n        case \"type\":\n          return true;\n      }\n    }\n\n    return false;\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.tsIsDeclarationStart()) return false;\n    return super.isExportDefaultSpecifier();\n  }\n\n  parseAssignableListItem(allowModifiers, decorators) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let accessibility;\n    let readonly = false;\n\n    if (allowModifiers) {\n      accessibility = this.parseAccessModifier();\n      readonly = !!this.tsParseModifier([\"readonly\"]);\n    }\n\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n\n    if (accessibility || readonly) {\n      const pp = this.startNodeAt(startPos, startLoc);\n\n      if (decorators.length) {\n        pp.decorators = decorators;\n      }\n\n      if (accessibility) pp.accessibility = accessibility;\n      if (readonly) pp.readonly = readonly;\n\n      if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n        this.raise(pp.start, TSErrors.UnsupportedParameterPropertyKind);\n      }\n\n      pp.parameter = elt;\n      return this.finishNode(pp, \"TSParameterProperty\");\n    }\n\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n\n    return elt;\n  }\n\n  parseFunctionBodyAndFinish(node, type, isMethod = false) {\n    if (this.match(types.colon)) {\n      node.returnType = this.tsParseTypeOrTypePredicateAnnotation(types.colon);\n    }\n\n    const bodilessType = type === \"FunctionDeclaration\" ? \"TSDeclareFunction\" : type === \"ClassMethod\" ? \"TSDeclareMethod\" : undefined;\n\n    if (bodilessType && !this.match(types.braceL) && this.isLineTerminator()) {\n      this.finishNode(node, bodilessType);\n      return;\n    }\n\n    super.parseFunctionBodyAndFinish(node, type, isMethod);\n  }\n\n  registerFunctionStatementId(node) {\n    if (!node.body && node.id) {\n      this.checkLVal(node.id, BIND_TS_AMBIENT, null, \"function name\");\n    } else {\n      super.registerFunctionStatementId(...arguments);\n    }\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    if (!this.hasPrecedingLineBreak() && this.match(types.bang)) {\n      this.state.exprAllowed = false;\n      this.next();\n      const nonNullExpression = this.startNodeAt(startPos, startLoc);\n      nonNullExpression.expression = base;\n      return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n    }\n\n    if (this.isRelational(\"<\")) {\n      const result = this.tsTryParseAndCatch(() => {\n        if (!noCalls && this.atPossibleAsyncArrow(base)) {\n          const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(startPos, startLoc);\n\n          if (asyncArrowFn) {\n            return asyncArrowFn;\n          }\n        }\n\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n        const typeArguments = this.tsParseTypeArguments();\n\n        if (typeArguments) {\n          if (!noCalls && this.eat(types.parenL)) {\n            node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n            node.typeParameters = typeArguments;\n            return this.finishCallExpression(node, state.optionalChainMember);\n          } else if (this.match(types.backQuote)) {\n            const result = this.parseTaggedTemplateExpression(base, startPos, startLoc, state);\n            result.typeParameters = typeArguments;\n            return result;\n          }\n        }\n\n        this.unexpected();\n      });\n      if (result) return result;\n    }\n\n    return super.parseSubscript(base, startPos, startLoc, noCalls, state);\n  }\n\n  parseNewArguments(node) {\n    if (this.isRelational(\"<\")) {\n      const typeParameters = this.tsTryParseAndCatch(() => {\n        const args = this.tsParseTypeArguments();\n        if (!this.match(types.parenL)) this.unexpected();\n        return args;\n      });\n\n      if (typeParameters) {\n        node.typeParameters = typeParameters;\n      }\n    }\n\n    super.parseNewArguments(node);\n  }\n\n  parseExprOp(left, leftStartPos, leftStartLoc, minPrec) {\n    if (nonNull(types._in.binop) > minPrec && !this.hasPrecedingLineBreak() && this.isContextual(\"as\")) {\n      const node = this.startNodeAt(leftStartPos, leftStartLoc);\n      node.expression = left;\n\n      const _const = this.tsTryNextParseConstantContext();\n\n      if (_const) {\n        node.typeAnnotation = _const;\n      } else {\n        node.typeAnnotation = this.tsNextThenParseType();\n      }\n\n      this.finishNode(node, \"TSAsExpression\");\n      this.reScan_lt_gt();\n      return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n    }\n\n    return super.parseExprOp(left, leftStartPos, leftStartLoc, minPrec);\n  }\n\n  checkReservedWord(word, startLoc, checkKeywords, isBinding) {}\n\n  checkDuplicateExports() {}\n\n  parseImport(node) {\n    if (this.match(types.name) || this.match(types.star) || this.match(types.braceL)) {\n      const ahead = this.lookahead();\n\n      if (this.match(types.name) && ahead.type === types.eq) {\n        return this.tsParseImportEqualsDeclaration(node);\n      }\n\n      if (this.isContextual(\"type\") && ahead.type !== types.comma && !(ahead.type === types.name && ahead.value === \"from\")) {\n        node.importKind = \"type\";\n        this.next();\n      } else {\n        node.importKind = \"value\";\n      }\n    }\n\n    const importNode = super.parseImport(node);\n\n    if (importNode.importKind === \"type\" && importNode.specifiers.length > 1 && importNode.specifiers[0].type === \"ImportDefaultSpecifier\") {\n      this.raise(importNode.start, \"A type-only import can specify a default import or named bindings, but not both.\");\n    }\n\n    return importNode;\n  }\n\n  parseExport(node) {\n    if (this.match(types._import)) {\n      this.expect(types._import);\n      return this.tsParseImportEqualsDeclaration(node, true);\n    } else if (this.eat(types.eq)) {\n      const assign = node;\n      assign.expression = this.parseExpression();\n      this.semicolon();\n      return this.finishNode(assign, \"TSExportAssignment\");\n    } else if (this.eatContextual(\"as\")) {\n      const decl = node;\n      this.expectContextual(\"namespace\");\n      decl.id = this.parseIdentifier();\n      this.semicolon();\n      return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n    } else {\n      if (this.isContextual(\"type\") && this.lookahead().type === types.braceL) {\n        this.next();\n        node.exportKind = \"type\";\n      } else {\n        node.exportKind = \"value\";\n      }\n\n      return super.parseExport(node);\n    }\n  }\n\n  isAbstractClass() {\n    return this.isContextual(\"abstract\") && this.lookahead().type === types._class;\n  }\n\n  parseExportDefaultExpression() {\n    if (this.isAbstractClass()) {\n      const cls = this.startNode();\n      this.next();\n      this.parseClass(cls, true, true);\n      cls.abstract = true;\n      return cls;\n    }\n\n    if (this.state.value === \"interface\") {\n      const result = this.tsParseDeclaration(this.startNode(), this.state.value, true);\n      if (result) return result;\n    }\n\n    return super.parseExportDefaultExpression();\n  }\n\n  parseStatementContent(context, topLevel) {\n    if (this.state.type === types._const) {\n      const ahead = this.lookahead();\n\n      if (ahead.type === types.name && ahead.value === \"enum\") {\n        const node = this.startNode();\n        this.expect(types._const);\n        this.expectContextual(\"enum\");\n        return this.tsParseEnumDeclaration(node, true);\n      }\n    }\n\n    return super.parseStatementContent(context, topLevel);\n  }\n\n  parseAccessModifier() {\n    return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n  }\n\n  parseClassMember(classBody, member, state, constructorAllowsSuper) {\n    this.tsParseModifiers(member, [\"declare\"]);\n    const accessibility = this.parseAccessModifier();\n    if (accessibility) member.accessibility = accessibility;\n    this.tsParseModifiers(member, [\"declare\"]);\n    super.parseClassMember(classBody, member, state, constructorAllowsSuper);\n  }\n\n  parseClassMemberWithIsStatic(classBody, member, state, isStatic, constructorAllowsSuper) {\n    this.tsParseModifiers(member, [\"abstract\", \"readonly\", \"declare\"]);\n    const idx = this.tsTryParseIndexSignature(member);\n\n    if (idx) {\n      classBody.body.push(idx);\n\n      if (member.abstract) {\n        this.raise(member.start, TSErrors.IndexSignatureHasAbstract);\n      }\n\n      if (isStatic) {\n        this.raise(member.start, TSErrors.IndexSignatureHasStatic);\n      }\n\n      if (member.accessibility) {\n        this.raise(member.start, TSErrors.IndexSignatureHasAccessibility, member.accessibility);\n      }\n\n      return;\n    }\n\n    super.parseClassMemberWithIsStatic(classBody, member, state, isStatic, constructorAllowsSuper);\n  }\n\n  parsePostMemberNameModifiers(methodOrProp) {\n    const optional = this.eat(types.question);\n    if (optional) methodOrProp.optional = true;\n\n    if (methodOrProp.readonly && this.match(types.parenL)) {\n      this.raise(methodOrProp.start, TSErrors.ClassMethodHasReadonly);\n    }\n\n    if (methodOrProp.declare && this.match(types.parenL)) {\n      this.raise(methodOrProp.start, TSErrors.ClassMethodHasDeclare);\n    }\n  }\n\n  parseExpressionStatement(node, expr) {\n    const decl = expr.type === \"Identifier\" ? this.tsParseExpressionStatement(node, expr) : undefined;\n    return decl || super.parseExpressionStatement(node, expr);\n  }\n\n  shouldParseExportDeclaration() {\n    if (this.tsIsDeclarationStart()) return true;\n    return super.shouldParseExportDeclaration();\n  }\n\n  parseConditional(expr, startPos, startLoc, refNeedsArrowPos) {\n    if (!refNeedsArrowPos || !this.match(types.question)) {\n      return super.parseConditional(expr, startPos, startLoc, refNeedsArrowPos);\n    }\n\n    const result = this.tryParse(() => super.parseConditional(expr, startPos, startLoc));\n\n    if (!result.node) {\n      refNeedsArrowPos.start = result.error.pos || this.state.start;\n      return expr;\n    }\n\n    if (result.error) this.state = result.failState;\n    return result.node;\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    node = super.parseParenItem(node, startPos, startLoc);\n\n    if (this.eat(types.question)) {\n      node.optional = true;\n      this.resetEndLocation(node);\n    }\n\n    if (this.match(types.colon)) {\n      const typeCastNode = this.startNodeAt(startPos, startLoc);\n      typeCastNode.expression = node;\n      typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n      return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n    }\n\n    return node;\n  }\n\n  parseExportDeclaration(node) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const isDeclare = this.eatContextual(\"declare\");\n    let declaration;\n\n    if (this.match(types.name)) {\n      declaration = this.tsTryParseExportDeclaration();\n    }\n\n    if (!declaration) {\n      declaration = super.parseExportDeclaration(node);\n    }\n\n    if (declaration && (declaration.type === \"TSInterfaceDeclaration\" || declaration.type === \"TSTypeAliasDeclaration\" || isDeclare)) {\n      node.exportKind = \"type\";\n    }\n\n    if (declaration && isDeclare) {\n      this.resetStartLocation(declaration, startPos, startLoc);\n      declaration.declare = true;\n    }\n\n    return declaration;\n  }\n\n  parseClassId(node, isStatement, optionalId) {\n    if ((!isStatement || optionalId) && this.isContextual(\"implements\")) {\n      return;\n    }\n\n    super.parseClassId(node, isStatement, optionalId, node.declare ? BIND_TS_AMBIENT : BIND_CLASS);\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) node.typeParameters = typeParameters;\n  }\n\n  parseClassPropertyAnnotation(node) {\n    if (!node.optional && this.eat(types.bang)) {\n      node.definite = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) node.typeAnnotation = type;\n  }\n\n  parseClassProperty(node) {\n    this.parseClassPropertyAnnotation(node);\n\n    if (node.declare && this.match(types.equal)) {\n      this.raise(this.state.start, TSErrors.DeclareClassFieldHasInitializer);\n    }\n\n    return super.parseClassProperty(node);\n  }\n\n  parseClassPrivateProperty(node) {\n    if (node.abstract) {\n      this.raise(node.start, TSErrors.PrivateElementHasAbstract);\n    }\n\n    if (node.accessibility) {\n      this.raise(node.start, TSErrors.PrivateElementHasAccessibility, node.accessibility);\n    }\n\n    this.parseClassPropertyAnnotation(node);\n    return super.parseClassPrivateProperty(node);\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) method.typeParameters = typeParameters;\n    super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) method.typeParameters = typeParameters;\n    super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n  }\n\n  parseClassSuper(node) {\n    super.parseClassSuper(node);\n\n    if (node.superClass && this.isRelational(\"<\")) {\n      node.superTypeParameters = this.tsParseTypeArguments();\n    }\n\n    if (this.eatContextual(\"implements\")) {\n      node.implements = this.tsParseHeritageClause(\"implements\");\n    }\n  }\n\n  parseObjPropValue(prop, ...args) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) prop.typeParameters = typeParameters;\n    super.parseObjPropValue(prop, ...args);\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) node.typeParameters = typeParameters;\n    super.parseFunctionParams(node, allowModifiers);\n  }\n\n  parseVarId(decl, kind) {\n    super.parseVarId(decl, kind);\n\n    if (decl.id.type === \"Identifier\" && this.eat(types.bang)) {\n      decl.definite = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n\n    if (type) {\n      decl.id.typeAnnotation = type;\n      this.resetEndLocation(decl.id);\n    }\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    if (this.match(types.colon)) {\n      node.returnType = this.tsParseTypeAnnotation();\n    }\n\n    return super.parseAsyncArrowFromCallExpression(node, call);\n  }\n\n  parseMaybeAssign(...args) {\n    var _jsx, _jsx2, _typeCast, _jsx3, _typeCast2, _jsx4, _typeCast3;\n\n    let state;\n    let jsx;\n    let typeCast;\n\n    if (this.match(types.jsxTagStart)) {\n      state = this.state.clone();\n      jsx = this.tryParse(() => super.parseMaybeAssign(...args), state);\n      if (!jsx.error) return jsx.node;\n      const {\n        context\n      } = this.state;\n\n      if (context[context.length - 1] === types$1.j_oTag) {\n        context.length -= 2;\n      } else if (context[context.length - 1] === types$1.j_expr) {\n        context.length -= 1;\n      }\n    }\n\n    if (!((_jsx = jsx) == null ? void 0 : _jsx.error) && !this.isRelational(\"<\")) {\n      return super.parseMaybeAssign(...args);\n    }\n\n    let typeParameters;\n    state = state || this.state.clone();\n    const arrow = this.tryParse(abort => {\n      var _typeParameters;\n\n      typeParameters = this.tsParseTypeParameters();\n      const expr = super.parseMaybeAssign(...args);\n\n      if (expr.type !== \"ArrowFunctionExpression\" || expr.extra && expr.extra.parenthesized) {\n        abort();\n      }\n\n      if (((_typeParameters = typeParameters) == null ? void 0 : _typeParameters.params.length) !== 0) {\n        this.resetStartLocationFromNode(expr, typeParameters);\n      }\n\n      expr.typeParameters = typeParameters;\n      return expr;\n    }, state);\n    if (!arrow.error && !arrow.aborted) return arrow.node;\n\n    if (!jsx) {\n      assert(!this.hasPlugin(\"jsx\"));\n      typeCast = this.tryParse(() => super.parseMaybeAssign(...args), state);\n      if (!typeCast.error) return typeCast.node;\n    }\n\n    if ((_jsx2 = jsx) == null ? void 0 : _jsx2.node) {\n      this.state = jsx.failState;\n      return jsx.node;\n    }\n\n    if (arrow.node) {\n      this.state = arrow.failState;\n      return arrow.node;\n    }\n\n    if ((_typeCast = typeCast) == null ? void 0 : _typeCast.node) {\n      this.state = typeCast.failState;\n      return typeCast.node;\n    }\n\n    if ((_jsx3 = jsx) == null ? void 0 : _jsx3.thrown) throw jsx.error;\n    if (arrow.thrown) throw arrow.error;\n    if ((_typeCast2 = typeCast) == null ? void 0 : _typeCast2.thrown) throw typeCast.error;\n    throw ((_jsx4 = jsx) == null ? void 0 : _jsx4.error) || arrow.error || ((_typeCast3 = typeCast) == null ? void 0 : _typeCast3.error);\n  }\n\n  parseMaybeUnary(refExpressionErrors) {\n    if (!this.hasPlugin(\"jsx\") && this.isRelational(\"<\")) {\n      return this.tsParseTypeAssertion();\n    } else {\n      return super.parseMaybeUnary(refExpressionErrors);\n    }\n  }\n\n  parseArrow(node) {\n    if (this.match(types.colon)) {\n      const result = this.tryParse(abort => {\n        const returnType = this.tsParseTypeOrTypePredicateAnnotation(types.colon);\n        if (this.canInsertSemicolon() || !this.match(types.arrow)) abort();\n        return returnType;\n      });\n      if (result.aborted) return;\n\n      if (!result.thrown) {\n        if (result.error) this.state = result.failState;\n        node.returnType = result.node;\n      }\n    }\n\n    return super.parseArrow(node);\n  }\n\n  parseAssignableListItemTypes(param) {\n    if (this.eat(types.question)) {\n      if (param.type !== \"Identifier\") {\n        this.raise(param.start, TSErrors.PatternIsOptional);\n      }\n\n      param.optional = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) param.typeAnnotation = type;\n    this.resetEndLocation(param);\n    return param;\n  }\n\n  toAssignable(node) {\n    switch (node.type) {\n      case \"TSTypeCastExpression\":\n        return super.toAssignable(this.typeCastToParameter(node));\n\n      case \"TSParameterProperty\":\n        return super.toAssignable(node);\n\n      case \"TSAsExpression\":\n      case \"TSNonNullExpression\":\n      case \"TSTypeAssertion\":\n        node.expression = this.toAssignable(node.expression);\n        return node;\n\n      default:\n        return super.toAssignable(node);\n    }\n  }\n\n  checkLVal(expr, bindingType = BIND_NONE, checkClashes, contextDescription) {\n    switch (expr.type) {\n      case \"TSTypeCastExpression\":\n        return;\n\n      case \"TSParameterProperty\":\n        this.checkLVal(expr.parameter, bindingType, checkClashes, \"parameter property\");\n        return;\n\n      case \"TSAsExpression\":\n      case \"TSNonNullExpression\":\n      case \"TSTypeAssertion\":\n        this.checkLVal(expr.expression, bindingType, checkClashes, contextDescription);\n        return;\n\n      default:\n        super.checkLVal(expr, bindingType, checkClashes, contextDescription);\n        return;\n    }\n  }\n\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case types._this:\n        return this.parseIdentifier(true);\n\n      default:\n        return super.parseBindingAtom();\n    }\n  }\n\n  parseMaybeDecoratorArguments(expr) {\n    if (this.isRelational(\"<\")) {\n      const typeArguments = this.tsParseTypeArguments();\n\n      if (this.match(types.parenL)) {\n        const call = super.parseMaybeDecoratorArguments(expr);\n        call.typeParameters = typeArguments;\n        return call;\n      }\n\n      this.unexpected(this.state.start, types.parenL);\n    }\n\n    return super.parseMaybeDecoratorArguments(expr);\n  }\n\n  isClassMethod() {\n    return this.isRelational(\"<\") || super.isClassMethod();\n  }\n\n  isClassProperty() {\n    return this.match(types.bang) || this.match(types.colon) || super.isClassProperty();\n  }\n\n  parseMaybeDefault(...args) {\n    const node = super.parseMaybeDefault(...args);\n\n    if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n      this.raise(node.typeAnnotation.start, TSErrors.TypeAnnotationAfterAssign);\n    }\n\n    return node;\n  }\n\n  getTokenFromCode(code) {\n    if (this.state.inType && (code === 62 || code === 60)) {\n      return this.finishOp(types.relational, 1);\n    } else {\n      return super.getTokenFromCode(code);\n    }\n  }\n\n  reScan_lt_gt() {\n    if (this.match(types.relational)) {\n      const code = this.input.charCodeAt(this.state.start);\n\n      if (code === 60 || code === 62) {\n        this.state.pos -= 1;\n        this.readToken_lt_gt(code);\n      }\n    }\n  }\n\n  toAssignableList(exprList) {\n    for (let i = 0; i < exprList.length; i++) {\n      const expr = exprList[i];\n      if (!expr) continue;\n\n      switch (expr.type) {\n        case \"TSTypeCastExpression\":\n          exprList[i] = this.typeCastToParameter(expr);\n          break;\n\n        case \"TSAsExpression\":\n        case \"TSTypeAssertion\":\n          if (!this.state.maybeInArrowParameters) {\n            exprList[i] = this.typeCastToParameter(expr);\n          } else {\n            this.raise(expr.start, TSErrors.UnexpectedTypeCastInParameter);\n          }\n\n          break;\n      }\n    }\n\n    return super.toAssignableList(...arguments);\n  }\n\n  typeCastToParameter(node) {\n    node.expression.typeAnnotation = node.typeAnnotation;\n    this.resetEndLocation(node.expression, node.typeAnnotation.end, node.typeAnnotation.loc.end);\n    return node.expression;\n  }\n\n  toReferencedList(exprList, isInParens) {\n    for (let i = 0; i < exprList.length; i++) {\n      const expr = exprList[i];\n\n      if ((expr == null ? void 0 : expr.type) === \"TSTypeCastExpression\") {\n        this.raise(expr.start, TSErrors.UnexpectedTypeAnnotation);\n      }\n    }\n\n    return exprList;\n  }\n\n  shouldParseArrow() {\n    return this.match(types.colon) || super.shouldParseArrow();\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(types.colon) || super.shouldParseAsyncArrow();\n  }\n\n  canHaveLeadingDecorator() {\n    return super.canHaveLeadingDecorator() || this.isAbstractClass();\n  }\n\n  jsxParseOpeningElementAfterName(node) {\n    if (this.isRelational(\"<\")) {\n      const typeArguments = this.tsTryParseAndCatch(() => this.tsParseTypeArguments());\n      if (typeArguments) node.typeParameters = typeArguments;\n    }\n\n    return super.jsxParseOpeningElementAfterName(node);\n  }\n\n  getGetterSetterExpectedParamCount(method) {\n    const baseCount = super.getGetterSetterExpectedParamCount(method);\n    const firstParam = method.params[0];\n    const hasContextParam = firstParam && firstParam.type === \"Identifier\" && firstParam.name === \"this\";\n    return hasContextParam ? baseCount + 1 : baseCount;\n  }\n\n  parseCatchClauseParam() {\n    const param = super.parseCatchClauseParam();\n    const type = this.tsTryParseTypeAnnotation();\n\n    if (type) {\n      param.typeAnnotation = type;\n      this.resetEndLocation(param);\n    }\n\n    return param;\n  }\n\n};\n\ntypes.placeholder = new TokenType(\"%%\", {\n  startsExpr: true\n});\n\nvar placeholders = superClass => class extends superClass {\n  parsePlaceholder(expectedNode) {\n    if (this.match(types.placeholder)) {\n      const node = this.startNode();\n      this.next();\n      this.assertNoSpace(\"Unexpected space in placeholder.\");\n      node.name = super.parseIdentifier(true);\n      this.assertNoSpace(\"Unexpected space in placeholder.\");\n      this.expect(types.placeholder);\n      return this.finishPlaceholder(node, expectedNode);\n    }\n  }\n\n  finishPlaceholder(node, expectedNode) {\n    const isFinished = !!(node.expectedNode && node.type === \"Placeholder\");\n    node.expectedNode = expectedNode;\n    return isFinished ? node : this.finishNode(node, \"Placeholder\");\n  }\n\n  getTokenFromCode(code) {\n    if (code === 37 && this.input.charCodeAt(this.state.pos + 1) === 37) {\n      return this.finishOp(types.placeholder, 2);\n    }\n\n    return super.getTokenFromCode(...arguments);\n  }\n\n  parseExprAtom() {\n    return this.parsePlaceholder(\"Expression\") || super.parseExprAtom(...arguments);\n  }\n\n  parseIdentifier() {\n    return this.parsePlaceholder(\"Identifier\") || super.parseIdentifier(...arguments);\n  }\n\n  checkReservedWord(word) {\n    if (word !== undefined) super.checkReservedWord(...arguments);\n  }\n\n  parseBindingAtom() {\n    return this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom(...arguments);\n  }\n\n  checkLVal(expr) {\n    if (expr.type !== \"Placeholder\") super.checkLVal(...arguments);\n  }\n\n  toAssignable(node) {\n    if (node && node.type === \"Placeholder\" && node.expectedNode === \"Expression\") {\n      node.expectedNode = \"Pattern\";\n      return node;\n    }\n\n    return super.toAssignable(...arguments);\n  }\n\n  verifyBreakContinue(node) {\n    if (node.label && node.label.type === \"Placeholder\") return;\n    super.verifyBreakContinue(...arguments);\n  }\n\n  parseExpressionStatement(node, expr) {\n    if (expr.type !== \"Placeholder\" || expr.extra && expr.extra.parenthesized) {\n      return super.parseExpressionStatement(...arguments);\n    }\n\n    if (this.match(types.colon)) {\n      const stmt = node;\n      stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n      this.next();\n      stmt.body = this.parseStatement(\"label\");\n      return this.finishNode(stmt, \"LabeledStatement\");\n    }\n\n    this.semicolon();\n    node.name = expr.name;\n    return this.finishPlaceholder(node, \"Statement\");\n  }\n\n  parseBlock() {\n    return this.parsePlaceholder(\"BlockStatement\") || super.parseBlock(...arguments);\n  }\n\n  parseFunctionId() {\n    return this.parsePlaceholder(\"Identifier\") || super.parseFunctionId(...arguments);\n  }\n\n  parseClass(node, isStatement, optionalId) {\n    const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n    this.next();\n    this.takeDecorators(node);\n    const oldStrict = this.state.strict;\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n\n    if (placeholder) {\n      if (this.match(types._extends) || this.match(types.placeholder) || this.match(types.braceL)) {\n        node.id = placeholder;\n      } else if (optionalId || !isStatement) {\n        node.id = null;\n        node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n        return this.finishNode(node, type);\n      } else {\n        this.unexpected(null, \"A class name is required\");\n      }\n    } else {\n      this.parseClassId(node, isStatement, optionalId);\n    }\n\n    this.parseClassSuper(node);\n    node.body = this.parsePlaceholder(\"ClassBody\") || this.parseClassBody(!!node.superClass, oldStrict);\n    return this.finishNode(node, type);\n  }\n\n  parseExport(node) {\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n    if (!placeholder) return super.parseExport(...arguments);\n\n    if (!this.isContextual(\"from\") && !this.match(types.comma)) {\n      node.specifiers = [];\n      node.source = null;\n      node.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    this.expectPlugin(\"exportDefaultFrom\");\n    const specifier = this.startNode();\n    specifier.exported = placeholder;\n    node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n    return super.parseExport(node);\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.match(types._default)) {\n      const next = this.nextTokenStart();\n\n      if (this.isUnparsedContextual(next, \"from\")) {\n        if (this.input.startsWith(types.placeholder.label, this.nextTokenStartSince(next + 4))) {\n          return true;\n        }\n      }\n    }\n\n    return super.isExportDefaultSpecifier();\n  }\n\n  maybeParseExportDefaultSpecifier(node) {\n    if (node.specifiers && node.specifiers.length > 0) {\n      return true;\n    }\n\n    return super.maybeParseExportDefaultSpecifier(...arguments);\n  }\n\n  checkExport(node) {\n    const {\n      specifiers\n    } = node;\n\n    if (specifiers == null ? void 0 : specifiers.length) {\n      node.specifiers = specifiers.filter(node => node.exported.type === \"Placeholder\");\n    }\n\n    super.checkExport(node);\n    node.specifiers = specifiers;\n  }\n\n  parseImport(node) {\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n    if (!placeholder) return super.parseImport(...arguments);\n    node.specifiers = [];\n\n    if (!this.isContextual(\"from\") && !this.match(types.comma)) {\n      node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n\n    const specifier = this.startNodeAtNode(placeholder);\n    specifier.local = placeholder;\n    this.finishNode(specifier, \"ImportDefaultSpecifier\");\n    node.specifiers.push(specifier);\n\n    if (this.eat(types.comma)) {\n      const hasStarImport = this.maybeParseStarImportSpecifier(node);\n      if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n    }\n\n    this.expectContextual(\"from\");\n    node.source = this.parseImportSource();\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource() {\n    return this.parsePlaceholder(\"StringLiteral\") || super.parseImportSource(...arguments);\n  }\n\n};\n\nvar v8intrinsic = superClass => class extends superClass {\n  parseV8Intrinsic() {\n    if (this.match(types.modulo)) {\n      const v8IntrinsicStart = this.state.start;\n      const node = this.startNode();\n      this.eat(types.modulo);\n\n      if (this.match(types.name)) {\n        const name = this.parseIdentifierName(this.state.start);\n        const identifier = this.createIdentifier(node, name);\n        identifier.type = \"V8IntrinsicIdentifier\";\n\n        if (this.match(types.parenL)) {\n          return identifier;\n        }\n      }\n\n      this.unexpected(v8IntrinsicStart);\n    }\n  }\n\n  parseExprAtom() {\n    return this.parseV8Intrinsic() || super.parseExprAtom(...arguments);\n  }\n\n};\n\nfunction hasPlugin(plugins, name) {\n  return plugins.some(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n}\n\nfunction getPluginOption(plugins, name, option) {\n  const plugin = plugins.find(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n\n  if (plugin && Array.isArray(plugin)) {\n    return plugin[1][option];\n  }\n\n  return null;\n}\n\nconst PIPELINE_PROPOSALS = [\"minimal\", \"smart\", \"fsharp\"];\nconst RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\n\nfunction validatePlugins(plugins) {\n  if (hasPlugin(plugins, \"decorators\")) {\n    if (hasPlugin(plugins, \"decorators-legacy\")) {\n      throw new Error(\"Cannot use the decorators and decorators-legacy plugin together\");\n    }\n\n    const decoratorsBeforeExport = getPluginOption(plugins, \"decorators\", \"decoratorsBeforeExport\");\n\n    if (decoratorsBeforeExport == null) {\n      throw new Error(\"The 'decorators' plugin requires a 'decoratorsBeforeExport' option,\" + \" whose value must be a boolean. If you are migrating from\" + \" Babylon/Babel 6 or want to use the old decorators proposal, you\" + \" should use the 'decorators-legacy' plugin instead of 'decorators'.\");\n    } else if (typeof decoratorsBeforeExport !== \"boolean\") {\n      throw new Error(\"'decoratorsBeforeExport' must be a boolean.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"flow\") && hasPlugin(plugins, \"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"placeholders\") && hasPlugin(plugins, \"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"pipelineOperator\") && !PIPELINE_PROPOSALS.includes(getPluginOption(plugins, \"pipelineOperator\", \"proposal\"))) {\n    throw new Error(\"'pipelineOperator' requires 'proposal' option whose value should be one of: \" + PIPELINE_PROPOSALS.map(p => `'${p}'`).join(\", \"));\n  }\n\n  if (hasPlugin(plugins, \"moduleAttributes\")) {\n    const moduleAttributesVerionPluginOption = getPluginOption(plugins, \"moduleAttributes\", \"version\");\n\n    if (moduleAttributesVerionPluginOption !== \"may-2020\") {\n      throw new Error(\"The 'moduleAttributes' plugin requires a 'version' option,\" + \" representing the last proposal update. Currently, the\" + \" only supported value is 'may-2020'.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"recordAndTuple\") && !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\"))) {\n    throw new Error(\"'recordAndTuple' requires 'syntaxType' option whose value should be one of: \" + RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(\", \"));\n  }\n}\n\nconst mixinPlugins = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders\n};\nconst mixinPluginNames = Object.keys(mixinPlugins);\nconst defaultOptions = {\n  sourceType: \"script\",\n  sourceFilename: undefined,\n  startLine: 1,\n  allowAwaitOutsideFunction: false,\n  allowReturnOutsideFunction: false,\n  allowImportExportEverywhere: false,\n  allowSuperOutsideMethod: false,\n  allowUndeclaredExports: false,\n  plugins: [],\n  strictMode: null,\n  ranges: false,\n  tokens: false,\n  createParenthesizedExpressions: false,\n  errorRecovery: false\n};\n\nfunction getOptions(opts) {\n  const options = {};\n\n  for (let _i = 0, _Object$keys = Object.keys(defaultOptions); _i < _Object$keys.length; _i++) {\n    const key = _Object$keys[_i];\n    options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];\n  }\n\n  return options;\n}\n\nclass State {\n  constructor() {\n    this.errors = [];\n    this.potentialArrowAt = -1;\n    this.noArrowAt = [];\n    this.noArrowParamsConversionAt = [];\n    this.inParameters = false;\n    this.maybeInArrowParameters = false;\n    this.maybeInAsyncArrowHead = false;\n    this.inPipeline = false;\n    this.inType = false;\n    this.noAnonFunctionType = false;\n    this.inPropertyName = false;\n    this.hasFlowComment = false;\n    this.isIterator = false;\n    this.topicContext = {\n      maxNumOfResolvableTopics: 0,\n      maxTopicIndex: null\n    };\n    this.soloAwait = false;\n    this.inFSharpPipelineDirectBody = false;\n    this.labels = [];\n    this.decoratorStack = [[]];\n    this.yieldPos = -1;\n    this.awaitPos = -1;\n    this.comments = [];\n    this.trailingComments = [];\n    this.leadingComments = [];\n    this.commentStack = [];\n    this.commentPreviousNode = null;\n    this.pos = 0;\n    this.lineStart = 0;\n    this.type = types.eof;\n    this.value = null;\n    this.start = 0;\n    this.end = 0;\n    this.lastTokEndLoc = null;\n    this.lastTokStartLoc = null;\n    this.lastTokStart = 0;\n    this.lastTokEnd = 0;\n    this.context = [types$1.braceStatement];\n    this.exprAllowed = true;\n    this.containsEsc = false;\n    this.octalPositions = [];\n    this.exportedIdentifiers = [];\n    this.tokensLength = 0;\n  }\n\n  init(options) {\n    this.strict = options.strictMode === false ? false : options.sourceType === \"module\";\n    this.curLine = options.startLine;\n    this.startLoc = this.endLoc = this.curPosition();\n  }\n\n  curPosition() {\n    return new Position(this.curLine, this.pos - this.lineStart);\n  }\n\n  clone(skipArrays) {\n    const state = new State();\n    const keys = Object.keys(this);\n\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      let val = this[key];\n\n      if (!skipArrays && Array.isArray(val)) {\n        val = val.slice();\n      }\n\n      state[key] = val;\n    }\n\n    return state;\n  }\n\n}\n\nvar _isDigit = function isDigit(code) {\n  return code >= 48 && code <= 57;\n};\n\nconst VALID_REGEX_FLAGS = new Set([\"g\", \"m\", \"s\", \"i\", \"y\", \"u\"]);\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: [46, 66, 69, 79, 95, 98, 101, 111],\n  hex: [46, 88, 95, 120]\n};\nconst allowedNumericSeparatorSiblings = {};\nallowedNumericSeparatorSiblings.bin = [48, 49];\nallowedNumericSeparatorSiblings.oct = [...allowedNumericSeparatorSiblings.bin, 50, 51, 52, 53, 54, 55];\nallowedNumericSeparatorSiblings.dec = [...allowedNumericSeparatorSiblings.oct, 56, 57];\nallowedNumericSeparatorSiblings.hex = [...allowedNumericSeparatorSiblings.dec, 65, 66, 67, 68, 69, 70, 97, 98, 99, 100, 101, 102];\n\nclass Token {\n  constructor(state) {\n    this.type = state.type;\n    this.value = state.value;\n    this.start = state.start;\n    this.end = state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n\n}\n\nclass Tokenizer extends ParserError {\n  constructor(options, input) {\n    super();\n    this.tokens = [];\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.isLookahead = false;\n  }\n\n  pushToken(token) {\n    this.tokens.length = this.state.tokensLength;\n    this.tokens.push(token);\n    ++this.state.tokensLength;\n  }\n\n  next() {\n    if (!this.isLookahead) {\n      this.checkKeywordEscapes();\n\n      if (this.options.tokens) {\n        this.pushToken(new Token(this.state));\n      }\n    }\n\n    this.state.lastTokEnd = this.state.end;\n    this.state.lastTokStart = this.state.start;\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n\n  eat(type) {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  match(type) {\n    return this.state.type === type;\n  }\n\n  lookahead() {\n    const old = this.state;\n    this.state = old.clone(true);\n    this.isLookahead = true;\n    this.next();\n    this.isLookahead = false;\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n\n  nextTokenStart() {\n    return this.nextTokenStartSince(this.state.pos);\n  }\n\n  nextTokenStartSince(pos) {\n    skipWhiteSpace.lastIndex = pos;\n    const skip = skipWhiteSpace.exec(this.input);\n    return pos + skip[0].length;\n  }\n\n  lookaheadCharCode() {\n    return this.input.charCodeAt(this.nextTokenStart());\n  }\n\n  setStrict(strict) {\n    this.state.strict = strict;\n    if (!this.match(types.num) && !this.match(types.string)) return;\n    this.state.pos = this.state.start;\n\n    while (this.state.pos < this.state.lineStart) {\n      this.state.lineStart = this.input.lastIndexOf(\"\\n\", this.state.lineStart - 2) + 1;\n      --this.state.curLine;\n    }\n\n    this.nextToken();\n  }\n\n  curContext() {\n    return this.state.context[this.state.context.length - 1];\n  }\n\n  nextToken() {\n    const curContext = this.curContext();\n    if (!(curContext == null ? void 0 : curContext.preserveSpace)) this.skipSpace();\n    this.state.octalPositions = [];\n    this.state.start = this.state.pos;\n    this.state.startLoc = this.state.curPosition();\n\n    if (this.state.pos >= this.length) {\n      this.finishToken(types.eof);\n      return;\n    }\n\n    const override = curContext == null ? void 0 : curContext.override;\n\n    if (override) {\n      override(this);\n    } else {\n      this.getTokenFromCode(this.input.codePointAt(this.state.pos));\n    }\n  }\n\n  pushComment(block, text, start, end, startLoc, endLoc) {\n    const comment = {\n      type: block ? \"CommentBlock\" : \"CommentLine\",\n      value: text,\n      start: start,\n      end: end,\n      loc: new SourceLocation(startLoc, endLoc)\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    this.state.comments.push(comment);\n    this.addComment(comment);\n  }\n\n  skipBlockComment() {\n    const startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(\"*/\", this.state.pos + 2);\n    if (end === -1) throw this.raise(start, ErrorMessages.UnterminatedComment);\n    this.state.pos = end + 2;\n    lineBreakG.lastIndex = start;\n    let match;\n\n    while ((match = lineBreakG.exec(this.input)) && match.index < this.state.pos) {\n      ++this.state.curLine;\n      this.state.lineStart = match.index + match[0].length;\n    }\n\n    if (this.isLookahead) return;\n    this.pushComment(true, this.input.slice(start + 2, end), start, this.state.pos, startLoc, this.state.curPosition());\n  }\n\n  skipLineComment(startSkip) {\n    const start = this.state.pos;\n    const startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt(this.state.pos += startSkip);\n\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n\n    if (this.isLookahead) return;\n    this.pushComment(false, this.input.slice(start + startSkip, this.state.pos), start, this.state.pos, startLoc, this.state.curPosition());\n  }\n\n  skipSpace() {\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      switch (ch) {\n        case 32:\n        case 160:\n        case 9:\n          ++this.state.pos;\n          break;\n\n        case 13:\n          if (this.input.charCodeAt(this.state.pos + 1) === 10) {\n            ++this.state.pos;\n          }\n\n        case 10:\n        case 8232:\n        case 8233:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case 47:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case 42:\n              this.skipBlockComment();\n              break;\n\n            case 47:\n              this.skipLineComment(2);\n              break;\n\n            default:\n              break loop;\n          }\n\n          break;\n\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else {\n            break loop;\n          }\n\n      }\n    }\n  }\n\n  finishToken(type, val) {\n    this.state.end = this.state.pos;\n    this.state.endLoc = this.state.curPosition();\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n    if (!this.isLookahead) this.updateContext(prevType);\n  }\n\n  readToken_numberSign() {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n\n    const nextPos = this.state.pos + 1;\n    const next = this.input.charCodeAt(nextPos);\n\n    if (next >= 48 && next <= 57) {\n      throw this.raise(this.state.pos, ErrorMessages.UnexpectedDigitAfterHash);\n    }\n\n    if (next === 123 || next === 91 && this.hasPlugin(\"recordAndTuple\")) {\n      this.expectPlugin(\"recordAndTuple\");\n\n      if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"hash\") {\n        throw this.raise(this.state.pos, next === 123 ? ErrorMessages.RecordExpressionHashIncorrectStartSyntaxType : ErrorMessages.TupleExpressionHashIncorrectStartSyntaxType);\n      }\n\n      if (next === 123) {\n        this.finishToken(types.braceHashL);\n      } else {\n        this.finishToken(types.bracketHashL);\n      }\n\n      this.state.pos += 2;\n    } else {\n      this.finishOp(types.hash, 1);\n    }\n  }\n\n  readToken_dot() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next >= 48 && next <= 57) {\n      this.readNumber(true);\n      return;\n    }\n\n    if (next === 46 && this.input.charCodeAt(this.state.pos + 2) === 46) {\n      this.state.pos += 3;\n      this.finishToken(types.ellipsis);\n    } else {\n      ++this.state.pos;\n      this.finishToken(types.dot);\n    }\n  }\n\n  readToken_slash() {\n    if (this.state.exprAllowed && !this.state.inType) {\n      ++this.state.pos;\n      this.readRegexp();\n      return;\n    }\n\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(types.assign, 2);\n    } else {\n      this.finishOp(types.slash, 1);\n    }\n  }\n\n  readToken_interpreter() {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n    let ch = this.input.charCodeAt(this.state.pos + 1);\n    if (ch !== 33) return false;\n    const start = this.state.pos;\n    this.state.pos += 1;\n\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    const value = this.input.slice(start + 2, this.state.pos);\n    this.finishToken(types.interpreterDirective, value);\n    return true;\n  }\n\n  readToken_mult_modulo(code) {\n    let type = code === 42 ? types.star : types.modulo;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n    const exprAllowed = this.state.exprAllowed;\n\n    if (code === 42 && next === 42) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = types.exponent;\n    }\n\n    if (next === 61 && !exprAllowed) {\n      width++;\n      type = types.assign;\n    }\n\n    this.finishOp(type, width);\n  }\n\n  readToken_pipe_amp(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === 61) {\n        this.finishOp(types.assign, 3);\n      } else {\n        this.finishOp(code === 124 ? types.logicalOR : types.logicalAND, 2);\n      }\n\n      return;\n    }\n\n    if (code === 124) {\n      if (next === 62) {\n        this.finishOp(types.pipeline, 2);\n        return;\n      }\n\n      if (this.hasPlugin(\"recordAndTuple\") && next === 125) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(this.state.pos, ErrorMessages.RecordExpressionBarIncorrectEndSyntaxType);\n        }\n\n        this.finishOp(types.braceBarR, 2);\n        return;\n      }\n\n      if (this.hasPlugin(\"recordAndTuple\") && next === 93) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(this.state.pos, ErrorMessages.TupleExpressionBarIncorrectEndSyntaxType);\n        }\n\n        this.finishOp(types.bracketBarR, 2);\n        return;\n      }\n    }\n\n    if (next === 61) {\n      this.finishOp(types.assign, 2);\n      return;\n    }\n\n    this.finishOp(code === 124 ? types.bitwiseOR : types.bitwiseAND, 1);\n  }\n\n  readToken_caret() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(types.assign, 2);\n    } else {\n      this.finishOp(types.bitwiseXOR, 1);\n    }\n  }\n\n  readToken_plus_min(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (next === 45 && !this.inModule && this.input.charCodeAt(this.state.pos + 2) === 62 && (this.state.lastTokEnd === 0 || this.hasPrecedingLineBreak())) {\n        this.skipLineComment(3);\n        this.skipSpace();\n        this.nextToken();\n        return;\n      }\n\n      this.finishOp(types.incDec, 2);\n      return;\n    }\n\n    if (next === 61) {\n      this.finishOp(types.assign, 2);\n    } else {\n      this.finishOp(types.plusMin, 1);\n    }\n  }\n\n  readToken_lt_gt(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    let size = 1;\n\n    if (next === code) {\n      size = code === 62 && this.input.charCodeAt(this.state.pos + 2) === 62 ? 3 : 2;\n\n      if (this.input.charCodeAt(this.state.pos + size) === 61) {\n        this.finishOp(types.assign, size + 1);\n        return;\n      }\n\n      this.finishOp(types.bitShift, size);\n      return;\n    }\n\n    if (next === 33 && code === 60 && !this.inModule && this.input.charCodeAt(this.state.pos + 2) === 45 && this.input.charCodeAt(this.state.pos + 3) === 45) {\n      this.skipLineComment(4);\n      this.skipSpace();\n      this.nextToken();\n      return;\n    }\n\n    if (next === 61) {\n      size = 2;\n    }\n\n    this.finishOp(types.relational, size);\n  }\n\n  readToken_eq_excl(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(types.equality, this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2);\n      return;\n    }\n\n    if (code === 61 && next === 62) {\n      this.state.pos += 2;\n      this.finishToken(types.arrow);\n      return;\n    }\n\n    this.finishOp(code === 61 ? types.eq : types.bang, 1);\n  }\n\n  readToken_question() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n\n    if (next === 63) {\n      if (next2 === 61) {\n        this.finishOp(types.assign, 3);\n      } else {\n        this.finishOp(types.nullishCoalescing, 2);\n      }\n    } else if (next === 46 && !(next2 >= 48 && next2 <= 57)) {\n      this.state.pos += 2;\n      this.finishToken(types.questionDot);\n    } else {\n      ++this.state.pos;\n      this.finishToken(types.question);\n    }\n  }\n\n  getTokenFromCode(code) {\n    switch (code) {\n      case 46:\n        this.readToken_dot();\n        return;\n\n      case 40:\n        ++this.state.pos;\n        this.finishToken(types.parenL);\n        return;\n\n      case 41:\n        ++this.state.pos;\n        this.finishToken(types.parenR);\n        return;\n\n      case 59:\n        ++this.state.pos;\n        this.finishToken(types.semi);\n        return;\n\n      case 44:\n        ++this.state.pos;\n        this.finishToken(types.comma);\n        return;\n\n      case 91:\n        if (this.hasPlugin(\"recordAndTuple\") && this.input.charCodeAt(this.state.pos + 1) === 124) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(this.state.pos, ErrorMessages.TupleExpressionBarIncorrectStartSyntaxType);\n          }\n\n          this.finishToken(types.bracketBarL);\n          this.state.pos += 2;\n        } else {\n          ++this.state.pos;\n          this.finishToken(types.bracketL);\n        }\n\n        return;\n\n      case 93:\n        ++this.state.pos;\n        this.finishToken(types.bracketR);\n        return;\n\n      case 123:\n        if (this.hasPlugin(\"recordAndTuple\") && this.input.charCodeAt(this.state.pos + 1) === 124) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(this.state.pos, ErrorMessages.RecordExpressionBarIncorrectStartSyntaxType);\n          }\n\n          this.finishToken(types.braceBarL);\n          this.state.pos += 2;\n        } else {\n          ++this.state.pos;\n          this.finishToken(types.braceL);\n        }\n\n        return;\n\n      case 125:\n        ++this.state.pos;\n        this.finishToken(types.braceR);\n        return;\n\n      case 58:\n        if (this.hasPlugin(\"functionBind\") && this.input.charCodeAt(this.state.pos + 1) === 58) {\n          this.finishOp(types.doubleColon, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(types.colon);\n        }\n\n        return;\n\n      case 63:\n        this.readToken_question();\n        return;\n\n      case 96:\n        ++this.state.pos;\n        this.finishToken(types.backQuote);\n        return;\n\n      case 48:\n        {\n          const next = this.input.charCodeAt(this.state.pos + 1);\n\n          if (next === 120 || next === 88) {\n            this.readRadixNumber(16);\n            return;\n          }\n\n          if (next === 111 || next === 79) {\n            this.readRadixNumber(8);\n            return;\n          }\n\n          if (next === 98 || next === 66) {\n            this.readRadixNumber(2);\n            return;\n          }\n        }\n\n      case 49:\n      case 50:\n      case 51:\n      case 52:\n      case 53:\n      case 54:\n      case 55:\n      case 56:\n      case 57:\n        this.readNumber(false);\n        return;\n\n      case 34:\n      case 39:\n        this.readString(code);\n        return;\n\n      case 47:\n        this.readToken_slash();\n        return;\n\n      case 37:\n      case 42:\n        this.readToken_mult_modulo(code);\n        return;\n\n      case 124:\n      case 38:\n        this.readToken_pipe_amp(code);\n        return;\n\n      case 94:\n        this.readToken_caret();\n        return;\n\n      case 43:\n      case 45:\n        this.readToken_plus_min(code);\n        return;\n\n      case 60:\n      case 62:\n        this.readToken_lt_gt(code);\n        return;\n\n      case 61:\n      case 33:\n        this.readToken_eq_excl(code);\n        return;\n\n      case 126:\n        this.finishOp(types.tilde, 1);\n        return;\n\n      case 64:\n        ++this.state.pos;\n        this.finishToken(types.at);\n        return;\n\n      case 35:\n        this.readToken_numberSign();\n        return;\n\n      case 92:\n        this.readWord();\n        return;\n\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord();\n          return;\n        }\n\n    }\n\n    throw this.raise(this.state.pos, ErrorMessages.InvalidOrUnexpectedToken, String.fromCodePoint(code));\n  }\n\n  finishOp(type, size) {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n\n  readRegexp() {\n    const start = this.state.pos;\n    let escaped, inClass;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(start, ErrorMessages.UnterminatedRegExp);\n      }\n\n      const ch = this.input.charAt(this.state.pos);\n\n      if (lineBreak.test(ch)) {\n        throw this.raise(start, ErrorMessages.UnterminatedRegExp);\n      }\n\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === \"[\") {\n          inClass = true;\n        } else if (ch === \"]\" && inClass) {\n          inClass = false;\n        } else if (ch === \"/\" && !inClass) {\n          break;\n        }\n\n        escaped = ch === \"\\\\\";\n      }\n\n      ++this.state.pos;\n    }\n\n    const content = this.input.slice(start, this.state.pos);\n    ++this.state.pos;\n    let mods = \"\";\n\n    while (this.state.pos < this.length) {\n      const char = this.input[this.state.pos];\n      const charCode = this.input.codePointAt(this.state.pos);\n\n      if (VALID_REGEX_FLAGS.has(char)) {\n        if (mods.indexOf(char) > -1) {\n          this.raise(this.state.pos + 1, ErrorMessages.DuplicateRegExpFlags);\n        }\n      } else if (isIdentifierChar(charCode) || charCode === 92) {\n        this.raise(this.state.pos + 1, ErrorMessages.MalformedRegExpFlags);\n      } else {\n        break;\n      }\n\n      ++this.state.pos;\n      mods += char;\n    }\n\n    this.finishToken(types.regexp, {\n      pattern: content,\n      flags: mods\n    });\n  }\n\n  readInt(radix, len, forceLen, allowNumSeparator = true) {\n    const start = this.state.pos;\n    const forbiddenSiblings = radix === 16 ? forbiddenNumericSeparatorSiblings.hex : forbiddenNumericSeparatorSiblings.decBinOct;\n    const allowedSiblings = radix === 16 ? allowedNumericSeparatorSiblings.hex : radix === 10 ? allowedNumericSeparatorSiblings.dec : radix === 8 ? allowedNumericSeparatorSiblings.oct : allowedNumericSeparatorSiblings.bin;\n    let invalid = false;\n    let total = 0;\n\n    for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n      const code = this.input.charCodeAt(this.state.pos);\n      let val;\n\n      if (code === 95) {\n        const prev = this.input.charCodeAt(this.state.pos - 1);\n        const next = this.input.charCodeAt(this.state.pos + 1);\n\n        if (allowedSiblings.indexOf(next) === -1) {\n          this.raise(this.state.pos, ErrorMessages.UnexpectedNumericSeparator);\n        } else if (forbiddenSiblings.indexOf(prev) > -1 || forbiddenSiblings.indexOf(next) > -1 || Number.isNaN(next)) {\n          this.raise(this.state.pos, ErrorMessages.UnexpectedNumericSeparator);\n        }\n\n        if (!allowNumSeparator) {\n          this.raise(this.state.pos, ErrorMessages.NumericSeparatorInEscapeSequence);\n        }\n\n        ++this.state.pos;\n        continue;\n      }\n\n      if (code >= 97) {\n        val = code - 97 + 10;\n      } else if (code >= 65) {\n        val = code - 65 + 10;\n      } else if (_isDigit(code)) {\n        val = code - 48;\n      } else {\n        val = Infinity;\n      }\n\n      if (val >= radix) {\n        if (this.options.errorRecovery && val <= 9) {\n          val = 0;\n          this.raise(this.state.start + i + 2, ErrorMessages.InvalidDigit, radix);\n        } else if (forceLen) {\n          val = 0;\n          invalid = true;\n        } else {\n          break;\n        }\n      }\n\n      ++this.state.pos;\n      total = total * radix + val;\n    }\n\n    if (this.state.pos === start || len != null && this.state.pos - start !== len || invalid) {\n      return null;\n    }\n\n    return total;\n  }\n\n  readRadixNumber(radix) {\n    const start = this.state.pos;\n    let isBigInt = false;\n    this.state.pos += 2;\n    const val = this.readInt(radix);\n\n    if (val == null) {\n      this.raise(this.state.start + 2, ErrorMessages.InvalidDigit, radix);\n    }\n\n    const next = this.input.charCodeAt(this.state.pos);\n\n    if (next === 110) {\n      ++this.state.pos;\n      isBigInt = true;\n    } else if (next === 109) {\n      throw this.raise(start, ErrorMessages.InvalidDecimal);\n    }\n\n    if (isIdentifierStart(this.input.codePointAt(this.state.pos))) {\n      throw this.raise(this.state.pos, ErrorMessages.NumberIdentifier);\n    }\n\n    if (isBigInt) {\n      const str = this.input.slice(start, this.state.pos).replace(/[_n]/g, \"\");\n      this.finishToken(types.bigint, str);\n      return;\n    }\n\n    this.finishToken(types.num, val);\n  }\n\n  readNumber(startsWithDot) {\n    const start = this.state.pos;\n    let isFloat = false;\n    let isBigInt = false;\n    let isDecimal = false;\n    let hasExponent = false;\n    let isOctal = false;\n\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(start, ErrorMessages.InvalidNumber);\n    }\n\n    const hasLeadingZero = this.state.pos - start >= 2 && this.input.charCodeAt(start) === 48;\n\n    if (hasLeadingZero) {\n      const integer = this.input.slice(start, this.state.pos);\n\n      if (this.state.strict) {\n        this.raise(start, ErrorMessages.StrictOctalLiteral);\n      } else {\n        const underscorePos = integer.indexOf(\"_\");\n\n        if (underscorePos > 0) {\n          this.raise(underscorePos + start, ErrorMessages.ZeroDigitNumericSeparator);\n        }\n      }\n\n      isOctal = hasLeadingZero && !/[89]/.test(integer);\n    }\n\n    let next = this.input.charCodeAt(this.state.pos);\n\n    if (next === 46 && !isOctal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if ((next === 69 || next === 101) && !isOctal) {\n      next = this.input.charCodeAt(++this.state.pos);\n\n      if (next === 43 || next === 45) {\n        ++this.state.pos;\n      }\n\n      if (this.readInt(10) === null) this.raise(start, ErrorMessages.InvalidNumber);\n      isFloat = true;\n      hasExponent = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (next === 110) {\n      if (isFloat || hasLeadingZero) {\n        this.raise(start, ErrorMessages.InvalidBigIntLiteral);\n      }\n\n      ++this.state.pos;\n      isBigInt = true;\n    }\n\n    if (next === 109) {\n      this.expectPlugin(\"decimal\", this.state.pos);\n\n      if (hasExponent || hasLeadingZero) {\n        this.raise(start, ErrorMessages.InvalidDecimal);\n      }\n\n      ++this.state.pos;\n      isDecimal = true;\n    }\n\n    if (isIdentifierStart(this.input.codePointAt(this.state.pos))) {\n      throw this.raise(this.state.pos, ErrorMessages.NumberIdentifier);\n    }\n\n    const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, \"\");\n\n    if (isBigInt) {\n      this.finishToken(types.bigint, str);\n      return;\n    }\n\n    if (isDecimal) {\n      this.finishToken(types.decimal, str);\n      return;\n    }\n\n    const val = isOctal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(types.num, val);\n  }\n\n  readCodePoint(throwOnInvalid) {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let code;\n\n    if (ch === 123) {\n      const codePos = ++this.state.pos;\n      code = this.readHexChar(this.input.indexOf(\"}\", this.state.pos) - this.state.pos, true, throwOnInvalid);\n      ++this.state.pos;\n\n      if (code !== null && code > 0x10ffff) {\n        if (throwOnInvalid) {\n          this.raise(codePos, ErrorMessages.InvalidCodePoint);\n        } else {\n          return null;\n        }\n      }\n    } else {\n      code = this.readHexChar(4, false, throwOnInvalid);\n    }\n\n    return code;\n  }\n\n  readString(quote) {\n    let out = \"\",\n        chunkStart = ++this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedString);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n\n      if (ch === 92) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.readEscapedChar(false);\n        chunkStart = this.state.pos;\n      } else if (ch === 8232 || ch === 8233) {\n        ++this.state.pos;\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedString);\n      } else {\n        ++this.state.pos;\n      }\n    }\n\n    out += this.input.slice(chunkStart, this.state.pos++);\n    this.finishToken(types.string, out);\n  }\n\n  readTmplToken() {\n    let out = \"\",\n        chunkStart = this.state.pos,\n        containsInvalid = false;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedTemplate);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      if (ch === 96 || ch === 36 && this.input.charCodeAt(this.state.pos + 1) === 123) {\n        if (this.state.pos === this.state.start && this.match(types.template)) {\n          if (ch === 36) {\n            this.state.pos += 2;\n            this.finishToken(types.dollarBraceL);\n            return;\n          } else {\n            ++this.state.pos;\n            this.finishToken(types.backQuote);\n            return;\n          }\n        }\n\n        out += this.input.slice(chunkStart, this.state.pos);\n        this.finishToken(types.template, containsInvalid ? null : out);\n        return;\n      }\n\n      if (ch === 92) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        const escaped = this.readEscapedChar(true);\n\n        if (escaped === null) {\n          containsInvalid = true;\n        } else {\n          out += escaped;\n        }\n\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        ++this.state.pos;\n\n        switch (ch) {\n          case 13:\n            if (this.input.charCodeAt(this.state.pos) === 10) {\n              ++this.state.pos;\n            }\n\n          case 10:\n            out += \"\\n\";\n            break;\n\n          default:\n            out += String.fromCharCode(ch);\n            break;\n        }\n\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n  }\n\n  readEscapedChar(inTemplate) {\n    const throwOnInvalid = !inTemplate;\n    const ch = this.input.charCodeAt(++this.state.pos);\n    ++this.state.pos;\n\n    switch (ch) {\n      case 110:\n        return \"\\n\";\n\n      case 114:\n        return \"\\r\";\n\n      case 120:\n        {\n          const code = this.readHexChar(2, false, throwOnInvalid);\n          return code === null ? null : String.fromCharCode(code);\n        }\n\n      case 117:\n        {\n          const code = this.readCodePoint(throwOnInvalid);\n          return code === null ? null : String.fromCodePoint(code);\n        }\n\n      case 116:\n        return \"\\t\";\n\n      case 98:\n        return \"\\b\";\n\n      case 118:\n        return \"\\u000b\";\n\n      case 102:\n        return \"\\f\";\n\n      case 13:\n        if (this.input.charCodeAt(this.state.pos) === 10) {\n          ++this.state.pos;\n        }\n\n      case 10:\n        this.state.lineStart = this.state.pos;\n        ++this.state.curLine;\n\n      case 8232:\n      case 8233:\n        return \"\";\n\n      case 56:\n      case 57:\n        if (inTemplate) {\n          return null;\n        } else if (this.state.strict) {\n          this.raise(this.state.pos - 1, ErrorMessages.StrictNumericEscape);\n        }\n\n      default:\n        if (ch >= 48 && ch <= 55) {\n          const codePos = this.state.pos - 1;\n          const match = this.input.substr(this.state.pos - 1, 3).match(/^[0-7]+/);\n          let octalStr = match[0];\n          let octal = parseInt(octalStr, 8);\n\n          if (octal > 255) {\n            octalStr = octalStr.slice(0, -1);\n            octal = parseInt(octalStr, 8);\n          }\n\n          this.state.pos += octalStr.length - 1;\n          const next = this.input.charCodeAt(this.state.pos);\n\n          if (octalStr !== \"0\" || next === 56 || next === 57) {\n            if (inTemplate) {\n              return null;\n            } else if (this.state.strict) {\n              this.raise(codePos, ErrorMessages.StrictNumericEscape);\n            } else {\n              this.state.octalPositions.push(codePos);\n            }\n          }\n\n          return String.fromCharCode(octal);\n        }\n\n        return String.fromCharCode(ch);\n    }\n  }\n\n  readHexChar(len, forceLen, throwOnInvalid) {\n    const codePos = this.state.pos;\n    const n = this.readInt(16, len, forceLen, false);\n\n    if (n === null) {\n      if (throwOnInvalid) {\n        this.raise(codePos, ErrorMessages.InvalidEscapeSequence);\n      } else {\n        this.state.pos = codePos - 1;\n      }\n    }\n\n    return n;\n  }\n\n  readWord1() {\n    let word = \"\";\n    this.state.containsEsc = false;\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n\n    while (this.state.pos < this.length) {\n      const ch = this.input.codePointAt(this.state.pos);\n\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (this.state.isIterator && ch === 64) {\n        ++this.state.pos;\n      } else if (ch === 92) {\n        this.state.containsEsc = true;\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.pos;\n        const identifierCheck = this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n        if (this.input.charCodeAt(++this.state.pos) !== 117) {\n          this.raise(this.state.pos, ErrorMessages.MissingUnicodeEscape);\n          continue;\n        }\n\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(escStart, ErrorMessages.EscapedCharNotAnIdentifier);\n          }\n\n          word += String.fromCodePoint(esc);\n        }\n\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n\n  isIterator(word) {\n    return word === \"@@iterator\" || word === \"@@asyncIterator\";\n  }\n\n  readWord() {\n    const word = this.readWord1();\n    const type = keywords.get(word) || types.name;\n\n    if (this.state.isIterator && (!this.isIterator(word) || !this.state.inType)) {\n      this.raise(this.state.pos, ErrorMessages.InvalidIdentifier, word);\n    }\n\n    this.finishToken(type, word);\n  }\n\n  checkKeywordEscapes() {\n    const kw = this.state.type.keyword;\n\n    if (kw && this.state.containsEsc) {\n      this.raise(this.state.start, ErrorMessages.InvalidEscapedReservedWord, kw);\n    }\n  }\n\n  braceIsBlock(prevType) {\n    const parent = this.curContext();\n\n    if (parent === types$1.functionExpression || parent === types$1.functionStatement) {\n      return true;\n    }\n\n    if (prevType === types.colon && (parent === types$1.braceStatement || parent === types$1.braceExpression)) {\n      return !parent.isExpr;\n    }\n\n    if (prevType === types._return || prevType === types.name && this.state.exprAllowed) {\n      return this.hasPrecedingLineBreak();\n    }\n\n    if (prevType === types._else || prevType === types.semi || prevType === types.eof || prevType === types.parenR || prevType === types.arrow) {\n      return true;\n    }\n\n    if (prevType === types.braceL) {\n      return parent === types$1.braceStatement;\n    }\n\n    if (prevType === types._var || prevType === types._const || prevType === types.name) {\n      return false;\n    }\n\n    if (prevType === types.relational) {\n      return true;\n    }\n\n    return !this.state.exprAllowed;\n  }\n\n  updateContext(prevType) {\n    const type = this.state.type;\n    let update;\n\n    if (type.keyword && (prevType === types.dot || prevType === types.questionDot)) {\n      this.state.exprAllowed = false;\n    } else if (update = type.updateContext) {\n      update.call(this, prevType);\n    } else {\n      this.state.exprAllowed = type.beforeExpr;\n    }\n  }\n\n}\n\nclass UtilParser extends Tokenizer {\n  addExtra(node, key, val) {\n    if (!node) return;\n    const extra = node.extra = node.extra || {};\n    extra[key] = val;\n  }\n\n  isRelational(op) {\n    return this.match(types.relational) && this.state.value === op;\n  }\n\n  expectRelational(op) {\n    if (this.isRelational(op)) {\n      this.next();\n    } else {\n      this.unexpected(null, types.relational);\n    }\n  }\n\n  isContextual(name) {\n    return this.match(types.name) && this.state.value === name && !this.state.containsEsc;\n  }\n\n  isUnparsedContextual(nameStart, name) {\n    const nameEnd = nameStart + name.length;\n    return this.input.slice(nameStart, nameEnd) === name && (nameEnd === this.input.length || !isIdentifierChar(this.input.charCodeAt(nameEnd)));\n  }\n\n  isLookaheadContextual(name) {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n\n  eatContextual(name) {\n    return this.isContextual(name) && this.eat(types.name);\n  }\n\n  expectContextual(name, message) {\n    if (!this.eatContextual(name)) this.unexpected(null, message);\n  }\n\n  canInsertSemicolon() {\n    return this.match(types.eof) || this.match(types.braceR) || this.hasPrecedingLineBreak();\n  }\n\n  hasPrecedingLineBreak() {\n    return lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start));\n  }\n\n  isLineTerminator() {\n    return this.eat(types.semi) || this.canInsertSemicolon();\n  }\n\n  semicolon() {\n    if (!this.isLineTerminator()) this.unexpected(null, types.semi);\n  }\n\n  expect(type, pos) {\n    this.eat(type) || this.unexpected(pos, type);\n  }\n\n  assertNoSpace(message = \"Unexpected space.\") {\n    if (this.state.start > this.state.lastTokEnd) {\n      this.raise(this.state.lastTokEnd, message);\n    }\n  }\n\n  unexpected(pos, messageOrType = \"Unexpected token\") {\n    if (typeof messageOrType !== \"string\") {\n      messageOrType = `Unexpected token, expected \"${messageOrType.label}\"`;\n    }\n\n    throw this.raise(pos != null ? pos : this.state.start, messageOrType);\n  }\n\n  expectPlugin(name, pos) {\n    if (!this.hasPlugin(name)) {\n      throw this.raiseWithData(pos != null ? pos : this.state.start, {\n        missingPlugin: [name]\n      }, `This experimental syntax requires enabling the parser plugin: '${name}'`);\n    }\n\n    return true;\n  }\n\n  expectOnePlugin(names, pos) {\n    if (!names.some(n => this.hasPlugin(n))) {\n      throw this.raiseWithData(pos != null ? pos : this.state.start, {\n        missingPlugin: names\n      }, `This experimental syntax requires enabling one of the following parser plugin(s): '${names.join(\", \")}'`);\n    }\n  }\n\n  checkYieldAwaitInDefaultParams() {\n    if (this.state.yieldPos !== -1 && (this.state.awaitPos === -1 || this.state.yieldPos < this.state.awaitPos)) {\n      this.raise(this.state.yieldPos, ErrorMessages.YieldBindingIdentifier);\n    }\n\n    if (this.state.awaitPos !== -1) {\n      this.raise(this.state.awaitPos, ErrorMessages.AwaitBindingIdentifier);\n    }\n  }\n\n  tryParse(fn, oldState = this.state.clone()) {\n    const abortSignal = {\n      node: null\n    };\n\n    try {\n      const node = fn((node = null) => {\n        abortSignal.node = node;\n        throw abortSignal;\n      });\n\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        return {\n          node,\n          error: failState.errors[oldState.errors.length],\n          thrown: false,\n          aborted: false,\n          failState\n        };\n      }\n\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n\n      if (error instanceof SyntaxError) {\n        return {\n          node: null,\n          error,\n          thrown: true,\n          aborted: false,\n          failState\n        };\n      }\n\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState\n        };\n      }\n\n      throw error;\n    }\n  }\n\n  checkExpressionErrors(refExpressionErrors, andThrow) {\n    if (!refExpressionErrors) return false;\n    const {\n      shorthandAssign,\n      doubleProto\n    } = refExpressionErrors;\n    if (!andThrow) return shorthandAssign >= 0 || doubleProto >= 0;\n\n    if (shorthandAssign >= 0) {\n      this.unexpected(shorthandAssign);\n    }\n\n    if (doubleProto >= 0) {\n      this.raise(doubleProto, ErrorMessages.DuplicateProto);\n    }\n  }\n\n  isLiteralPropertyName() {\n    return this.match(types.name) || !!this.state.type.keyword || this.match(types.string) || this.match(types.num) || this.match(types.bigint) || this.match(types.decimal);\n  }\n\n}\n\nclass ExpressionErrors {\n  constructor() {\n    this.shorthandAssign = -1;\n    this.doubleProto = -1;\n  }\n\n}\n\nclass Node {\n  constructor(parser, pos, loc) {\n    this.type = \"\";\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser == null ? void 0 : parser.options.ranges) this.range = [pos, 0];\n    if (parser == null ? void 0 : parser.filename) this.loc.filename = parser.filename;\n  }\n\n  __clone() {\n    const newNode = new Node();\n    const keys = Object.keys(this);\n\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n\n      if (key !== \"leadingComments\" && key !== \"trailingComments\" && key !== \"innerComments\") {\n        newNode[key] = this[key];\n      }\n    }\n\n    return newNode;\n  }\n\n}\n\nclass NodeUtils extends UtilParser {\n  startNode() {\n    return new Node(this, this.state.start, this.state.startLoc);\n  }\n\n  startNodeAt(pos, loc) {\n    return new Node(this, pos, loc);\n  }\n\n  startNodeAtNode(type) {\n    return this.startNodeAt(type.start, type.loc.start);\n  }\n\n  finishNode(node, type) {\n    return this.finishNodeAt(node, type, this.state.lastTokEnd, this.state.lastTokEndLoc);\n  }\n\n  finishNodeAt(node, type, pos, loc) {\n    node.type = type;\n    node.end = pos;\n    node.loc.end = loc;\n    if (this.options.ranges) node.range[1] = pos;\n    this.processComment(node);\n    return node;\n  }\n\n  resetStartLocation(node, start, startLoc) {\n    node.start = start;\n    node.loc.start = startLoc;\n    if (this.options.ranges) node.range[0] = start;\n  }\n\n  resetEndLocation(node, end = this.state.lastTokEnd, endLoc = this.state.lastTokEndLoc) {\n    node.end = end;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = end;\n  }\n\n  resetStartLocationFromNode(node, locationNode) {\n    this.resetStartLocation(node, locationNode.start, locationNode.loc.start);\n  }\n\n}\n\nconst unwrapParenthesizedExpression = node => {\n  return node.type === \"ParenthesizedExpression\" ? unwrapParenthesizedExpression(node.expression) : node;\n};\n\nclass LValParser extends NodeUtils {\n  toAssignable(node) {\n    var _node$extra, _node$extra3;\n\n    let parenthesized = undefined;\n\n    if (node.type === \"ParenthesizedExpression\" || ((_node$extra = node.extra) == null ? void 0 : _node$extra.parenthesized)) {\n      parenthesized = unwrapParenthesizedExpression(node);\n\n      if (parenthesized.type !== \"Identifier\" && parenthesized.type !== \"MemberExpression\") {\n        this.raise(node.start, ErrorMessages.InvalidParenthesizedAssignment);\n      }\n    }\n\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n        break;\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n\n        for (let i = 0, length = node.properties.length, last = length - 1; i < length; i++) {\n          var _node$extra2;\n\n          const prop = node.properties[i];\n          const isLast = i === last;\n          this.toAssignableObjectExpressionProp(prop, isLast);\n\n          if (isLast && prop.type === \"RestElement\" && ((_node$extra2 = node.extra) == null ? void 0 : _node$extra2.trailingComma)) {\n            this.raiseRestNotLast(node.extra.trailingComma);\n          }\n        }\n\n        break;\n\n      case \"ObjectProperty\":\n        this.toAssignable(node.value);\n        break;\n\n      case \"SpreadElement\":\n        {\n          this.checkToRestConversion(node);\n          node.type = \"RestElement\";\n          const arg = node.argument;\n          this.toAssignable(arg);\n          break;\n        }\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        this.toAssignableList(node.elements, (_node$extra3 = node.extra) == null ? void 0 : _node$extra3.trailingComma);\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(node.left.end, ErrorMessages.MissingEqInAssignment);\n        }\n\n        node.type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left);\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.toAssignable(parenthesized);\n        break;\n    }\n\n    return node;\n  }\n\n  toAssignableObjectExpressionProp(prop, isLast) {\n    if (prop.type === \"ObjectMethod\") {\n      const error = prop.kind === \"get\" || prop.kind === \"set\" ? ErrorMessages.PatternHasAccessor : ErrorMessages.PatternHasMethod;\n      this.raise(prop.key.start, error);\n    } else if (prop.type === \"SpreadElement\" && !isLast) {\n      this.raiseRestNotLast(prop.start);\n    } else {\n      this.toAssignable(prop);\n    }\n  }\n\n  toAssignableList(exprList, trailingCommaPos) {\n    let end = exprList.length;\n\n    if (end) {\n      const last = exprList[end - 1];\n\n      if ((last == null ? void 0 : last.type) === \"RestElement\") {\n        --end;\n      } else if ((last == null ? void 0 : last.type) === \"SpreadElement\") {\n        last.type = \"RestElement\";\n        const arg = last.argument;\n        this.toAssignable(arg);\n\n        if (arg.type !== \"Identifier\" && arg.type !== \"MemberExpression\" && arg.type !== \"ArrayPattern\" && arg.type !== \"ObjectPattern\") {\n          this.unexpected(arg.start);\n        }\n\n        if (trailingCommaPos) {\n          this.raiseTrailingCommaAfterRest(trailingCommaPos);\n        }\n\n        --end;\n      }\n    }\n\n    for (let i = 0; i < end; i++) {\n      const elt = exprList[i];\n\n      if (elt) {\n        this.toAssignable(elt);\n\n        if (elt.type === \"RestElement\") {\n          this.raiseRestNotLast(elt.start);\n        }\n      }\n    }\n\n    return exprList;\n  }\n\n  toReferencedList(exprList, isParenthesizedExpr) {\n    return exprList;\n  }\n\n  toReferencedListDeep(exprList, isParenthesizedExpr) {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n\n    for (let _i = 0; _i < exprList.length; _i++) {\n      const expr = exprList[_i];\n\n      if ((expr == null ? void 0 : expr.type) === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n  }\n\n  parseSpread(refExpressionErrors, refNeedsArrowPos) {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseMaybeAssignAllowIn(refExpressionErrors, undefined, refNeedsArrowPos);\n    return this.finishNode(node, \"SpreadElement\");\n  }\n\n  parseRestBinding() {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case types.bracketL:\n        {\n          const node = this.startNode();\n          this.next();\n          node.elements = this.parseBindingList(types.bracketR, 93, true);\n          return this.finishNode(node, \"ArrayPattern\");\n        }\n\n      case types.braceL:\n        return this.parseObjectLike(types.braceR, true);\n    }\n\n    return this.parseIdentifier();\n  }\n\n  parseBindingList(close, closeCharCode, allowEmpty, allowModifiers) {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma);\n      }\n\n      if (allowEmpty && this.match(types.comma)) {\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(types.ellipsis)) {\n        elts.push(this.parseAssignableListItemTypes(this.parseRestBinding()));\n        this.checkCommaAfterRest(closeCharCode);\n        this.expect(close);\n        break;\n      } else {\n        const decorators = [];\n\n        if (this.match(types.at) && this.hasPlugin(\"decorators\")) {\n          this.raise(this.state.start, ErrorMessages.UnsupportedParameterDecorator);\n        }\n\n        while (this.match(types.at)) {\n          decorators.push(this.parseDecorator());\n        }\n\n        elts.push(this.parseAssignableListItem(allowModifiers, decorators));\n      }\n    }\n\n    return elts;\n  }\n\n  parseAssignableListItem(allowModifiers, decorators) {\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n\n    return elt;\n  }\n\n  parseAssignableListItemTypes(param) {\n    return param;\n  }\n\n  parseMaybeDefault(startPos, startLoc, left) {\n    var _startLoc, _startPos, _left;\n\n    startLoc = (_startLoc = startLoc) != null ? _startLoc : this.state.startLoc;\n    startPos = (_startPos = startPos) != null ? _startPos : this.state.start;\n    left = (_left = left) != null ? _left : this.parseBindingAtom();\n    if (!this.eat(types.eq)) return left;\n    const node = this.startNodeAt(startPos, startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssignAllowIn();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n\n  checkLVal(expr, bindingType = BIND_NONE, checkClashes, contextDescription, disallowLetBinding, strictModeChanged = false) {\n    switch (expr.type) {\n      case \"Identifier\":\n        if (this.state.strict && (strictModeChanged ? isStrictBindReservedWord(expr.name, this.inModule) : isStrictBindOnlyReservedWord(expr.name))) {\n          this.raise(expr.start, bindingType === BIND_NONE ? ErrorMessages.StrictEvalArguments : ErrorMessages.StrictEvalArgumentsBinding, expr.name);\n        }\n\n        if (checkClashes) {\n          const key = `_${expr.name}`;\n\n          if (checkClashes[key]) {\n            this.raise(expr.start, ErrorMessages.ParamDupe);\n          } else {\n            checkClashes[key] = true;\n          }\n        }\n\n        if (disallowLetBinding && expr.name === \"let\") {\n          this.raise(expr.start, ErrorMessages.LetInLexicalBinding);\n        }\n\n        if (!(bindingType & BIND_NONE)) {\n          this.scope.declareName(expr.name, bindingType, expr.start);\n        }\n\n        break;\n\n      case \"MemberExpression\":\n        if (bindingType !== BIND_NONE) {\n          this.raise(expr.start, ErrorMessages.InvalidPropertyBindingPattern);\n        }\n\n        break;\n\n      case \"ObjectPattern\":\n        for (let _i2 = 0, _expr$properties = expr.properties; _i2 < _expr$properties.length; _i2++) {\n          let prop = _expr$properties[_i2];\n          if (prop.type === \"ObjectProperty\") prop = prop.value;else if (prop.type === \"ObjectMethod\") continue;\n          this.checkLVal(prop, bindingType, checkClashes, \"object destructuring pattern\", disallowLetBinding);\n        }\n\n        break;\n\n      case \"ArrayPattern\":\n        for (let _i3 = 0, _expr$elements = expr.elements; _i3 < _expr$elements.length; _i3++) {\n          const elem = _expr$elements[_i3];\n\n          if (elem) {\n            this.checkLVal(elem, bindingType, checkClashes, \"array destructuring pattern\", disallowLetBinding);\n          }\n        }\n\n        break;\n\n      case \"AssignmentPattern\":\n        this.checkLVal(expr.left, bindingType, checkClashes, \"assignment pattern\");\n        break;\n\n      case \"RestElement\":\n        this.checkLVal(expr.argument, bindingType, checkClashes, \"rest element\");\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.checkLVal(expr.expression, bindingType, checkClashes, \"parenthesized expression\");\n        break;\n\n      default:\n        {\n          this.raise(expr.start, bindingType === BIND_NONE ? ErrorMessages.InvalidLhs : ErrorMessages.InvalidLhsBinding, contextDescription);\n        }\n    }\n  }\n\n  checkToRestConversion(node) {\n    if (node.argument.type !== \"Identifier\" && node.argument.type !== \"MemberExpression\") {\n      this.raise(node.argument.start, ErrorMessages.InvalidRestAssignmentPattern);\n    }\n  }\n\n  checkCommaAfterRest(close) {\n    if (this.match(types.comma)) {\n      if (this.lookaheadCharCode() === close) {\n        this.raiseTrailingCommaAfterRest(this.state.start);\n      } else {\n        this.raiseRestNotLast(this.state.start);\n      }\n    }\n  }\n\n  raiseRestNotLast(pos) {\n    throw this.raise(pos, ErrorMessages.ElementAfterRest);\n  }\n\n  raiseTrailingCommaAfterRest(pos) {\n    this.raise(pos, ErrorMessages.RestTrailingComma);\n  }\n\n}\n\nclass ExpressionParser extends LValParser {\n  checkProto(prop, isRecord, protoRef, refExpressionErrors) {\n    if (prop.type === \"SpreadElement\" || prop.type === \"ObjectMethod\" || prop.computed || prop.shorthand) {\n      return;\n    }\n\n    const key = prop.key;\n    const name = key.type === \"Identifier\" ? key.name : key.value;\n\n    if (name === \"__proto__\") {\n      if (isRecord) {\n        this.raise(key.start, ErrorMessages.RecordNoProto);\n        return;\n      }\n\n      if (protoRef.used) {\n        if (refExpressionErrors) {\n          if (refExpressionErrors.doubleProto === -1) {\n            refExpressionErrors.doubleProto = key.start;\n          }\n        } else {\n          this.raise(key.start, ErrorMessages.DuplicateProto);\n        }\n      }\n\n      protoRef.used = true;\n    }\n  }\n\n  shouldExitDescending(expr, potentialArrowAt) {\n    return expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt;\n  }\n\n  getExpression() {\n    let paramFlags = PARAM;\n\n    if (this.hasPlugin(\"topLevelAwait\") && this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n    this.nextToken();\n    const expr = this.parseExpression();\n\n    if (!this.match(types.eof)) {\n      this.unexpected();\n    }\n\n    expr.comments = this.state.comments;\n    expr.errors = this.state.errors;\n    return expr;\n  }\n\n  parseExpression(disallowIn, refExpressionErrors) {\n    if (disallowIn) {\n      return this.disallowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n    }\n\n    return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n  }\n\n  parseExpressionBase(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(refExpressionErrors);\n\n    if (this.match(types.comma)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.expressions = [expr];\n\n      while (this.eat(types.comma)) {\n        node.expressions.push(this.parseMaybeAssign(refExpressionErrors));\n      }\n\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n\n    return expr;\n  }\n\n  parseMaybeAssignDisallowIn(refExpressionErrors, afterLeftParse, refNeedsArrowPos) {\n    return this.disallowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos));\n  }\n\n  parseMaybeAssignAllowIn(refExpressionErrors, afterLeftParse, refNeedsArrowPos) {\n    return this.allowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos));\n  }\n\n  parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    if (this.isContextual(\"yield\")) {\n      if (this.prodParam.hasYield) {\n        let left = this.parseYield();\n\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startPos, startLoc);\n        }\n\n        return left;\n      } else {\n        this.state.exprAllowed = false;\n      }\n    }\n\n    let ownExpressionErrors;\n\n    if (refExpressionErrors) {\n      ownExpressionErrors = false;\n    } else {\n      refExpressionErrors = new ExpressionErrors();\n      ownExpressionErrors = true;\n    }\n\n    if (this.match(types.parenL) || this.match(types.name)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n\n    let left = this.parseMaybeConditional(refExpressionErrors, refNeedsArrowPos);\n\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startPos, startLoc);\n    }\n\n    if (this.state.type.isAssign) {\n      const node = this.startNodeAt(startPos, startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n\n      if (this.match(types.eq)) {\n        node.left = this.toAssignable(left);\n        refExpressionErrors.doubleProto = -1;\n      } else {\n        node.left = left;\n      }\n\n      if (refExpressionErrors.shorthandAssign >= node.left.start) {\n        refExpressionErrors.shorthandAssign = -1;\n      }\n\n      this.checkLVal(left, undefined, undefined, \"assignment expression\");\n      this.next();\n      node.right = this.parseMaybeAssign();\n      return this.finishNode(node, \"AssignmentExpression\");\n    } else if (ownExpressionErrors) {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    return left;\n  }\n\n  parseMaybeConditional(refExpressionErrors, refNeedsArrowPos) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseConditional(expr, startPos, startLoc, refNeedsArrowPos);\n  }\n\n  parseConditional(expr, startPos, startLoc, refNeedsArrowPos) {\n    if (this.eat(types.question)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssignAllowIn();\n      this.expect(types.colon);\n      node.alternate = this.parseMaybeAssign();\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    return expr;\n  }\n\n  parseExprOps(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnary(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseExprOp(expr, startPos, startLoc, -1);\n  }\n\n  parseExprOp(left, leftStartPos, leftStartLoc, minPrec) {\n    let prec = this.state.type.binop;\n\n    if (prec != null && (this.prodParam.hasIn || !this.match(types._in))) {\n      if (prec > minPrec) {\n        const op = this.state.type;\n\n        if (op === types.pipeline) {\n          this.expectPlugin(\"pipelineOperator\");\n\n          if (this.state.inFSharpPipelineDirectBody) {\n            return left;\n          }\n\n          this.state.inPipeline = true;\n          this.checkPipelineAtInfixOperator(left, leftStartPos);\n        }\n\n        const node = this.startNodeAt(leftStartPos, leftStartLoc);\n        node.left = left;\n        node.operator = this.state.value;\n\n        if (op === types.exponent && left.type === \"UnaryExpression\" && (this.options.createParenthesizedExpressions || !(left.extra && left.extra.parenthesized))) {\n          this.raise(left.argument.start, ErrorMessages.UnexpectedTokenUnaryExponentiation);\n        }\n\n        const logical = op === types.logicalOR || op === types.logicalAND;\n        const coalesce = op === types.nullishCoalescing;\n\n        if (coalesce) {\n          prec = types.logicalAND.binop;\n        }\n\n        this.next();\n\n        if (op === types.pipeline && this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"minimal\") {\n          if (this.match(types.name) && this.state.value === \"await\" && this.prodParam.hasAwait) {\n            throw this.raise(this.state.start, ErrorMessages.UnexpectedAwaitAfterPipelineBody);\n          }\n        }\n\n        node.right = this.parseExprOpRightExpr(op, prec);\n        this.finishNode(node, logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\");\n        const nextOp = this.state.type;\n\n        if (coalesce && (nextOp === types.logicalOR || nextOp === types.logicalAND) || logical && nextOp === types.nullishCoalescing) {\n          throw this.raise(this.state.start, ErrorMessages.MixingCoalesceWithLogical);\n        }\n\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n      }\n    }\n\n    return left;\n  }\n\n  parseExprOpRightExpr(op, prec) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    switch (op) {\n      case types.pipeline:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"smart\":\n            return this.withTopicPermittingContext(() => {\n              return this.parseSmartPipelineBody(this.parseExprOpBaseRightExpr(op, prec), startPos, startLoc);\n            });\n\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec);\n            });\n        }\n\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec);\n    }\n  }\n\n  parseExprOpBaseRightExpr(op, prec) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseExprOp(this.parseMaybeUnary(), startPos, startLoc, op.rightAssociative ? prec - 1 : prec);\n  }\n\n  parseMaybeUnary(refExpressionErrors) {\n    if (this.isContextual(\"await\") && this.isAwaitAllowed()) {\n      return this.parseAwait();\n    }\n\n    const update = this.match(types.incDec);\n    const node = this.startNode();\n\n    if (this.state.type.prefix) {\n      node.operator = this.state.value;\n      node.prefix = true;\n\n      if (this.match(types._throw)) {\n        this.expectPlugin(\"throwExpressions\");\n      }\n\n      const isDelete = this.match(types._delete);\n      this.next();\n      node.argument = this.parseMaybeUnary();\n      this.checkExpressionErrors(refExpressionErrors, true);\n\n      if (this.state.strict && isDelete) {\n        const arg = node.argument;\n\n        if (arg.type === \"Identifier\") {\n          this.raise(node.start, ErrorMessages.StrictDelete);\n        } else if ((arg.type === \"MemberExpression\" || arg.type === \"OptionalMemberExpression\") && arg.property.type === \"PrivateName\") {\n          this.raise(node.start, ErrorMessages.DeletePrivateField);\n        }\n      }\n\n      if (!update) {\n        return this.finishNode(node, \"UnaryExpression\");\n      }\n    }\n\n    return this.parseUpdate(node, update, refExpressionErrors);\n  }\n\n  parseUpdate(node, update, refExpressionErrors) {\n    if (update) {\n      this.checkLVal(node.argument, undefined, undefined, \"prefix operation\");\n      return this.finishNode(node, \"UpdateExpression\");\n    }\n\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refExpressionErrors);\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n\n    while (this.state.type.postfix && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.checkLVal(expr, undefined, undefined, \"postfix operation\");\n      this.next();\n      expr = this.finishNode(node, \"UpdateExpression\");\n    }\n\n    return expr;\n  }\n\n  parseExprSubscripts(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseSubscripts(expr, startPos, startLoc);\n  }\n\n  parseSubscripts(base, startPos, startLoc, noCalls) {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n      stop: false\n    };\n\n    do {\n      const oldMaybeInAsyncArrowHead = this.state.maybeInAsyncArrowHead;\n\n      if (state.maybeAsyncArrow) {\n        this.state.maybeInAsyncArrowHead = true;\n      }\n\n      base = this.parseSubscript(base, startPos, startLoc, noCalls, state);\n      state.maybeAsyncArrow = false;\n      this.state.maybeInAsyncArrowHead = oldMaybeInAsyncArrowHead;\n    } while (!state.stop);\n\n    return base;\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    if (!noCalls && this.eat(types.doubleColon)) {\n      return this.parseBind(base, startPos, startLoc, noCalls, state);\n    } else if (this.match(types.backQuote)) {\n      return this.parseTaggedTemplateExpression(base, startPos, startLoc, state);\n    }\n\n    let optional = false;\n\n    if (this.match(types.questionDot)) {\n      state.optionalChainMember = optional = true;\n\n      if (noCalls && this.lookaheadCharCode() === 40) {\n        state.stop = true;\n        return base;\n      }\n\n      this.next();\n    }\n\n    if (!noCalls && this.match(types.parenL)) {\n      return this.parseCoverCallAndAsyncArrowHead(base, startPos, startLoc, state, optional);\n    } else if (optional || this.match(types.bracketL) || this.eat(types.dot)) {\n      return this.parseMember(base, startPos, startLoc, state, optional);\n    } else {\n      state.stop = true;\n      return base;\n    }\n  }\n\n  parseMember(base, startPos, startLoc, state, optional) {\n    const node = this.startNodeAt(startPos, startLoc);\n    const computed = this.eat(types.bracketL);\n    node.object = base;\n    node.computed = computed;\n    const property = computed ? this.parseExpression() : this.parseMaybePrivateName(true);\n\n    if (property.type === \"PrivateName\") {\n      if (node.object.type === \"Super\") {\n        this.raise(startPos, ErrorMessages.SuperPrivateField);\n      }\n\n      this.classScope.usePrivateName(property.id.name, property.start);\n    }\n\n    node.property = property;\n\n    if (computed) {\n      this.expect(types.bracketR);\n    }\n\n    if (state.optionalChainMember) {\n      node.optional = optional;\n      return this.finishNode(node, \"OptionalMemberExpression\");\n    } else {\n      return this.finishNode(node, \"MemberExpression\");\n    }\n  }\n\n  parseBind(base, startPos, startLoc, noCalls, state) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    node.callee = this.parseNoCallExpr();\n    state.stop = true;\n    return this.parseSubscripts(this.finishNode(node, \"BindExpression\"), startPos, startLoc, noCalls);\n  }\n\n  parseCoverCallAndAsyncArrowHead(base, startPos, startLoc, state, optional) {\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldYieldPos = this.state.yieldPos;\n    const oldAwaitPos = this.state.awaitPos;\n    this.state.maybeInArrowParameters = true;\n    this.state.yieldPos = -1;\n    this.state.awaitPos = -1;\n    this.next();\n    let node = this.startNodeAt(startPos, startLoc);\n    node.callee = base;\n\n    if (state.optionalChainMember) {\n      node.optional = optional;\n    }\n\n    if (optional) {\n      node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n    } else {\n      node.arguments = this.parseCallExpressionArguments(types.parenR, state.maybeAsyncArrow, base.type === \"Import\", base.type !== \"Super\", node);\n    }\n\n    this.finishCallExpression(node, state.optionalChainMember);\n\n    if (state.maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n      state.stop = true;\n      node = this.parseAsyncArrowFromCallExpression(this.startNodeAt(startPos, startLoc), node);\n      this.checkYieldAwaitInDefaultParams();\n      this.state.yieldPos = oldYieldPos;\n      this.state.awaitPos = oldAwaitPos;\n    } else {\n      this.toReferencedListDeep(node.arguments);\n      if (oldYieldPos !== -1) this.state.yieldPos = oldYieldPos;\n\n      if (!this.isAwaitAllowed() && !oldMaybeInArrowParameters || oldAwaitPos !== -1) {\n        this.state.awaitPos = oldAwaitPos;\n      }\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node;\n  }\n\n  parseTaggedTemplateExpression(base, startPos, startLoc, state) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n\n    if (state.optionalChainMember) {\n      this.raise(startPos, ErrorMessages.OptionalChainingNoTemplate);\n    }\n\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n\n  atPossibleAsyncArrow(base) {\n    return base.type === \"Identifier\" && base.name === \"async\" && this.state.lastTokEnd === base.end && !this.canInsertSemicolon() && base.end - base.start === 5 && base.start === this.state.potentialArrowAt;\n  }\n\n  finishCallExpression(node, optional) {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length === 2) {\n        this.expectPlugin(\"moduleAttributes\");\n      }\n\n      if (node.arguments.length === 0 || node.arguments.length > 2) {\n        this.raise(node.start, ErrorMessages.ImportCallArity, this.hasPlugin(\"moduleAttributes\") ? \"one or two arguments\" : \"one argument\");\n      } else {\n        for (let _i = 0, _node$arguments = node.arguments; _i < _node$arguments.length; _i++) {\n          const arg = _node$arguments[_i];\n\n          if (arg.type === \"SpreadElement\") {\n            this.raise(arg.start, ErrorMessages.ImportCallSpreadArgument);\n          }\n        }\n      }\n    }\n\n    return this.finishNode(node, optional ? \"OptionalCallExpression\" : \"CallExpression\");\n  }\n\n  parseCallExpressionArguments(close, possibleAsyncArrow, dynamicImport, allowPlaceholder, nodeForExtra) {\n    const elts = [];\n    let innerParenStart;\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma);\n\n        if (this.match(close)) {\n          if (dynamicImport && !this.hasPlugin(\"moduleAttributes\")) {\n            this.raise(this.state.lastTokStart, ErrorMessages.ImportCallArgumentTrailingComma);\n          }\n\n          if (nodeForExtra) {\n            this.addExtra(nodeForExtra, \"trailingComma\", this.state.lastTokStart);\n          }\n\n          this.next();\n          break;\n        }\n      }\n\n      if (this.match(types.parenL) && !innerParenStart) {\n        innerParenStart = this.state.start;\n      }\n\n      elts.push(this.parseExprListItem(false, possibleAsyncArrow ? new ExpressionErrors() : undefined, possibleAsyncArrow ? {\n        start: 0\n      } : undefined, allowPlaceholder));\n    }\n\n    if (possibleAsyncArrow && innerParenStart && this.shouldParseAsyncArrow()) {\n      this.unexpected();\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return elts;\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(types.arrow) && !this.canInsertSemicolon();\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    var _call$extra;\n\n    this.expect(types.arrow);\n    this.parseArrowExpression(node, call.arguments, true, (_call$extra = call.extra) == null ? void 0 : _call$extra.trailingComma);\n    return node;\n  }\n\n  parseNoCallExpr() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n  }\n\n  parseExprAtom(refExpressionErrors) {\n    if (this.state.type === types.slash) this.readRegexp();\n    const canBeArrow = this.state.potentialArrowAt === this.state.start;\n    let node;\n\n    switch (this.state.type) {\n      case types._super:\n        return this.parseSuper();\n\n      case types._import:\n        node = this.startNode();\n        this.next();\n\n        if (this.match(types.dot)) {\n          return this.parseImportMetaProperty(node);\n        }\n\n        if (!this.match(types.parenL)) {\n          this.raise(this.state.lastTokStart, ErrorMessages.UnsupportedImport);\n        }\n\n        return this.finishNode(node, \"Import\");\n\n      case types._this:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n\n      case types.name:\n        {\n          const containsEsc = this.state.containsEsc;\n          const id = this.parseIdentifier();\n\n          if (!containsEsc && id.name === \"async\" && !this.canInsertSemicolon()) {\n            if (this.match(types._function)) {\n              const last = this.state.context.length - 1;\n\n              if (this.state.context[last] !== types$1.functionStatement) {\n                throw new Error(\"Internal error\");\n              }\n\n              this.state.context[last] = types$1.functionExpression;\n              this.next();\n              return this.parseFunction(this.startNodeAtNode(id), undefined, true);\n            } else if (this.match(types.name)) {\n              return this.parseAsyncArrowUnaryFunction(id);\n            }\n          }\n\n          if (canBeArrow && this.match(types.arrow) && !this.canInsertSemicolon()) {\n            this.next();\n            return this.parseArrowExpression(this.startNodeAtNode(id), [id], false);\n          }\n\n          return id;\n        }\n\n      case types._do:\n        {\n          return this.parseDo();\n        }\n\n      case types.regexp:\n        {\n          const value = this.state.value;\n          node = this.parseLiteral(value.value, \"RegExpLiteral\");\n          node.pattern = value.pattern;\n          node.flags = value.flags;\n          return node;\n        }\n\n      case types.num:\n        return this.parseLiteral(this.state.value, \"NumericLiteral\");\n\n      case types.bigint:\n        return this.parseLiteral(this.state.value, \"BigIntLiteral\");\n\n      case types.decimal:\n        return this.parseLiteral(this.state.value, \"DecimalLiteral\");\n\n      case types.string:\n        return this.parseLiteral(this.state.value, \"StringLiteral\");\n\n      case types._null:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"NullLiteral\");\n\n      case types._true:\n      case types._false:\n        return this.parseBooleanLiteral();\n\n      case types.parenL:\n        return this.parseParenAndDistinguishExpression(canBeArrow);\n\n      case types.bracketBarL:\n      case types.bracketHashL:\n        {\n          return this.parseArrayLike(this.state.type === types.bracketBarL ? types.bracketBarR : types.bracketR, false, true, refExpressionErrors);\n        }\n\n      case types.bracketL:\n        {\n          return this.parseArrayLike(types.bracketR, true, false, refExpressionErrors);\n        }\n\n      case types.braceBarL:\n      case types.braceHashL:\n        {\n          return this.parseObjectLike(this.state.type === types.braceBarL ? types.braceBarR : types.braceR, false, true, refExpressionErrors);\n        }\n\n      case types.braceL:\n        {\n          return this.parseObjectLike(types.braceR, false, false, refExpressionErrors);\n        }\n\n      case types._function:\n        return this.parseFunctionOrFunctionSent();\n\n      case types.at:\n        this.parseDecorators();\n\n      case types._class:\n        node = this.startNode();\n        this.takeDecorators(node);\n        return this.parseClass(node, false);\n\n      case types._new:\n        return this.parseNewOrNewTarget();\n\n      case types.backQuote:\n        return this.parseTemplate(false);\n\n      case types.doubleColon:\n        {\n          node = this.startNode();\n          this.next();\n          node.object = null;\n          const callee = node.callee = this.parseNoCallExpr();\n\n          if (callee.type === \"MemberExpression\") {\n            return this.finishNode(node, \"BindExpression\");\n          } else {\n            throw this.raise(callee.start, ErrorMessages.UnsupportedBind);\n          }\n        }\n\n      case types.hash:\n        {\n          if (this.state.inPipeline) {\n            node = this.startNode();\n\n            if (this.getPluginOption(\"pipelineOperator\", \"proposal\") !== \"smart\") {\n              this.raise(node.start, ErrorMessages.PrimaryTopicRequiresSmartPipeline);\n            }\n\n            this.next();\n\n            if (!this.primaryTopicReferenceIsAllowedInCurrentTopicContext()) {\n              this.raise(node.start, ErrorMessages.PrimaryTopicNotAllowed);\n            }\n\n            this.registerTopicReference();\n            return this.finishNode(node, \"PipelinePrimaryTopicReference\");\n          }\n\n          const nextCh = this.input.codePointAt(this.state.end);\n\n          if (isIdentifierStart(nextCh) || nextCh === 92) {\n            const start = this.state.start;\n            node = this.parseMaybePrivateName(true);\n\n            if (this.match(types._in)) {\n              this.expectPlugin(\"privateIn\");\n              this.classScope.usePrivateName(node.id.name, node.start);\n            } else if (this.hasPlugin(\"privateIn\")) {\n              this.raise(this.state.start, ErrorMessages.PrivateInExpectedIn, node.id.name);\n            } else {\n              throw this.unexpected(start);\n            }\n\n            return node;\n          }\n        }\n\n      case types.relational:\n        {\n          if (this.state.value === \"<\") {\n            const lookaheadCh = this.input.codePointAt(this.nextTokenStart());\n\n            if (isIdentifierStart(lookaheadCh) || lookaheadCh === 62) {\n              this.expectOnePlugin([\"jsx\", \"flow\", \"typescript\"]);\n            }\n          }\n        }\n\n      default:\n        throw this.unexpected();\n    }\n  }\n\n  parseAsyncArrowUnaryFunction(id) {\n    const node = this.startNodeAtNode(id);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldMaybeInAsyncArrowHead = this.state.maybeInAsyncArrowHead;\n    const oldYieldPos = this.state.yieldPos;\n    const oldAwaitPos = this.state.awaitPos;\n    this.state.maybeInArrowParameters = true;\n    this.state.maybeInAsyncArrowHead = true;\n    this.state.yieldPos = -1;\n    this.state.awaitPos = -1;\n    const params = [this.parseIdentifier()];\n\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(this.state.pos, ErrorMessages.LineTerminatorBeforeArrow);\n    }\n\n    this.expect(types.arrow);\n    this.checkYieldAwaitInDefaultParams();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.maybeInAsyncArrowHead = oldMaybeInAsyncArrowHead;\n    this.state.yieldPos = oldYieldPos;\n    this.state.awaitPos = oldAwaitPos;\n    this.parseArrowExpression(node, params, true);\n    return node;\n  }\n\n  parseDo() {\n    this.expectPlugin(\"doExpressions\");\n    const node = this.startNode();\n    this.next();\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    node.body = this.parseBlock();\n    this.state.labels = oldLabels;\n    return this.finishNode(node, \"DoExpression\");\n  }\n\n  parseSuper() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.match(types.parenL) && !this.scope.allowDirectSuper && !this.options.allowSuperOutsideMethod) {\n      this.raise(node.start, ErrorMessages.SuperNotAllowed);\n    } else if (!this.scope.allowSuper && !this.options.allowSuperOutsideMethod) {\n      this.raise(node.start, ErrorMessages.UnexpectedSuper);\n    }\n\n    if (!this.match(types.parenL) && !this.match(types.bracketL) && !this.match(types.dot)) {\n      this.raise(node.start, ErrorMessages.UnsupportedSuper);\n    }\n\n    return this.finishNode(node, \"Super\");\n  }\n\n  parseBooleanLiteral() {\n    const node = this.startNode();\n    node.value = this.match(types._true);\n    this.next();\n    return this.finishNode(node, \"BooleanLiteral\");\n  }\n\n  parseMaybePrivateName(isPrivateNameAllowed) {\n    const isPrivate = this.match(types.hash);\n\n    if (isPrivate) {\n      this.expectOnePlugin([\"classPrivateProperties\", \"classPrivateMethods\"]);\n\n      if (!isPrivateNameAllowed) {\n        this.raise(this.state.pos, ErrorMessages.UnexpectedPrivateField);\n      }\n\n      const node = this.startNode();\n      this.next();\n      this.assertNoSpace(\"Unexpected space between # and identifier\");\n      node.id = this.parseIdentifier(true);\n      return this.finishNode(node, \"PrivateName\");\n    } else {\n      return this.parseIdentifier(true);\n    }\n  }\n\n  parseFunctionOrFunctionSent() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.prodParam.hasYield && this.match(types.dot)) {\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"function\");\n      this.next();\n      return this.parseMetaProperty(node, meta, \"sent\");\n    }\n\n    return this.parseFunction(node);\n  }\n\n  parseMetaProperty(node, meta, propertyName) {\n    node.meta = meta;\n\n    if (meta.name === \"function\" && propertyName === \"sent\") {\n      if (this.isContextual(propertyName)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        this.unexpected();\n      }\n    }\n\n    const containsEsc = this.state.containsEsc;\n    node.property = this.parseIdentifier(true);\n\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(node.property.start, ErrorMessages.UnsupportedMetaProperty, meta.name, propertyName);\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  parseImportMetaProperty(node) {\n    const id = this.createIdentifier(this.startNodeAtNode(node), \"import\");\n    this.next();\n\n    if (this.isContextual(\"meta\")) {\n      if (!this.inModule) {\n        this.raiseWithData(id.start, {\n          code: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\"\n        }, ErrorMessages.ImportMetaOutsideModule);\n      }\n\n      this.sawUnambiguousESM = true;\n    }\n\n    return this.parseMetaProperty(node, id, \"meta\");\n  }\n\n  parseLiteral(value, type, startPos, startLoc) {\n    startPos = startPos || this.state.start;\n    startLoc = startLoc || this.state.startLoc;\n    const node = this.startNodeAt(startPos, startLoc);\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(node, \"raw\", this.input.slice(startPos, this.state.end));\n    node.value = value;\n    this.next();\n    return this.finishNode(node, type);\n  }\n\n  parseParenAndDistinguishExpression(canBeArrow) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let val;\n    this.next();\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldYieldPos = this.state.yieldPos;\n    const oldAwaitPos = this.state.awaitPos;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.yieldPos = -1;\n    this.state.awaitPos = -1;\n    this.state.inFSharpPipelineDirectBody = false;\n    const innerStartPos = this.state.start;\n    const innerStartLoc = this.state.startLoc;\n    const exprList = [];\n    const refExpressionErrors = new ExpressionErrors();\n    const refNeedsArrowPos = {\n      start: 0\n    };\n    let first = true;\n    let spreadStart;\n    let optionalCommaStart;\n\n    while (!this.match(types.parenR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma, refNeedsArrowPos.start || null);\n\n        if (this.match(types.parenR)) {\n          optionalCommaStart = this.state.start;\n          break;\n        }\n      }\n\n      if (this.match(types.ellipsis)) {\n        const spreadNodeStartPos = this.state.start;\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStart = this.state.start;\n        exprList.push(this.parseParenItem(this.parseRestBinding(), spreadNodeStartPos, spreadNodeStartLoc));\n        this.checkCommaAfterRest(41);\n        break;\n      } else {\n        exprList.push(this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem, refNeedsArrowPos));\n      }\n    }\n\n    const innerEndPos = this.state.lastTokEnd;\n    const innerEndLoc = this.state.lastTokEndLoc;\n    this.expect(types.parenR);\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let arrowNode = this.startNodeAt(startPos, startLoc);\n\n    if (canBeArrow && this.shouldParseArrow() && (arrowNode = this.parseArrow(arrowNode))) {\n      if (!this.isAwaitAllowed() && !this.state.maybeInAsyncArrowHead) {\n        this.state.awaitPos = oldAwaitPos;\n      }\n\n      this.checkYieldAwaitInDefaultParams();\n      this.state.yieldPos = oldYieldPos;\n      this.state.awaitPos = oldAwaitPos;\n\n      for (let _i2 = 0; _i2 < exprList.length; _i2++) {\n        const param = exprList[_i2];\n\n        if (param.extra && param.extra.parenthesized) {\n          this.unexpected(param.extra.parenStart);\n        }\n      }\n\n      this.parseArrowExpression(arrowNode, exprList, false);\n      return arrowNode;\n    }\n\n    if (oldYieldPos !== -1) this.state.yieldPos = oldYieldPos;\n    if (oldAwaitPos !== -1) this.state.awaitPos = oldAwaitPos;\n\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStart);\n    }\n\n    if (optionalCommaStart) this.unexpected(optionalCommaStart);\n    if (spreadStart) this.unexpected(spreadStart);\n    this.checkExpressionErrors(refExpressionErrors, true);\n    if (refNeedsArrowPos.start) this.unexpected(refNeedsArrowPos.start);\n    this.toReferencedListDeep(exprList, true);\n\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartPos, innerStartLoc);\n      val.expressions = exprList;\n      this.finishNodeAt(val, \"SequenceExpression\", innerEndPos, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n\n    if (!this.options.createParenthesizedExpressions) {\n      this.addExtra(val, \"parenthesized\", true);\n      this.addExtra(val, \"parenStart\", startPos);\n      return val;\n    }\n\n    const parenExpression = this.startNodeAt(startPos, startLoc);\n    parenExpression.expression = val;\n    this.finishNode(parenExpression, \"ParenthesizedExpression\");\n    return parenExpression;\n  }\n\n  shouldParseArrow() {\n    return !this.canInsertSemicolon();\n  }\n\n  parseArrow(node) {\n    if (this.eat(types.arrow)) {\n      return node;\n    }\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    return node;\n  }\n\n  parseNewOrNewTarget() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.match(types.dot)) {\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"new\");\n      this.next();\n      const metaProp = this.parseMetaProperty(node, meta, \"target\");\n\n      if (!this.scope.inNonArrowFunction && !this.scope.inClass) {\n        let error = ErrorMessages.UnexpectedNewTarget;\n\n        if (this.hasPlugin(\"classProperties\")) {\n          error += \" or class properties\";\n        }\n\n        this.raise(metaProp.start, error);\n      }\n\n      return metaProp;\n    }\n\n    return this.parseNew(node);\n  }\n\n  parseNew(node) {\n    node.callee = this.parseNoCallExpr();\n\n    if (node.callee.type === \"Import\") {\n      this.raise(node.callee.start, ErrorMessages.ImportCallNotNewExpression);\n    } else if (node.callee.type === \"OptionalMemberExpression\" || node.callee.type === \"OptionalCallExpression\") {\n      this.raise(this.state.lastTokEnd, ErrorMessages.OptionalChainingNoNew);\n    } else if (this.eat(types.questionDot)) {\n      this.raise(this.state.start, ErrorMessages.OptionalChainingNoNew);\n    }\n\n    this.parseNewArguments(node);\n    return this.finishNode(node, \"NewExpression\");\n  }\n\n  parseNewArguments(node) {\n    if (this.eat(types.parenL)) {\n      const args = this.parseExprList(types.parenR);\n      this.toReferencedList(args);\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n  }\n\n  parseTemplateElement(isTagged) {\n    const elem = this.startNode();\n\n    if (this.state.value === null) {\n      if (!isTagged) {\n        this.raise(this.state.start + 1, ErrorMessages.InvalidEscapeSequenceTemplate);\n      }\n    }\n\n    elem.value = {\n      raw: this.input.slice(this.state.start, this.state.end).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: this.state.value\n    };\n    this.next();\n    elem.tail = this.match(types.backQuote);\n    return this.finishNode(elem, \"TemplateElement\");\n  }\n\n  parseTemplate(isTagged) {\n    const node = this.startNode();\n    this.next();\n    node.expressions = [];\n    let curElt = this.parseTemplateElement(isTagged);\n    node.quasis = [curElt];\n\n    while (!curElt.tail) {\n      this.expect(types.dollarBraceL);\n      node.expressions.push(this.parseExpression());\n      this.expect(types.braceR);\n      node.quasis.push(curElt = this.parseTemplateElement(isTagged));\n    }\n\n    this.next();\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n\n  parseObjectLike(close, isPattern, isRecord, refExpressionErrors) {\n    if (isRecord) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const propHash = Object.create(null);\n    let first = true;\n    const node = this.startNode();\n    node.properties = [];\n    this.next();\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma);\n\n        if (this.match(close)) {\n          this.addExtra(node, \"trailingComma\", this.state.lastTokStart);\n          this.next();\n          break;\n        }\n      }\n\n      const prop = this.parsePropertyDefinition(isPattern, refExpressionErrors);\n\n      if (!isPattern) {\n        this.checkProto(prop, isRecord, propHash, refExpressionErrors);\n      }\n\n      if (isRecord && prop.type !== \"ObjectProperty\" && prop.type !== \"SpreadElement\") {\n        this.raise(prop.start, ErrorMessages.InvalidRecordProperty);\n      }\n\n      if (prop.shorthand) {\n        this.addExtra(prop, \"shorthand\", true);\n      }\n\n      node.properties.push(prop);\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let type = \"ObjectExpression\";\n\n    if (isPattern) {\n      type = \"ObjectPattern\";\n    } else if (isRecord) {\n      type = \"RecordExpression\";\n    }\n\n    return this.finishNode(node, type);\n  }\n\n  maybeAsyncOrAccessorProp(prop) {\n    return !prop.computed && prop.key.type === \"Identifier\" && (this.isLiteralPropertyName() || this.match(types.bracketL) || this.match(types.star));\n  }\n\n  parsePropertyDefinition(isPattern, refExpressionErrors) {\n    let decorators = [];\n\n    if (this.match(types.at)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(this.state.start, ErrorMessages.UnsupportedPropertyDecorator);\n      }\n\n      while (this.match(types.at)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n\n    const prop = this.startNode();\n    let isGenerator = false;\n    let isAsync = false;\n    let isAccessor = false;\n    let startPos;\n    let startLoc;\n\n    if (this.match(types.ellipsis)) {\n      if (decorators.length) this.unexpected();\n\n      if (isPattern) {\n        this.next();\n        prop.argument = this.parseIdentifier();\n        this.checkCommaAfterRest(125);\n        return this.finishNode(prop, \"RestElement\");\n      }\n\n      return this.parseSpread();\n    }\n\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    prop.method = false;\n\n    if (isPattern || refExpressionErrors) {\n      startPos = this.state.start;\n      startLoc = this.state.startLoc;\n    }\n\n    if (!isPattern) {\n      isGenerator = this.eat(types.star);\n    }\n\n    const containsEsc = this.state.containsEsc;\n    const key = this.parsePropertyName(prop, false);\n\n    if (!isPattern && !isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {\n      const keyName = key.name;\n\n      if (keyName === \"async\" && !this.hasPrecedingLineBreak()) {\n        isAsync = true;\n        isGenerator = this.eat(types.star);\n        this.parsePropertyName(prop, false);\n      }\n\n      if (keyName === \"get\" || keyName === \"set\") {\n        isAccessor = true;\n        prop.kind = keyName;\n\n        if (this.match(types.star)) {\n          isGenerator = true;\n          this.raise(this.state.pos, ErrorMessages.AccessorIsGenerator, keyName);\n          this.next();\n        }\n\n        this.parsePropertyName(prop, false);\n      }\n    }\n\n    this.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);\n    return prop;\n  }\n\n  getGetterSetterExpectedParamCount(method) {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n\n  checkGetterSetterParams(method) {\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const start = method.start;\n\n    if (method.params.length !== paramCount) {\n      if (method.kind === \"get\") {\n        this.raise(start, ErrorMessages.BadGetterArity);\n      } else {\n        this.raise(start, ErrorMessages.BadSetterArity);\n      }\n    }\n\n    if (method.kind === \"set\" && method.params[method.params.length - 1].type === \"RestElement\") {\n      this.raise(start, ErrorMessages.BadSetterRestParameter);\n    }\n  }\n\n  parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {\n    if (isAccessor) {\n      this.parseMethod(prop, isGenerator, false, false, false, \"ObjectMethod\");\n      this.checkGetterSetterParams(prop);\n      return prop;\n    }\n\n    if (isAsync || isGenerator || this.match(types.parenL)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(prop, isGenerator, isAsync, false, false, \"ObjectMethod\");\n    }\n  }\n\n  parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {\n    prop.shorthand = false;\n\n    if (this.eat(types.colon)) {\n      prop.value = isPattern ? this.parseMaybeDefault(this.state.start, this.state.startLoc) : this.parseMaybeAssignAllowIn(refExpressionErrors);\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      this.checkReservedWord(prop.key.name, prop.key.start, true, false);\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key.__clone());\n      } else if (this.match(types.eq) && refExpressionErrors) {\n        if (refExpressionErrors.shorthandAssign === -1) {\n          refExpressionErrors.shorthandAssign = this.state.start;\n        }\n\n        prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key.__clone());\n      } else {\n        prop.value = prop.key.__clone();\n      }\n\n      prop.shorthand = true;\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n  }\n\n  parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {\n    const node = this.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) || this.parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors);\n    if (!node) this.unexpected();\n    return node;\n  }\n\n  parsePropertyName(prop, isPrivateNameAllowed) {\n    if (this.eat(types.bracketL)) {\n      prop.computed = true;\n      prop.key = this.parseMaybeAssignAllowIn();\n      this.expect(types.bracketR);\n    } else {\n      const oldInPropertyName = this.state.inPropertyName;\n      this.state.inPropertyName = true;\n      prop.key = this.match(types.num) || this.match(types.string) || this.match(types.bigint) || this.match(types.decimal) ? this.parseExprAtom() : this.parseMaybePrivateName(isPrivateNameAllowed);\n\n      if (prop.key.type !== \"PrivateName\") {\n        prop.computed = false;\n      }\n\n      this.state.inPropertyName = oldInPropertyName;\n    }\n\n    return prop.key;\n  }\n\n  initFunction(node, isAsync) {\n    node.id = null;\n    node.generator = false;\n    node.async = !!isAsync;\n  }\n\n  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {\n    const oldYieldPos = this.state.yieldPos;\n    const oldAwaitPos = this.state.awaitPos;\n    this.state.yieldPos = -1;\n    this.state.awaitPos = -1;\n    this.initFunction(node, isAsync);\n    node.generator = !!isGenerator;\n    const allowModifiers = isConstructor;\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_SUPER | (inClassScope ? SCOPE_CLASS : 0) | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    this.parseFunctionParams(node, allowModifiers);\n    this.parseFunctionBodyAndFinish(node, type, true);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.yieldPos = oldYieldPos;\n    this.state.awaitPos = oldAwaitPos;\n    return node;\n  }\n\n  parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {\n    if (isTuple) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const node = this.startNode();\n    this.next();\n    node.elements = this.parseExprList(close, !isTuple, refExpressionErrors, node);\n\n    if (canBePattern && !this.state.maybeInArrowParameters) {\n      this.toReferencedList(node.elements);\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return this.finishNode(node, isTuple ? \"TupleExpression\" : \"ArrayExpression\");\n  }\n\n  parseArrowExpression(node, params, isAsync, trailingCommaPos) {\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    let flags = functionFlags(isAsync, false);\n\n    if (!this.match(types.bracketL) && this.prodParam.hasIn) {\n      flags |= PARAM_IN;\n    }\n\n    this.prodParam.enter(flags);\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldYieldPos = this.state.yieldPos;\n    const oldAwaitPos = this.state.awaitPos;\n\n    if (params) {\n      this.state.maybeInArrowParameters = true;\n      this.setArrowFunctionParameters(node, params, trailingCommaPos);\n    }\n\n    this.state.maybeInArrowParameters = false;\n    this.state.yieldPos = -1;\n    this.state.awaitPos = -1;\n    this.parseFunctionBody(node, true);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.yieldPos = oldYieldPos;\n    this.state.awaitPos = oldAwaitPos;\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n\n  setArrowFunctionParameters(node, params, trailingCommaPos) {\n    node.params = this.toAssignableList(params, trailingCommaPos);\n  }\n\n  parseFunctionBodyAndFinish(node, type, isMethod = false) {\n    this.parseFunctionBody(node, false, isMethod);\n    this.finishNode(node, type);\n  }\n\n  parseFunctionBody(node, allowExpression, isMethod = false) {\n    const isExpression = allowExpression && !this.match(types.braceL);\n    const oldInParameters = this.state.inParameters;\n    this.state.inParameters = false;\n\n    if (isExpression) {\n      node.body = this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const oldStrict = this.state.strict;\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n      this.prodParam.enter(this.prodParam.currentFlags() | PARAM_RETURN);\n      node.body = this.parseBlock(true, false, hasStrictModeDirective => {\n        const nonSimple = !this.isSimpleParamList(node.params);\n\n        if (hasStrictModeDirective && nonSimple) {\n          const errorPos = (node.kind === \"method\" || node.kind === \"constructor\") && !!node.key ? node.key.end : node.start;\n          this.raise(errorPos, ErrorMessages.IllegalLanguageModeDirective);\n        }\n\n        const strictModeChanged = !oldStrict && this.state.strict;\n        this.checkParams(node, !this.state.strict && !allowExpression && !isMethod && !nonSimple, allowExpression, strictModeChanged);\n\n        if (this.state.strict && node.id) {\n          this.checkLVal(node.id, BIND_OUTSIDE, undefined, \"function name\", undefined, strictModeChanged);\n        }\n      });\n      this.prodParam.exit();\n      this.state.labels = oldLabels;\n    }\n\n    this.state.inParameters = oldInParameters;\n  }\n\n  isSimpleParamList(params) {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (params[i].type !== \"Identifier\") return false;\n    }\n\n    return true;\n  }\n\n  checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged = true) {\n    const nameHash = Object.create(null);\n\n    for (let i = 0; i < node.params.length; i++) {\n      this.checkLVal(node.params[i], BIND_VAR, allowDuplicates ? null : nameHash, \"function parameter list\", undefined, strictModeChanged);\n    }\n  }\n\n  parseExprList(close, allowEmpty, refExpressionErrors, nodeForExtra) {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma);\n\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addExtra(nodeForExtra, \"trailingComma\", this.state.lastTokStart);\n          }\n\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n    }\n\n    return elts;\n  }\n\n  parseExprListItem(allowEmpty, refExpressionErrors, refNeedsArrowPos, allowPlaceholder) {\n    let elt;\n\n    if (this.match(types.comma)) {\n      if (!allowEmpty) {\n        this.raise(this.state.pos, ErrorMessages.UnexpectedToken, \",\");\n      }\n\n      elt = null;\n    } else if (this.match(types.ellipsis)) {\n      const spreadNodeStartPos = this.state.start;\n      const spreadNodeStartLoc = this.state.startLoc;\n      elt = this.parseParenItem(this.parseSpread(refExpressionErrors, refNeedsArrowPos), spreadNodeStartPos, spreadNodeStartLoc);\n    } else if (this.match(types.question)) {\n      this.expectPlugin(\"partialApplication\");\n\n      if (!allowPlaceholder) {\n        this.raise(this.state.start, ErrorMessages.UnexpectedArgumentPlaceholder);\n      }\n\n      const node = this.startNode();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem, refNeedsArrowPos);\n    }\n\n    return elt;\n  }\n\n  parseIdentifier(liberal) {\n    const node = this.startNode();\n    const name = this.parseIdentifierName(node.start, liberal);\n    return this.createIdentifier(node, name);\n  }\n\n  createIdentifier(node, name) {\n    node.name = name;\n    node.loc.identifierName = name;\n    return this.finishNode(node, \"Identifier\");\n  }\n\n  parseIdentifierName(pos, liberal) {\n    let name;\n    const {\n      start,\n      type\n    } = this.state;\n\n    if (type === types.name) {\n      name = this.state.value;\n    } else if (type.keyword) {\n      name = type.keyword;\n      const curContext = this.curContext();\n\n      if ((type === types._class || type === types._function) && (curContext === types$1.functionStatement || curContext === types$1.functionExpression)) {\n        this.state.context.pop();\n      }\n    } else {\n      throw this.unexpected();\n    }\n\n    if (liberal) {\n      this.state.type = types.name;\n    } else {\n      this.checkReservedWord(name, start, !!type.keyword, false);\n    }\n\n    this.next();\n    return name;\n  }\n\n  checkReservedWord(word, startLoc, checkKeywords, isBinding) {\n    if (this.prodParam.hasYield && word === \"yield\") {\n      this.raise(startLoc, ErrorMessages.YieldBindingIdentifier);\n      return;\n    }\n\n    if (word === \"await\") {\n      if (this.prodParam.hasAwait) {\n        this.raise(startLoc, ErrorMessages.AwaitBindingIdentifier);\n        return;\n      }\n\n      if (this.state.awaitPos === -1 && (this.state.maybeInAsyncArrowHead || this.isAwaitAllowed())) {\n        this.state.awaitPos = this.state.start;\n      }\n    }\n\n    if (this.scope.inClass && !this.scope.inNonArrowFunction && word === \"arguments\") {\n      this.raise(startLoc, ErrorMessages.ArgumentsDisallowedInInitializer);\n      return;\n    }\n\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(startLoc, ErrorMessages.UnexpectedKeyword, word);\n      return;\n    }\n\n    const reservedTest = !this.state.strict ? isReservedWord : isBinding ? isStrictBindReservedWord : isStrictReservedWord;\n\n    if (reservedTest(word, this.inModule)) {\n      if (!this.prodParam.hasAwait && word === \"await\") {\n        this.raise(startLoc, ErrorMessages.AwaitNotInAsyncFunction);\n      } else {\n        this.raise(startLoc, ErrorMessages.UnexpectedReservedWord, word);\n      }\n    }\n  }\n\n  isAwaitAllowed() {\n    if (this.scope.inFunction) return this.prodParam.hasAwait;\n    if (this.options.allowAwaitOutsideFunction) return true;\n\n    if (this.hasPlugin(\"topLevelAwait\")) {\n      return this.inModule && this.prodParam.hasAwait;\n    }\n\n    return false;\n  }\n\n  parseAwait() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.state.inParameters) {\n      this.raise(node.start, ErrorMessages.AwaitExpressionFormalParameter);\n    } else if (this.state.awaitPos === -1) {\n      this.state.awaitPos = node.start;\n    }\n\n    if (this.eat(types.star)) {\n      this.raise(node.start, ErrorMessages.ObsoleteAwaitStar);\n    }\n\n    if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n      if (this.hasPrecedingLineBreak() || this.match(types.plusMin) || this.match(types.parenL) || this.match(types.bracketL) || this.match(types.backQuote) || this.match(types.regexp) || this.match(types.slash) || this.hasPlugin(\"v8intrinsic\") && this.match(types.modulo)) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary();\n    }\n\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n\n  parseYield() {\n    const node = this.startNode();\n\n    if (this.state.inParameters) {\n      this.raise(node.start, ErrorMessages.YieldInParameter);\n    } else if (this.state.yieldPos === -1) {\n      this.state.yieldPos = node.start;\n    }\n\n    this.next();\n\n    if (this.match(types.semi) || !this.match(types.star) && !this.state.type.startsExpr || this.hasPrecedingLineBreak()) {\n      node.delegate = false;\n      node.argument = null;\n    } else {\n      node.delegate = this.eat(types.star);\n      node.argument = this.parseMaybeAssign();\n    }\n\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  checkPipelineAtInfixOperator(left, leftStartPos) {\n    if (this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"smart\") {\n      if (left.type === \"SequenceExpression\") {\n        this.raise(leftStartPos, ErrorMessages.PipelineHeadSequenceExpression);\n      }\n    }\n  }\n\n  parseSmartPipelineBody(childExpression, startPos, startLoc) {\n    this.checkSmartPipelineBodyEarlyErrors(childExpression, startPos);\n    return this.parseSmartPipelineBodyInStyle(childExpression, startPos, startLoc);\n  }\n\n  checkSmartPipelineBodyEarlyErrors(childExpression, startPos) {\n    if (this.match(types.arrow)) {\n      throw this.raise(this.state.start, ErrorMessages.PipelineBodyNoArrow);\n    } else if (childExpression.type === \"SequenceExpression\") {\n      this.raise(startPos, ErrorMessages.PipelineBodySequenceExpression);\n    }\n  }\n\n  parseSmartPipelineBodyInStyle(childExpression, startPos, startLoc) {\n    const bodyNode = this.startNodeAt(startPos, startLoc);\n    const isSimpleReference = this.isSimpleReference(childExpression);\n\n    if (isSimpleReference) {\n      bodyNode.callee = childExpression;\n    } else {\n      if (!this.topicReferenceWasUsedInCurrentTopicContext()) {\n        this.raise(startPos, ErrorMessages.PipelineTopicUnused);\n      }\n\n      bodyNode.expression = childExpression;\n    }\n\n    return this.finishNode(bodyNode, isSimpleReference ? \"PipelineBareFunction\" : \"PipelineTopicExpression\");\n  }\n\n  isSimpleReference(expression) {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return !expression.computed && this.isSimpleReference(expression.object);\n\n      case \"Identifier\":\n        return true;\n\n      default:\n        return false;\n    }\n  }\n\n  withTopicPermittingContext(callback) {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      maxNumOfResolvableTopics: 1,\n      maxTopicIndex: null\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  withTopicForbiddingContext(callback) {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      maxNumOfResolvableTopics: 0,\n      maxTopicIndex: null\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  withSoloAwaitPermittingContext(callback) {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n\n  allowInAnd(callback) {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToSet = PARAM_IN & ~flags;\n\n    if (prodParamToSet) {\n      this.prodParam.enter(flags | PARAM_IN);\n\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n\n    return callback();\n  }\n\n  disallowInAnd(callback) {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToClear = PARAM_IN & flags;\n\n    if (prodParamToClear) {\n      this.prodParam.enter(flags & ~PARAM_IN);\n\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n\n    return callback();\n  }\n\n  registerTopicReference() {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n\n  primaryTopicReferenceIsAllowedInCurrentTopicContext() {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n\n  topicReferenceWasUsedInCurrentTopicContext() {\n    return this.state.topicContext.maxTopicIndex != null && this.state.topicContext.maxTopicIndex >= 0;\n  }\n\n  parseFSharpPipelineBody(prec) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n    const ret = this.parseExprOp(this.parseMaybeUnary(), startPos, startLoc, prec);\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return ret;\n  }\n\n}\n\nconst loopLabel = {\n  kind: \"loop\"\n},\n      switchLabel = {\n  kind: \"switch\"\n};\nconst FUNC_NO_FLAGS = 0b000,\n      FUNC_STATEMENT = 0b001,\n      FUNC_HANGING_STATEMENT = 0b010,\n      FUNC_NULLABLE_ID = 0b100;\n\nclass StatementParser extends ExpressionParser {\n  parseTopLevel(file, program) {\n    program.sourceType = this.options.sourceType;\n    program.interpreter = this.parseInterpreterDirective();\n    this.parseBlockBody(program, true, true, types.eof);\n\n    if (this.inModule && !this.options.allowUndeclaredExports && this.scope.undefinedExports.size > 0) {\n      for (let _i = 0, _Array$from = Array.from(this.scope.undefinedExports); _i < _Array$from.length; _i++) {\n        const [name] = _Array$from[_i];\n        const pos = this.scope.undefinedExports.get(name);\n        this.raise(pos, ErrorMessages.ModuleExportUndefined, name);\n      }\n    }\n\n    file.program = this.finishNode(program, \"Program\");\n    file.comments = this.state.comments;\n    if (this.options.tokens) file.tokens = this.tokens;\n    return this.finishNode(file, \"File\");\n  }\n\n  stmtToDirective(stmt) {\n    const expr = stmt.expression;\n    const directiveLiteral = this.startNodeAt(expr.start, expr.loc.start);\n    const directive = this.startNodeAt(stmt.start, stmt.loc.start);\n    const raw = this.input.slice(expr.start, expr.end);\n    const val = directiveLiteral.value = raw.slice(1, -1);\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n    directive.value = this.finishNodeAt(directiveLiteral, \"DirectiveLiteral\", expr.end, expr.loc.end);\n    return this.finishNodeAt(directive, \"Directive\", stmt.end, stmt.loc.end);\n  }\n\n  parseInterpreterDirective() {\n    if (!this.match(types.interpreterDirective)) {\n      return null;\n    }\n\n    const node = this.startNode();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n\n  isLet(context) {\n    if (!this.isContextual(\"let\")) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const nextCh = this.input.charCodeAt(next);\n    if (nextCh === 91) return true;\n    if (context) return false;\n    if (nextCh === 123) return true;\n\n    if (isIdentifierStart(nextCh)) {\n      let pos = next + 1;\n\n      while (isIdentifierChar(this.input.charCodeAt(pos))) {\n        ++pos;\n      }\n\n      const ident = this.input.slice(next, pos);\n      if (!keywordRelationalOperator.test(ident)) return true;\n    }\n\n    return false;\n  }\n\n  parseStatement(context, topLevel) {\n    if (this.match(types.at)) {\n      this.parseDecorators(true);\n    }\n\n    return this.parseStatementContent(context, topLevel);\n  }\n\n  parseStatementContent(context, topLevel) {\n    let starttype = this.state.type;\n    const node = this.startNode();\n    let kind;\n\n    if (this.isLet(context)) {\n      starttype = types._var;\n      kind = \"let\";\n    }\n\n    switch (starttype) {\n      case types._break:\n      case types._continue:\n        return this.parseBreakContinueStatement(node, starttype.keyword);\n\n      case types._debugger:\n        return this.parseDebuggerStatement(node);\n\n      case types._do:\n        return this.parseDoStatement(node);\n\n      case types._for:\n        return this.parseForStatement(node);\n\n      case types._function:\n        if (this.lookaheadCharCode() === 46) break;\n\n        if (context) {\n          if (this.state.strict) {\n            this.raise(this.state.start, ErrorMessages.StrictFunction);\n          } else if (context !== \"if\" && context !== \"label\") {\n            this.raise(this.state.start, ErrorMessages.SloppyFunction);\n          }\n        }\n\n        return this.parseFunctionStatement(node, false, !context);\n\n      case types._class:\n        if (context) this.unexpected();\n        return this.parseClass(node, true);\n\n      case types._if:\n        return this.parseIfStatement(node);\n\n      case types._return:\n        return this.parseReturnStatement(node);\n\n      case types._switch:\n        return this.parseSwitchStatement(node);\n\n      case types._throw:\n        return this.parseThrowStatement(node);\n\n      case types._try:\n        return this.parseTryStatement(node);\n\n      case types._const:\n      case types._var:\n        kind = kind || this.state.value;\n\n        if (context && kind !== \"var\") {\n          this.raise(this.state.start, ErrorMessages.UnexpectedLexicalDeclaration);\n        }\n\n        return this.parseVarStatement(node, kind);\n\n      case types._while:\n        return this.parseWhileStatement(node);\n\n      case types._with:\n        return this.parseWithStatement(node);\n\n      case types.braceL:\n        return this.parseBlock();\n\n      case types.semi:\n        return this.parseEmptyStatement(node);\n\n      case types._import:\n        {\n          const nextTokenCharCode = this.lookaheadCharCode();\n\n          if (nextTokenCharCode === 40 || nextTokenCharCode === 46) {\n            break;\n          }\n        }\n\n      case types._export:\n        {\n          if (!this.options.allowImportExportEverywhere && !topLevel) {\n            this.raise(this.state.start, ErrorMessages.UnexpectedImportExport);\n          }\n\n          this.next();\n          let result;\n\n          if (starttype === types._import) {\n            result = this.parseImport(node);\n\n            if (result.type === \"ImportDeclaration\" && (!result.importKind || result.importKind === \"value\")) {\n              this.sawUnambiguousESM = true;\n            }\n          } else {\n            result = this.parseExport(node);\n\n            if (result.type === \"ExportNamedDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportAllDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportDefaultDeclaration\") {\n              this.sawUnambiguousESM = true;\n            }\n          }\n\n          this.assertModuleNodeAllowed(node);\n          return result;\n        }\n\n      default:\n        {\n          if (this.isAsyncFunction()) {\n            if (context) {\n              this.raise(this.state.start, ErrorMessages.AsyncFunctionInSingleStatementContext);\n            }\n\n            this.next();\n            return this.parseFunctionStatement(node, true, !context);\n          }\n        }\n    }\n\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n\n    if (starttype === types.name && expr.type === \"Identifier\" && this.eat(types.colon)) {\n      return this.parseLabeledStatement(node, maybeName, expr, context);\n    } else {\n      return this.parseExpressionStatement(node, expr);\n    }\n  }\n\n  assertModuleNodeAllowed(node) {\n    if (!this.options.allowImportExportEverywhere && !this.inModule) {\n      this.raiseWithData(node.start, {\n        code: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\"\n      }, ErrorMessages.ImportOutsideModule);\n    }\n  }\n\n  takeDecorators(node) {\n    const decorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    if (decorators.length) {\n      node.decorators = decorators;\n      this.resetStartLocationFromNode(node, decorators[0]);\n      this.state.decoratorStack[this.state.decoratorStack.length - 1] = [];\n    }\n  }\n\n  canHaveLeadingDecorator() {\n    return this.match(types._class);\n  }\n\n  parseDecorators(allowExport) {\n    const currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    while (this.match(types.at)) {\n      const decorator = this.parseDecorator();\n      currentContextDecorators.push(decorator);\n    }\n\n    if (this.match(types._export)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n\n      if (this.hasPlugin(\"decorators\") && !this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n        this.raise(this.state.start, ErrorMessages.DecoratorExportClass);\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(this.state.start, ErrorMessages.UnexpectedLeadingDecorator);\n    }\n  }\n\n  parseDecorator() {\n    this.expectOnePlugin([\"decorators-legacy\", \"decorators\"]);\n    const node = this.startNode();\n    this.next();\n\n    if (this.hasPlugin(\"decorators\")) {\n      this.state.decoratorStack.push([]);\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let expr;\n\n      if (this.eat(types.parenL)) {\n        expr = this.parseExpression();\n        this.expect(types.parenR);\n      } else {\n        expr = this.parseIdentifier(false);\n\n        while (this.eat(types.dot)) {\n          const node = this.startNodeAt(startPos, startLoc);\n          node.object = expr;\n          node.property = this.parseIdentifier(true);\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n      }\n\n      node.expression = this.parseMaybeDecoratorArguments(expr);\n      this.state.decoratorStack.pop();\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n\n    return this.finishNode(node, \"Decorator\");\n  }\n\n  parseMaybeDecoratorArguments(expr) {\n    if (this.eat(types.parenL)) {\n      const node = this.startNodeAtNode(expr);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n\n    return expr;\n  }\n\n  parseBreakContinueStatement(node, keyword) {\n    const isBreak = keyword === \"break\";\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n\n    this.verifyBreakContinue(node, keyword);\n    return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\");\n  }\n\n  verifyBreakContinue(node, keyword) {\n    const isBreak = keyword === \"break\";\n    let i;\n\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n        if (node.label && isBreak) break;\n      }\n    }\n\n    if (i === this.state.labels.length) {\n      this.raise(node.start, ErrorMessages.IllegalBreakContinue, keyword);\n    }\n  }\n\n  parseDebuggerStatement(node) {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n\n  parseHeaderExpression() {\n    this.expect(types.parenL);\n    const val = this.parseExpression();\n    this.expect(types.parenR);\n    return val;\n  }\n\n  parseDoStatement(node) {\n    this.next();\n    this.state.labels.push(loopLabel);\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"do\"));\n    this.state.labels.pop();\n    this.expect(types._while);\n    node.test = this.parseHeaderExpression();\n    this.eat(types.semi);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n\n  parseForStatement(node) {\n    this.next();\n    this.state.labels.push(loopLabel);\n    let awaitAt = -1;\n\n    if (this.isAwaitAllowed() && this.eatContextual(\"await\")) {\n      awaitAt = this.state.lastTokStart;\n    }\n\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(types.parenL);\n\n    if (this.match(types.semi)) {\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n\n      return this.parseFor(node, null);\n    }\n\n    const isLet = this.isLet();\n\n    if (this.match(types._var) || this.match(types._const) || isLet) {\n      const init = this.startNode();\n      const kind = isLet ? \"let\" : this.state.value;\n      this.next();\n      this.parseVar(init, true, kind);\n      this.finishNode(init, \"VariableDeclaration\");\n\n      if ((this.match(types._in) || this.isContextual(\"of\")) && init.declarations.length === 1) {\n        return this.parseForIn(node, init, awaitAt);\n      }\n\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n\n      return this.parseFor(node, init);\n    }\n\n    const refExpressionErrors = new ExpressionErrors();\n    const init = this.parseExpression(true, refExpressionErrors);\n\n    if (this.match(types._in) || this.isContextual(\"of\")) {\n      this.toAssignable(init);\n      const description = this.isContextual(\"of\") ? \"for-of statement\" : \"for-in statement\";\n      this.checkLVal(init, undefined, undefined, description);\n      return this.parseForIn(node, init, awaitAt);\n    } else {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    if (awaitAt > -1) {\n      this.unexpected(awaitAt);\n    }\n\n    return this.parseFor(node, init);\n  }\n\n  parseFunctionStatement(node, isAsync, declarationPosition) {\n    this.next();\n    return this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), isAsync);\n  }\n\n  parseIfStatement(node) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    node.consequent = this.parseStatement(\"if\");\n    node.alternate = this.eat(types._else) ? this.parseStatement(\"if\") : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n\n  parseReturnStatement(node) {\n    if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {\n      this.raise(this.state.start, ErrorMessages.IllegalReturn);\n    }\n\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n\n  parseSwitchStatement(node) {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases = node.cases = [];\n    this.expect(types.braceL);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(SCOPE_OTHER);\n    let cur;\n\n    for (let sawDefault; !this.match(types.braceR);) {\n      if (this.match(types._case) || this.match(types._default)) {\n        const isCase = this.match(types._case);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        cases.push(cur = this.startNode());\n        cur.consequent = [];\n        this.next();\n\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(this.state.lastTokStart, ErrorMessages.MultipleDefaultsInSwitch);\n          }\n\n          sawDefault = true;\n          cur.test = null;\n        }\n\n        this.expect(types.colon);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatement(null));\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next();\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n\n  parseThrowStatement(node) {\n    this.next();\n\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(this.state.lastTokEnd, ErrorMessages.NewlineAfterThrow);\n    }\n\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n\n  parseCatchClauseParam() {\n    const param = this.parseBindingAtom();\n    const simple = param.type === \"Identifier\";\n    this.scope.enter(simple ? SCOPE_SIMPLE_CATCH : 0);\n    this.checkLVal(param, BIND_LEXICAL, null, \"catch clause\");\n    return param;\n  }\n\n  parseTryStatement(node) {\n    this.next();\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.match(types._catch)) {\n      const clause = this.startNode();\n      this.next();\n\n      if (this.match(types.parenL)) {\n        this.expect(types.parenL);\n        clause.param = this.parseCatchClauseParam();\n        this.expect(types.parenR);\n      } else {\n        clause.param = null;\n        this.scope.enter(SCOPE_OTHER);\n      }\n\n      clause.body = this.withTopicForbiddingContext(() => this.parseBlock(false, false));\n      this.scope.exit();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.finalizer = this.eat(types._finally) ? this.parseBlock() : null;\n\n    if (!node.handler && !node.finalizer) {\n      this.raise(node.start, ErrorMessages.NoCatchOrFinally);\n    }\n\n    return this.finishNode(node, \"TryStatement\");\n  }\n\n  parseVarStatement(node, kind) {\n    this.next();\n    this.parseVar(node, false, kind);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n\n  parseWhileStatement(node) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"while\"));\n    this.state.labels.pop();\n    return this.finishNode(node, \"WhileStatement\");\n  }\n\n  parseWithStatement(node) {\n    if (this.state.strict) {\n      this.raise(this.state.start, ErrorMessages.StrictWith);\n    }\n\n    this.next();\n    node.object = this.parseHeaderExpression();\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"with\"));\n    return this.finishNode(node, \"WithStatement\");\n  }\n\n  parseEmptyStatement(node) {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n\n  parseLabeledStatement(node, maybeName, expr, context) {\n    for (let _i2 = 0, _this$state$labels = this.state.labels; _i2 < _this$state$labels.length; _i2++) {\n      const label = _this$state$labels[_i2];\n\n      if (label.name === maybeName) {\n        this.raise(expr.start, ErrorMessages.LabelRedeclaration, maybeName);\n      }\n    }\n\n    const kind = this.state.type.isLoop ? \"loop\" : this.match(types._switch) ? \"switch\" : null;\n\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n\n      if (label.statementStart === node.start) {\n        label.statementStart = this.state.start;\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.state.start\n    });\n    node.body = this.parseStatement(context ? context.indexOf(\"label\") === -1 ? context + \"label\" : context : \"label\");\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n\n  parseExpressionStatement(node, expr) {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n\n  parseBlock(allowDirectives = false, createNewLexicalScope = true, afterBlockParse) {\n    const node = this.startNode();\n    this.expect(types.braceL);\n\n    if (createNewLexicalScope) {\n      this.scope.enter(SCOPE_OTHER);\n    }\n\n    this.parseBlockBody(node, allowDirectives, false, types.braceR, afterBlockParse);\n\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n\n    return this.finishNode(node, \"BlockStatement\");\n  }\n\n  isValidDirective(stmt) {\n    return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"StringLiteral\" && !stmt.expression.extra.parenthesized;\n  }\n\n  parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse) {\n    const body = node.body = [];\n    const directives = node.directives = [];\n    this.parseBlockOrModuleBlockBody(body, allowDirectives ? directives : undefined, topLevel, end, afterBlockParse);\n  }\n\n  parseBlockOrModuleBlockBody(body, directives, topLevel, end, afterBlockParse) {\n    const octalPositions = [];\n    const oldStrict = this.state.strict;\n    let hasStrictModeDirective = false;\n    let parsedNonDirective = false;\n\n    while (!this.match(end)) {\n      if (!parsedNonDirective && this.state.octalPositions.length) {\n        octalPositions.push(...this.state.octalPositions);\n      }\n\n      const stmt = this.parseStatement(null, topLevel);\n\n      if (directives && !parsedNonDirective && this.isValidDirective(stmt)) {\n        const directive = this.stmtToDirective(stmt);\n        directives.push(directive);\n\n        if (!hasStrictModeDirective && directive.value.value === \"use strict\") {\n          hasStrictModeDirective = true;\n          this.setStrict(true);\n        }\n\n        continue;\n      }\n\n      parsedNonDirective = true;\n      body.push(stmt);\n    }\n\n    if (this.state.strict && octalPositions.length) {\n      for (let _i3 = 0; _i3 < octalPositions.length; _i3++) {\n        const pos = octalPositions[_i3];\n        this.raise(pos, ErrorMessages.StrictOctalLiteral);\n      }\n    }\n\n    if (afterBlockParse) {\n      afterBlockParse.call(this, hasStrictModeDirective);\n    }\n\n    if (!oldStrict) {\n      this.setStrict(false);\n    }\n\n    this.next();\n  }\n\n  parseFor(node, init) {\n    node.init = init;\n    this.expect(types.semi);\n    node.test = this.match(types.semi) ? null : this.parseExpression();\n    this.expect(types.semi);\n    node.update = this.match(types.parenR) ? null : this.parseExpression();\n    this.expect(types.parenR);\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"for\"));\n    this.scope.exit();\n    this.state.labels.pop();\n    return this.finishNode(node, \"ForStatement\");\n  }\n\n  parseForIn(node, init, awaitAt) {\n    const isForIn = this.match(types._in);\n    this.next();\n\n    if (isForIn) {\n      if (awaitAt > -1) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt > -1;\n    }\n\n    if (init.type === \"VariableDeclaration\" && init.declarations[0].init != null && (!isForIn || this.state.strict || init.kind !== \"var\" || init.declarations[0].id.type !== \"Identifier\")) {\n      this.raise(init.start, ErrorMessages.ForInOfLoopInitializer, isForIn ? \"for-in\" : \"for-of\");\n    } else if (init.type === \"AssignmentPattern\") {\n      this.raise(init.start, ErrorMessages.InvalidLhs, \"for-loop\");\n    }\n\n    node.left = init;\n    node.right = isForIn ? this.parseExpression() : this.parseMaybeAssignAllowIn();\n    this.expect(types.parenR);\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"for\"));\n    this.scope.exit();\n    this.state.labels.pop();\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n\n  parseVar(node, isFor, kind) {\n    const declarations = node.declarations = [];\n    const isTypescript = this.hasPlugin(\"typescript\");\n    node.kind = kind;\n\n    for (;;) {\n      const decl = this.startNode();\n      this.parseVarId(decl, kind);\n\n      if (this.eat(types.eq)) {\n        decl.init = isFor ? this.parseMaybeAssignDisallowIn() : this.parseMaybeAssignAllowIn();\n      } else {\n        if (kind === \"const\" && !(this.match(types._in) || this.isContextual(\"of\"))) {\n          if (!isTypescript) {\n            this.unexpected();\n          }\n        } else if (decl.id.type !== \"Identifier\" && !(isFor && (this.match(types._in) || this.isContextual(\"of\")))) {\n          this.raise(this.state.lastTokEnd, ErrorMessages.DeclarationMissingInitializer, \"Complex binding patterns\");\n        }\n\n        decl.init = null;\n      }\n\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(types.comma)) break;\n    }\n\n    return node;\n  }\n\n  parseVarId(decl, kind) {\n    decl.id = this.parseBindingAtom();\n    this.checkLVal(decl.id, kind === \"var\" ? BIND_VAR : BIND_LEXICAL, undefined, \"variable declaration\", kind !== \"var\");\n  }\n\n  parseFunction(node, statement = FUNC_NO_FLAGS, isAsync = false) {\n    const isStatement = statement & FUNC_STATEMENT;\n    const isHangingStatement = statement & FUNC_HANGING_STATEMENT;\n    const requireId = !!isStatement && !(statement & FUNC_NULLABLE_ID);\n    this.initFunction(node, isAsync);\n\n    if (this.match(types.star) && isHangingStatement) {\n      this.raise(this.state.start, ErrorMessages.GeneratorInSingleStatementContext);\n    }\n\n    node.generator = this.eat(types.star);\n\n    if (isStatement) {\n      node.id = this.parseFunctionId(requireId);\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldYieldPos = this.state.yieldPos;\n    const oldAwaitPos = this.state.awaitPos;\n    this.state.maybeInArrowParameters = false;\n    this.state.yieldPos = -1;\n    this.state.awaitPos = -1;\n    this.scope.enter(SCOPE_FUNCTION);\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n\n    if (!isStatement) {\n      node.id = this.parseFunctionId();\n    }\n\n    this.parseFunctionParams(node);\n    this.withTopicForbiddingContext(() => {\n      this.parseFunctionBodyAndFinish(node, isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\");\n    });\n    this.prodParam.exit();\n    this.scope.exit();\n\n    if (isStatement && !isHangingStatement) {\n      this.registerFunctionStatementId(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.yieldPos = oldYieldPos;\n    this.state.awaitPos = oldAwaitPos;\n    return node;\n  }\n\n  parseFunctionId(requireId) {\n    return requireId || this.match(types.name) ? this.parseIdentifier() : null;\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    const oldInParameters = this.state.inParameters;\n    this.state.inParameters = true;\n    this.expect(types.parenL);\n    node.params = this.parseBindingList(types.parenR, 41, false, allowModifiers);\n    this.state.inParameters = oldInParameters;\n    this.checkYieldAwaitInDefaultParams();\n  }\n\n  registerFunctionStatementId(node) {\n    if (!node.id) return;\n    this.scope.declareName(node.id.name, this.state.strict || node.generator || node.async ? this.scope.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION, node.id.start);\n  }\n\n  parseClass(node, isStatement, optionalId) {\n    this.next();\n    this.takeDecorators(node);\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    node.body = this.parseClassBody(!!node.superClass, oldStrict);\n    return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\");\n  }\n\n  isClassProperty() {\n    return this.match(types.eq) || this.match(types.semi) || this.match(types.braceR);\n  }\n\n  isClassMethod() {\n    return this.match(types.parenL);\n  }\n\n  isNonstaticConstructor(method) {\n    return !method.computed && !method.static && (method.key.name === \"constructor\" || method.key.value === \"constructor\");\n  }\n\n  parseClassBody(constructorAllowsSuper, oldStrict) {\n    this.classScope.enter();\n    const state = {\n      hadConstructor: false\n    };\n    let decorators = [];\n    const classBody = this.startNode();\n    classBody.body = [];\n    this.expect(types.braceL);\n    this.withTopicForbiddingContext(() => {\n      while (!this.match(types.braceR)) {\n        if (this.eat(types.semi)) {\n          if (decorators.length > 0) {\n            throw this.raise(this.state.lastTokEnd, ErrorMessages.DecoratorSemicolon);\n          }\n\n          continue;\n        }\n\n        if (this.match(types.at)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n\n        const member = this.startNode();\n\n        if (decorators.length) {\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n\n        this.parseClassMember(classBody, member, state, constructorAllowsSuper);\n\n        if (member.kind === \"constructor\" && member.decorators && member.decorators.length > 0) {\n          this.raise(member.start, ErrorMessages.DecoratorConstructor);\n        }\n      }\n    });\n    this.state.strict = oldStrict;\n    this.next();\n\n    if (decorators.length) {\n      throw this.raise(this.state.start, ErrorMessages.TrailingDecorator);\n    }\n\n    this.classScope.exit();\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n\n  parseClassMemberFromModifier(classBody, member) {\n    const key = this.parseIdentifier(true);\n\n    if (this.isClassMethod()) {\n      const method = member;\n      method.kind = \"method\";\n      method.computed = false;\n      method.key = key;\n      method.static = false;\n      this.pushClassMethod(classBody, method, false, false, false, false);\n      return true;\n    } else if (this.isClassProperty()) {\n      const prop = member;\n      prop.computed = false;\n      prop.key = key;\n      prop.static = false;\n      classBody.body.push(this.parseClassProperty(prop));\n      return true;\n    }\n\n    return false;\n  }\n\n  parseClassMember(classBody, member, state, constructorAllowsSuper) {\n    const isStatic = this.isContextual(\"static\");\n\n    if (isStatic && this.parseClassMemberFromModifier(classBody, member)) {\n      return;\n    }\n\n    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic, constructorAllowsSuper);\n  }\n\n  parseClassMemberWithIsStatic(classBody, member, state, isStatic, constructorAllowsSuper) {\n    const publicMethod = member;\n    const privateMethod = member;\n    const publicProp = member;\n    const privateProp = member;\n    const method = publicMethod;\n    const publicMember = publicMethod;\n    member.static = isStatic;\n\n    if (this.eat(types.star)) {\n      method.kind = \"method\";\n      this.parseClassElementName(method);\n\n      if (method.key.type === \"PrivateName\") {\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsGenerator);\n      }\n\n      this.pushClassMethod(classBody, publicMethod, true, false, false, false);\n      return;\n    }\n\n    const containsEsc = this.state.containsEsc;\n    const key = this.parseClassElementName(member);\n    const isPrivate = key.type === \"PrivateName\";\n    const isSimple = key.type === \"Identifier\";\n    const maybeQuestionTokenStart = this.state.start;\n    this.parsePostMemberNameModifiers(publicMember);\n\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(key.start, ErrorMessages.DuplicateConstructor);\n        }\n\n        state.hadConstructor = true;\n        allowsDirectSuper = constructorAllowsSuper;\n      }\n\n      this.pushClassMethod(classBody, publicMethod, false, false, isConstructor, allowsDirectSuper);\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (isSimple && key.name === \"async\" && !containsEsc && !this.isLineTerminator()) {\n      const isGenerator = this.eat(types.star);\n\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStart);\n      }\n\n      method.kind = \"method\";\n      this.parseClassElementName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (method.key.type === \"PrivateName\") {\n        this.pushClassPrivateMethod(classBody, privateMethod, isGenerator, true);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsAsync);\n        }\n\n        this.pushClassMethod(classBody, publicMethod, isGenerator, true, false, false);\n      }\n    } else if (isSimple && (key.name === \"get\" || key.name === \"set\") && !containsEsc && !(this.match(types.star) && this.isLineTerminator())) {\n      method.kind = key.name;\n      this.parseClassElementName(publicMethod);\n\n      if (method.key.type === \"PrivateName\") {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsAccessor);\n        }\n\n        this.pushClassMethod(classBody, publicMethod, false, false, false, false);\n      }\n\n      this.checkGetterSetterParams(publicMethod);\n    } else if (this.isLineTerminator()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n\n  parseClassElementName(member) {\n    const key = this.parsePropertyName(member, true);\n\n    if (!member.computed && member.static && (key.name === \"prototype\" || key.value === \"prototype\")) {\n      this.raise(key.start, ErrorMessages.StaticPrototype);\n    }\n\n    if (key.type === \"PrivateName\" && key.id.name === \"constructor\") {\n      this.raise(key.start, ErrorMessages.ConstructorClassPrivateField);\n    }\n\n    return key;\n  }\n\n  pushClassProperty(classBody, prop) {\n    if (!prop.computed && (prop.key.name === \"constructor\" || prop.key.value === \"constructor\")) {\n      this.raise(prop.key.start, ErrorMessages.ConstructorClassField);\n    }\n\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n\n  pushClassPrivateProperty(classBody, prop) {\n    this.expectPlugin(\"classPrivateProperties\", prop.key.start);\n    const node = this.parseClassPrivateProperty(prop);\n    classBody.body.push(node);\n    this.classScope.declarePrivateName(node.key.id.name, CLASS_ELEMENT_OTHER, node.key.start);\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    classBody.body.push(this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true));\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    this.expectPlugin(\"classPrivateMethods\", method.key.start);\n    const node = this.parseMethod(method, isGenerator, isAsync, false, false, \"ClassPrivateMethod\", true);\n    classBody.body.push(node);\n    const kind = node.kind === \"get\" ? node.static ? CLASS_ELEMENT_STATIC_GETTER : CLASS_ELEMENT_INSTANCE_GETTER : node.kind === \"set\" ? node.static ? CLASS_ELEMENT_STATIC_SETTER : CLASS_ELEMENT_INSTANCE_SETTER : CLASS_ELEMENT_OTHER;\n    this.classScope.declarePrivateName(node.key.id.name, kind, node.key.start);\n  }\n\n  parsePostMemberNameModifiers(methodOrProp) {}\n\n  parseClassPrivateProperty(node) {\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    this.prodParam.enter(PARAM);\n    node.value = this.eat(types.eq) ? this.parseMaybeAssignAllowIn() : null;\n    this.semicolon();\n    this.prodParam.exit();\n    this.scope.exit();\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n\n  parseClassProperty(node) {\n    if (!node.typeAnnotation) {\n      this.expectPlugin(\"classProperties\");\n    }\n\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    this.prodParam.enter(PARAM);\n\n    if (this.match(types.eq)) {\n      this.expectPlugin(\"classProperties\");\n      this.next();\n      node.value = this.parseMaybeAssignAllowIn();\n    } else {\n      node.value = null;\n    }\n\n    this.semicolon();\n    this.prodParam.exit();\n    this.scope.exit();\n    return this.finishNode(node, \"ClassProperty\");\n  }\n\n  parseClassId(node, isStatement, optionalId, bindingType = BIND_CLASS) {\n    if (this.match(types.name)) {\n      node.id = this.parseIdentifier();\n\n      if (isStatement) {\n        this.checkLVal(node.id, bindingType, undefined, \"class name\");\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        this.unexpected(null, ErrorMessages.MissingClassName);\n      }\n    }\n  }\n\n  parseClassSuper(node) {\n    node.superClass = this.eat(types._extends) ? this.parseExprSubscripts() : null;\n  }\n\n  parseExport(node) {\n    const hasDefault = this.maybeParseExportDefaultSpecifier(node);\n    const parseAfterDefault = !hasDefault || this.eat(types.comma);\n    const hasStar = parseAfterDefault && this.eatExportStar(node);\n    const hasNamespace = hasStar && this.maybeParseExportNamespaceSpecifier(node);\n    const parseAfterNamespace = parseAfterDefault && (!hasNamespace || this.eat(types.comma));\n    const isFromRequired = hasDefault || hasStar;\n\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      this.parseExportFrom(node, true);\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);\n\n    if (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers || hasNamespace && parseAfterNamespace && !hasSpecifiers) {\n      throw this.unexpected(null, types.braceL);\n    }\n\n    let hasDeclaration;\n\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      this.parseExportFrom(node, isFromRequired);\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(node);\n    }\n\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      this.checkExport(node, true, false, !!node.source);\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    if (this.eat(types._default)) {\n      node.declaration = this.parseExportDefaultExpression();\n      this.checkExport(node, true, true);\n      return this.finishNode(node, \"ExportDefaultDeclaration\");\n    }\n\n    throw this.unexpected(null, types.braceL);\n  }\n\n  eatExportStar(node) {\n    return this.eat(types.star);\n  }\n\n  maybeParseExportDefaultSpecifier(node) {\n    if (this.isExportDefaultSpecifier()) {\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node) {\n    if (this.isContextual(\"as\")) {\n      if (!node.specifiers) node.specifiers = [];\n      const specifier = this.startNodeAt(this.state.lastTokStart, this.state.lastTokStartLoc);\n      this.next();\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers.push(this.finishNode(specifier, \"ExportNamespaceSpecifier\"));\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamedSpecifiers(node) {\n    if (this.match(types.braceL)) {\n      if (!node.specifiers) node.specifiers = [];\n      node.specifiers.push(...this.parseExportSpecifiers());\n      node.source = null;\n      node.declaration = null;\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportDeclaration(node) {\n    if (this.shouldParseExportDeclaration()) {\n      node.specifiers = [];\n      node.source = null;\n      node.declaration = this.parseExportDeclaration(node);\n      return true;\n    }\n\n    return false;\n  }\n\n  isAsyncFunction() {\n    if (!this.isContextual(\"async\")) return false;\n    const next = this.nextTokenStart();\n    return !lineBreak.test(this.input.slice(this.state.pos, next)) && this.isUnparsedContextual(next, \"function\");\n  }\n\n  parseExportDefaultExpression() {\n    const expr = this.startNode();\n    const isAsync = this.isAsyncFunction();\n\n    if (this.match(types._function) || isAsync) {\n      this.next();\n\n      if (isAsync) {\n        this.next();\n      }\n\n      return this.parseFunction(expr, FUNC_STATEMENT | FUNC_NULLABLE_ID, isAsync);\n    } else if (this.match(types._class)) {\n      return this.parseClass(expr, true, true);\n    } else if (this.match(types.at)) {\n      if (this.hasPlugin(\"decorators\") && this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n        this.raise(this.state.start, ErrorMessages.DecoratorBeforeExport);\n      }\n\n      this.parseDecorators(false);\n      return this.parseClass(expr, true, true);\n    } else if (this.match(types._const) || this.match(types._var) || this.isLet()) {\n      throw this.raise(this.state.start, ErrorMessages.UnsupportedDefaultExport);\n    } else {\n      const res = this.parseMaybeAssignAllowIn();\n      this.semicolon();\n      return res;\n    }\n  }\n\n  parseExportDeclaration(node) {\n    return this.parseStatement(null);\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.match(types.name)) {\n      const value = this.state.value;\n\n      if (value === \"async\" && !this.state.containsEsc || value === \"let\") {\n        return false;\n      }\n\n      if ((value === \"type\" || value === \"interface\") && !this.state.containsEsc) {\n        const l = this.lookahead();\n\n        if (l.type === types.name && l.value !== \"from\" || l.type === types.braceL) {\n          this.expectOnePlugin([\"flow\", \"typescript\"]);\n          return false;\n        }\n      }\n    } else if (!this.match(types._default)) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const hasFrom = this.isUnparsedContextual(next, \"from\");\n\n    if (this.input.charCodeAt(next) === 44 || this.match(types.name) && hasFrom) {\n      return true;\n    }\n\n    if (this.match(types._default) && hasFrom) {\n      const nextAfterFrom = this.input.charCodeAt(this.nextTokenStartSince(next + 4));\n      return nextAfterFrom === 34 || nextAfterFrom === 39;\n    }\n\n    return false;\n  }\n\n  parseExportFrom(node, expect) {\n    if (this.eatContextual(\"from\")) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n    } else {\n      if (expect) {\n        this.unexpected();\n      } else {\n        node.source = null;\n      }\n    }\n\n    this.semicolon();\n  }\n\n  shouldParseExportDeclaration() {\n    if (this.match(types.at)) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n\n      if (this.hasPlugin(\"decorators\")) {\n        if (this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n          this.unexpected(this.state.start, ErrorMessages.DecoratorBeforeExport);\n        } else {\n          return true;\n        }\n      }\n    }\n\n    return this.state.type.keyword === \"var\" || this.state.type.keyword === \"const\" || this.state.type.keyword === \"function\" || this.state.type.keyword === \"class\" || this.isLet() || this.isAsyncFunction();\n  }\n\n  checkExport(node, checkNames, isDefault, isFrom) {\n    if (checkNames) {\n      if (isDefault) {\n        this.checkDuplicateExports(node, \"default\");\n\n        if (this.hasPlugin(\"exportDefaultFrom\")) {\n          var _declaration$extra;\n\n          const declaration = node.declaration;\n\n          if (declaration.type === \"Identifier\" && declaration.name === \"from\" && declaration.end - declaration.start === 4 && !((_declaration$extra = declaration.extra) == null ? void 0 : _declaration$extra.parenthesized)) {\n            this.raise(declaration.start, ErrorMessages.ExportDefaultFromAsIdentifier);\n          }\n        }\n      } else if (node.specifiers && node.specifiers.length) {\n        for (let _i4 = 0, _node$specifiers = node.specifiers; _i4 < _node$specifiers.length; _i4++) {\n          const specifier = _node$specifiers[_i4];\n          this.checkDuplicateExports(specifier, specifier.exported.name);\n\n          if (!isFrom && specifier.local) {\n            this.checkReservedWord(specifier.local.name, specifier.local.start, true, false);\n            this.scope.checkLocalExport(specifier.local);\n          }\n        }\n      } else if (node.declaration) {\n        if (node.declaration.type === \"FunctionDeclaration\" || node.declaration.type === \"ClassDeclaration\") {\n          const id = node.declaration.id;\n          if (!id) throw new Error(\"Assertion failure\");\n          this.checkDuplicateExports(node, id.name);\n        } else if (node.declaration.type === \"VariableDeclaration\") {\n          for (let _i5 = 0, _node$declaration$dec = node.declaration.declarations; _i5 < _node$declaration$dec.length; _i5++) {\n            const declaration = _node$declaration$dec[_i5];\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n\n    const currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    if (currentContextDecorators.length) {\n      throw this.raise(node.start, ErrorMessages.UnsupportedDecoratorExport);\n    }\n  }\n\n  checkDeclaration(node) {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (let _i6 = 0, _node$properties = node.properties; _i6 < _node$properties.length; _i6++) {\n        const prop = _node$properties[_i6];\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (let _i7 = 0, _node$elements = node.elements; _i7 < _node$elements.length; _i7++) {\n        const elem = _node$elements[_i7];\n\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n\n  checkDuplicateExports(node, name) {\n    if (this.state.exportedIdentifiers.indexOf(name) > -1) {\n      this.raise(node.start, name === \"default\" ? ErrorMessages.DuplicateDefaultExport : ErrorMessages.DuplicateExport, name);\n    }\n\n    this.state.exportedIdentifiers.push(name);\n  }\n\n  parseExportSpecifiers() {\n    const nodes = [];\n    let first = true;\n    this.expect(types.braceL);\n\n    while (!this.eat(types.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma);\n        if (this.eat(types.braceR)) break;\n      }\n\n      const node = this.startNode();\n      node.local = this.parseIdentifier(true);\n      node.exported = this.eatContextual(\"as\") ? this.parseIdentifier(true) : node.local.__clone();\n      nodes.push(this.finishNode(node, \"ExportSpecifier\"));\n    }\n\n    return nodes;\n  }\n\n  parseImport(node) {\n    node.specifiers = [];\n\n    if (!this.match(types.string)) {\n      const hasDefault = this.maybeParseDefaultImportSpecifier(node);\n      const parseNext = !hasDefault || this.eat(types.comma);\n      const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n      if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n      this.expectContextual(\"from\");\n    }\n\n    node.source = this.parseImportSource();\n    const attributes = this.maybeParseModuleAttributes();\n\n    if (attributes) {\n      node.attributes = attributes;\n    }\n\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource() {\n    if (!this.match(types.string)) this.unexpected();\n    return this.parseExprAtom();\n  }\n\n  shouldParseDefaultImport(node) {\n    return this.match(types.name);\n  }\n\n  parseImportSpecifierLocal(node, specifier, type, contextDescription) {\n    specifier.local = this.parseIdentifier();\n    this.checkLVal(specifier.local, BIND_LEXICAL, undefined, contextDescription);\n    node.specifiers.push(this.finishNode(specifier, type));\n  }\n\n  maybeParseModuleAttributes() {\n    if (this.match(types._with) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"moduleAttributes\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"moduleAttributes\")) return [];\n      return null;\n    }\n\n    const attrs = [];\n    const attributes = new Set();\n\n    do {\n      const node = this.startNode();\n      node.key = this.parseIdentifier(true);\n\n      if (node.key.name !== \"type\") {\n        this.raise(node.key.start, ErrorMessages.ModuleAttributeDifferentFromType, node.key.name);\n      }\n\n      if (attributes.has(node.key.name)) {\n        this.raise(node.key.start, ErrorMessages.ModuleAttributesWithDuplicateKeys, node.key.name);\n      }\n\n      attributes.add(node.key.name);\n      this.expect(types.colon);\n\n      if (!this.match(types.string)) {\n        throw this.unexpected(this.state.start, ErrorMessages.ModuleAttributeInvalidValue);\n      }\n\n      node.value = this.parseLiteral(this.state.value, \"StringLiteral\");\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(types.comma));\n\n    return attrs;\n  }\n\n  maybeParseDefaultImportSpecifier(node) {\n    if (this.shouldParseDefaultImport(node)) {\n      this.parseImportSpecifierLocal(node, this.startNode(), \"ImportDefaultSpecifier\", \"default import specifier\");\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseStarImportSpecifier(node) {\n    if (this.match(types.star)) {\n      const specifier = this.startNode();\n      this.next();\n      this.expectContextual(\"as\");\n      this.parseImportSpecifierLocal(node, specifier, \"ImportNamespaceSpecifier\", \"import namespace specifier\");\n      return true;\n    }\n\n    return false;\n  }\n\n  parseNamedImportSpecifiers(node) {\n    let first = true;\n    this.expect(types.braceL);\n\n    while (!this.eat(types.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        if (this.eat(types.colon)) {\n          throw this.raise(this.state.start, ErrorMessages.DestructureNamedImport);\n        }\n\n        this.expect(types.comma);\n        if (this.eat(types.braceR)) break;\n      }\n\n      this.parseImportSpecifier(node);\n    }\n  }\n\n  parseImportSpecifier(node) {\n    const specifier = this.startNode();\n    specifier.imported = this.parseIdentifier(true);\n\n    if (this.eatContextual(\"as\")) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      this.checkReservedWord(specifier.imported.name, specifier.start, true, true);\n      specifier.local = specifier.imported.__clone();\n    }\n\n    this.checkLVal(specifier.local, BIND_LEXICAL, undefined, \"import specifier\");\n    node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n  }\n\n}\n\nclass ClassScope {\n  constructor() {\n    this.privateNames = new Set();\n    this.loneAccessors = new Map();\n    this.undefinedPrivateNames = new Map();\n  }\n\n}\n\nclass ClassScopeHandler {\n  constructor(raise) {\n    this.stack = [];\n    this.undefinedPrivateNames = new Map();\n    this.raise = raise;\n  }\n\n  current() {\n    return this.stack[this.stack.length - 1];\n  }\n\n  enter() {\n    this.stack.push(new ClassScope());\n  }\n\n  exit() {\n    const oldClassScope = this.stack.pop();\n    const current = this.current();\n\n    for (let _i = 0, _Array$from = Array.from(oldClassScope.undefinedPrivateNames); _i < _Array$from.length; _i++) {\n      const [name, pos] = _Array$from[_i];\n\n      if (current) {\n        if (!current.undefinedPrivateNames.has(name)) {\n          current.undefinedPrivateNames.set(name, pos);\n        }\n      } else {\n        this.raise(pos, ErrorMessages.InvalidPrivateFieldResolution, name);\n      }\n    }\n  }\n\n  declarePrivateName(name, elementType, pos) {\n    const classScope = this.current();\n    let redefined = classScope.privateNames.has(name);\n\n    if (elementType & CLASS_ELEMENT_KIND_ACCESSOR) {\n      const accessor = redefined && classScope.loneAccessors.get(name);\n\n      if (accessor) {\n        const oldStatic = accessor & CLASS_ELEMENT_FLAG_STATIC;\n        const newStatic = elementType & CLASS_ELEMENT_FLAG_STATIC;\n        const oldKind = accessor & CLASS_ELEMENT_KIND_ACCESSOR;\n        const newKind = elementType & CLASS_ELEMENT_KIND_ACCESSOR;\n        redefined = oldKind === newKind || oldStatic !== newStatic;\n        if (!redefined) classScope.loneAccessors.delete(name);\n      } else if (!redefined) {\n        classScope.loneAccessors.set(name, elementType);\n      }\n    }\n\n    if (redefined) {\n      this.raise(pos, ErrorMessages.PrivateNameRedeclaration, name);\n    }\n\n    classScope.privateNames.add(name);\n    classScope.undefinedPrivateNames.delete(name);\n  }\n\n  usePrivateName(name, pos) {\n    let classScope;\n\n    for (let _i2 = 0, _this$stack = this.stack; _i2 < _this$stack.length; _i2++) {\n      classScope = _this$stack[_i2];\n      if (classScope.privateNames.has(name)) return;\n    }\n\n    if (classScope) {\n      classScope.undefinedPrivateNames.set(name, pos);\n    } else {\n      this.raise(pos, ErrorMessages.InvalidPrivateFieldResolution, name);\n    }\n  }\n\n}\n\nclass Parser extends StatementParser {\n  constructor(options, input) {\n    options = getOptions(options);\n    super(options, input);\n    const ScopeHandler = this.getScopeHandler();\n    this.options = options;\n    this.inModule = this.options.sourceType === \"module\";\n    this.scope = new ScopeHandler(this.raise.bind(this), this.inModule);\n    this.prodParam = new ProductionParameterHandler();\n    this.classScope = new ClassScopeHandler(this.raise.bind(this));\n    this.plugins = pluginsMap(this.options.plugins);\n    this.filename = options.sourceFilename;\n  }\n\n  getScopeHandler() {\n    return ScopeHandler;\n  }\n\n  parse() {\n    let paramFlags = PARAM;\n\n    if (this.hasPlugin(\"topLevelAwait\") && this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n    const file = this.startNode();\n    const program = this.startNode();\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    return file;\n  }\n\n}\n\nfunction pluginsMap(plugins) {\n  const pluginMap = new Map();\n\n  for (let _i = 0; _i < plugins.length; _i++) {\n    const plugin = plugins[_i];\n    const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];\n    if (!pluginMap.has(name)) pluginMap.set(name, options || {});\n  }\n\n  return pluginMap;\n}\n\nfunction parse(input, options) {\n  var _options;\n\n  if (((_options = options) == null ? void 0 : _options.sourceType) === \"unambiguous\") {\n    options = Object.assign({}, options);\n\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch (_unused) {}\n      } else {\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch (_unused2) {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\n\nfunction parseExpression(input, options) {\n  const parser = getParser(options, input);\n\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n\n  return parser.getExpression();\n}\n\nfunction getParser(options, input) {\n  let cls = Parser;\n\n  if (options == null ? void 0 : options.plugins) {\n    validatePlugins(options.plugins);\n    cls = getParserClass(options.plugins);\n  }\n\n  return new cls(options, input);\n}\n\nconst parserClassCache = {};\n\nfunction getParserClass(pluginsFromOptions) {\n  const pluginList = mixinPluginNames.filter(name => hasPlugin(pluginsFromOptions, name));\n  const key = pluginList.join(\"/\");\n  let cls = parserClassCache[key];\n\n  if (!cls) {\n    cls = Parser;\n\n    for (let _i = 0; _i < pluginList.length; _i++) {\n      const plugin = pluginList[_i];\n      cls = mixinPlugins[plugin](cls);\n    }\n\n    parserClassCache[key] = cls;\n  }\n\n  return cls;\n}\n\nexports.parse = parse;\nexports.parseExpression = parseExpression;\nexports.tokTypes = types;","map":{"version":3,"sources":["C:/Users/Admin/programs/django+react/tutorials/graphql_django/frontend/gui/node_modules/@babel/parser/lib/index.js"],"names":["Object","defineProperty","exports","value","beforeExpr","startsExpr","isLoop","isAssign","prefix","postfix","TokenType","constructor","label","conf","keyword","rightAssociative","binop","updateContext","keywords","Map","createKeyword","name","options","token","set","createBinop","types","num","bigint","decimal","regexp","string","eof","bracketL","bracketHashL","bracketBarL","bracketR","bracketBarR","braceL","braceBarL","braceHashL","braceR","braceBarR","parenL","parenR","comma","semi","colon","doubleColon","dot","question","questionDot","arrow","template","ellipsis","backQuote","dollarBraceL","at","hash","interpreterDirective","eq","assign","incDec","bang","tilde","pipeline","nullishCoalescing","logicalOR","logicalAND","bitwiseOR","bitwiseXOR","bitwiseAND","equality","relational","bitShift","plusMin","modulo","star","slash","exponent","_break","_case","_catch","_continue","_debugger","_default","_do","_else","_finally","_for","_function","_if","_return","_switch","_throw","_try","_var","_const","_while","_with","_new","_this","_super","_class","_extends","_export","_import","_null","_true","_false","_in","_instanceof","_typeof","_void","_delete","SCOPE_OTHER","SCOPE_PROGRAM","SCOPE_FUNCTION","SCOPE_ARROW","SCOPE_SIMPLE_CATCH","SCOPE_SUPER","SCOPE_DIRECT_SUPER","SCOPE_CLASS","SCOPE_TS_MODULE","SCOPE_VAR","BIND_KIND_VALUE","BIND_KIND_TYPE","BIND_SCOPE_VAR","BIND_SCOPE_LEXICAL","BIND_SCOPE_FUNCTION","BIND_FLAGS_NONE","BIND_FLAGS_CLASS","BIND_FLAGS_TS_ENUM","BIND_FLAGS_TS_CONST_ENUM","BIND_FLAGS_TS_EXPORT_ONLY","BIND_CLASS","BIND_LEXICAL","BIND_VAR","BIND_FUNCTION","BIND_TS_INTERFACE","BIND_TS_TYPE","BIND_TS_ENUM","BIND_TS_AMBIENT","BIND_NONE","BIND_OUTSIDE","BIND_TS_CONST_ENUM","BIND_TS_NAMESPACE","CLASS_ELEMENT_FLAG_STATIC","CLASS_ELEMENT_KIND_GETTER","CLASS_ELEMENT_KIND_SETTER","CLASS_ELEMENT_KIND_ACCESSOR","CLASS_ELEMENT_STATIC_GETTER","CLASS_ELEMENT_STATIC_SETTER","CLASS_ELEMENT_INSTANCE_GETTER","CLASS_ELEMENT_INSTANCE_SETTER","CLASS_ELEMENT_OTHER","lineBreak","lineBreakG","RegExp","source","isNewLine","code","skipWhiteSpace","isWhitespace","Position","line","col","column","SourceLocation","start","end","getLineInfo","input","offset","lineStart","match","lastIndex","exec","index","BaseParser","sawUnambiguousESM","ambiguousScriptDifferentAst","hasPlugin","plugins","has","getPluginOption","plugin","get","last","stack","length","CommentsParser","addComment","comment","filename","loc","state","trailingComments","push","leadingComments","adjustCommentsAfterTrailingComma","node","elements","takeAllComments","lastElement","i","j","commentPreviousNode","splice","newTrailingComments","leadingComment","undefined","processComment","type","body","commentStack","firstChild","lastChild","lastInStack","pop","properties","arguments","slice","innerComments","firstTrailingCommentIndex","findIndex","ErrorMessages","freeze","AccessorIsGenerator","ArgumentsDisallowedInInitializer","AsyncFunctionInSingleStatementContext","AwaitBindingIdentifier","AwaitExpressionFormalParameter","AwaitNotInAsyncFunction","BadGetterArity","BadSetterArity","BadSetterRestParameter","ConstructorClassField","ConstructorClassPrivateField","ConstructorIsAccessor","ConstructorIsAsync","ConstructorIsGenerator","DeclarationMissingInitializer","DecoratorBeforeExport","DecoratorConstructor","DecoratorExportClass","DecoratorSemicolon","DeletePrivateField","DestructureNamedImport","DuplicateConstructor","DuplicateDefaultExport","DuplicateExport","DuplicateProto","DuplicateRegExpFlags","ElementAfterRest","EscapedCharNotAnIdentifier","ExportDefaultFromAsIdentifier","ForInOfLoopInitializer","GeneratorInSingleStatementContext","IllegalBreakContinue","IllegalLanguageModeDirective","IllegalReturn","ImportCallArgumentTrailingComma","ImportCallArity","ImportCallNotNewExpression","ImportCallSpreadArgument","ImportMetaOutsideModule","ImportOutsideModule","InvalidBigIntLiteral","InvalidCodePoint","InvalidDecimal","InvalidDigit","InvalidEscapeSequence","InvalidEscapeSequenceTemplate","InvalidEscapedReservedWord","InvalidIdentifier","InvalidLhs","InvalidLhsBinding","InvalidNumber","InvalidOrUnexpectedToken","InvalidParenthesizedAssignment","InvalidPrivateFieldResolution","InvalidPropertyBindingPattern","InvalidRecordProperty","InvalidRestAssignmentPattern","LabelRedeclaration","LetInLexicalBinding","LineTerminatorBeforeArrow","MalformedRegExpFlags","MissingClassName","MissingEqInAssignment","MissingUnicodeEscape","MixingCoalesceWithLogical","ModuleAttributeDifferentFromType","ModuleAttributeInvalidValue","ModuleAttributesWithDuplicateKeys","ModuleExportUndefined","MultipleDefaultsInSwitch","NewlineAfterThrow","NoCatchOrFinally","NumberIdentifier","NumericSeparatorInEscapeSequence","ObsoleteAwaitStar","OptionalChainingNoNew","OptionalChainingNoTemplate","ParamDupe","PatternHasAccessor","PatternHasMethod","PipelineBodyNoArrow","PipelineBodySequenceExpression","PipelineHeadSequenceExpression","PipelineTopicUnused","PrimaryTopicNotAllowed","PrimaryTopicRequiresSmartPipeline","PrivateInExpectedIn","PrivateNameRedeclaration","RecordExpressionBarIncorrectEndSyntaxType","RecordExpressionBarIncorrectStartSyntaxType","RecordExpressionHashIncorrectStartSyntaxType","RecordNoProto","RestTrailingComma","SloppyFunction","StaticPrototype","StrictDelete","StrictEvalArguments","StrictEvalArgumentsBinding","StrictFunction","StrictNumericEscape","StrictOctalLiteral","StrictWith","SuperNotAllowed","SuperPrivateField","TrailingDecorator","TupleExpressionBarIncorrectEndSyntaxType","TupleExpressionBarIncorrectStartSyntaxType","TupleExpressionHashIncorrectStartSyntaxType","UnexpectedArgumentPlaceholder","UnexpectedAwaitAfterPipelineBody","UnexpectedDigitAfterHash","UnexpectedImportExport","UnexpectedKeyword","UnexpectedLeadingDecorator","UnexpectedLexicalDeclaration","UnexpectedNewTarget","UnexpectedNumericSeparator","UnexpectedPrivateField","UnexpectedReservedWord","UnexpectedSuper","UnexpectedToken","UnexpectedTokenUnaryExponentiation","UnsupportedBind","UnsupportedDecoratorExport","UnsupportedDefaultExport","UnsupportedImport","UnsupportedMetaProperty","UnsupportedParameterDecorator","UnsupportedPropertyDecorator","UnsupportedSuper","UnterminatedComment","UnterminatedRegExp","UnterminatedString","UnterminatedTemplate","VarRedeclaration","YieldBindingIdentifier","YieldInParameter","ZeroDigitNumericSeparator","ParserError","getLocationForPosition","pos","startLoc","lastTokStart","lastTokStartLoc","endLoc","lastTokEnd","lastTokEndLoc","raise","errorTemplate","params","raiseWithData","data","message","replace","_","_raise","errorContext","err","SyntaxError","errorRecovery","isLookahead","errors","isSimpleProperty","kind","method","estree","superClass","estreeParseRegExpLiteral","pattern","flags","regex","e","estreeParseLiteral","estreeParseBigIntLiteral","bigInt","BigInt","String","estreeParseDecimalLiteral","parseLiteral","directiveToStmt","directive","directiveLiteral","stmt","startNodeAt","expression","raw","extra","finishNodeAt","initFunction","isAsync","checkDeclaration","checkGetterSetterParams","prop","paramCount","checkLVal","expr","bindingType","checkClashes","contextDescription","disallowLetBinding","forEach","checkProto","isRecord","protoRef","refExpressionErrors","isValidDirective","_stmt$expression$extr","parenthesized","stmtToDirective","parseBlockBody","allowDirectives","topLevel","directiveStatements","directives","map","d","concat","pushClassMethod","classBody","isGenerator","isConstructor","allowsDirectSuper","parseMethod","typeParameters","parseExprAtom","startPos","parseFunctionBody","allowExpression","isMethod","allowDirectSuper","inClassScope","funcNode","startNode","finishNode","parseObjectMethod","isPattern","isAccessor","shorthand","parseObjectProperty","toAssignable","toAssignableObjectExpressionProp","isLast","key","finishCallExpression","optional","callee","toReferencedListDeep","exprList","isParenthesizedExpr","parseExport","exported","specifiers","parseSubscript","base","noCalls","optionalChainMember","substring","stop","chain","startNodeAtNode","TokContext","isExpr","preserveSpace","override","types$1","braceStatement","braceExpression","recordExpression","templateQuasi","parenStatement","parenExpression","p","readTmplToken","functionExpression","functionStatement","context","exprAllowed","out","curContext","prevType","allowed","prodParam","hasYield","isIterator","braceIsBlock","statementParens","hasPrecedingLineBreak","b_stat","nonASCIIidentifierStartChars","nonASCIIidentifierChars","nonASCIIidentifierStart","nonASCIIidentifier","astralIdentifierStartCodes","astralIdentifierCodes","isInAstralSet","isIdentifierStart","test","fromCharCode","isIdentifierChar","reservedWords","strict","strictBind","keywords$1","Set","reservedWordsStrictSet","reservedWordsStrictBindSet","isReservedWord","word","inModule","isStrictReservedWord","isStrictBindOnlyReservedWord","isStrictBindReservedWord","isKeyword","keywordRelationalOperator","isIteratorStart","current","next","reservedTypes","FlowErrors","AmbiguousConditionalArrow","AmbiguousDeclareModuleKind","AssignReservedType","DeclareClassElement","DeclareClassFieldInitializer","DuplicateDeclareModuleExports","EnumBooleanMemberNotInitialized","EnumDuplicateMemberName","EnumInconsistentMemberValues","EnumInvalidExplicitType","EnumInvalidExplicitTypeUnknownSupplied","EnumInvalidMemberInitializerPrimaryType","EnumInvalidMemberInitializerSymbolType","EnumInvalidMemberInitializerUnknownType","EnumInvalidMemberName","EnumNumberMemberNotInitialized","EnumStringMemberInconsistentlyInitailized","ImportTypeShorthandOnlyInPureImport","InexactInsideExact","InexactInsideNonObject","InexactVariance","InvalidNonTypeImportInDeclareModule","MissingTypeParamDefault","NestedDeclareModule","NestedFlowComment","OptionalBindingPattern","SpreadVariance","TypeBeforeInitializer","TypeCastInPattern","UnexpectedExplicitInexactInObject","UnexpectedReservedType","UnexpectedReservedUnderscore","UnexpectedSpaceBetweenModuloChecks","UnexpectedSpreadType","UnexpectedSubtractionOperand","UnexpectedTokenAfterTypeParameter","UnexpectedTypeParameterBeforeAsyncArrowFunction","UnsupportedDeclareExportKind","UnsupportedStatementInDeclareModule","UnterminatedFlowComment","isEsModuleType","bodyElement","declaration","hasTypeImportKind","importKind","isMaybeDefaultImport","exportSuggestions","const","let","interface","partition","list","list1","list2","FLOW_PRAGMA_REGEX","flow","flowPragma","shouldParseTypes","shouldParseEnums","finishToken","val","matches","Error","flowParseTypeInitialiser","tok","oldInType","inType","expect","flowParseType","flowParsePredicate","moduloLoc","moduloPos","checksLoc","expectContextual","eat","parseExpression","flowParseTypeAndPredicateInitialiser","predicate","flowParseDeclareClass","flowParseInterfaceish","flowParseDeclareFunction","id","parseIdentifier","typeNode","typeContainer","isRelational","flowParseTypeParameterDeclaration","tmp","flowParseFunctionTypeParams","rest","returnType","typeAnnotation","resetEndLocation","semicolon","flowParseDeclare","insideModule","flowParseDeclareVariable","eatContextual","flowParseDeclareModuleExports","flowParseDeclareModule","isContextual","flowParseDeclareTypeAlias","flowParseDeclareOpaqueType","flowParseDeclareInterface","flowParseDeclareExportDeclaration","unexpected","flowParseTypeAnnotatableIdentifier","scope","declareName","enter","bodyNode","parseImport","exit","hasModuleExport","default","isLet","suggestion","exportKind","flowParseTypeAnnotation","flowParseTypeAlias","flowParseOpaqueType","isClass","flowParseRestrictedIdentifier","extends","implements","mixins","flowParseInterfaceExtends","flowParseObjectType","allowStatic","allowExact","allowSpread","allowProto","allowInexact","flowParseQualifiedTypeIdentifier","flowParseTypeParameterInstantiation","flowParseInterface","checkNotUnderscore","checkReservedType","liberal","right","declare","supertype","impltype","flowParseTypeParameter","requireDefault","nodeStart","variance","flowParseVariance","ident","bound","jsxTagStart","defaultRequired","typeParameter","expectRelational","oldNoAnonFunctionType","noAnonFunctionType","flowParseTypeParameterInstantiationCallOrNew","flowParseTypeOrImplicitInstantiation","flowParseInterfaceType","flowParseObjectPropertyKey","flowParseObjectTypeIndexer","isStatic","static","lookahead","flowParseObjectTypeInternalSlot","flowParseObjectTypeMethodish","flowParseFunctionTypeParam","flowParseObjectTypeCallProperty","valueNode","callProperties","indexers","internalSlots","endDelim","exact","inexact","protoStart","inexactStart","propOrInexact","flowParseObjectTypeProperty","flowObjectTypeSemicolon","isInexactToken","argument","proto","flowCheckGetterSetterParams","property","node2","qualification","flowParseGenericType","flowParseTypeofType","flowParsePrimaryType","flowParseTupleType","lh","reinterpretTypeAsFunctionTypeParam","flowIdentToTypeAnnotation","isGroupedType","createIdentifier","flowParsePostfixType","canInsertSemicolon","elementType","flowParsePrefixType","flowParseAnonFunctionWithoutParens","param","flowParseIntersectionType","flowParseUnionType","allowPrimitiveOverride","typeCastToParameter","allowExpressionBody","forwardNoArrowParamsConversionAt","parseFunctionBodyAndFinish","parseStatement","flowParseEnumDeclaration","parseExpressionStatement","shouldParseExportDeclaration","isExportDefaultSpecifier","parseExportDefaultExpression","parseConditional","refNeedsArrowPos","result","tryParse","error","failState","clone","originalNoArrowAt","noArrowAt","consequent","failed","tryParseConditionalConsequent","valid","invalid","getArrowLikeExpressions","alternate","parseMaybeAssign","noArrowParamsConversionAt","parseMaybeAssignAllowIn","disallowInvalid","arrows","finishArrowValidation","every","isAssignable","_node$extra","toAssignableList","trailingComma","checkParams","parse","indexOf","parseParenItem","typeCastNode","assertModuleNodeAllowed","decl","parseExportDeclaration","declarationNode","parseExportSpecifiers","parseExportFrom","eatExportStar","maybeParseExportNamespaceSpecifier","hasNamespace","parseClassId","isStatement","optionalId","parseClassMember","member","constructorAllowsSuper","parseClassMemberFromModifier","getTokenFromCode","charCodeAt","finishOp","readWord","isBinding","element","operator","trailingCommaPos","toReferencedList","_expr$extra","parseClassProperty","parseClassPrivateProperty","isClassMethod","isClassProperty","isNonstaticConstructor","pushClassPrivateMethod","parseClassSuper","superTypeParameters","implemented","parsePropertyName","isPrivateNameAllowed","parseObjPropValue","parseAssignableListItemTypes","parseMaybeDefault","left","shouldParseDefaultImport","parseImportSpecifierLocal","specifier","local","maybeParseDefaultImportSpecifier","parseImportSpecifier","firstIdentLoc","firstIdent","specifierTypeKind","isLookaheadContextual","as_ident","imported","__clone","nodeIsTypeImport","specifierIsTypeImport","checkReservedWord","parseFunctionParams","allowModifiers","parseVarId","parseAsyncArrowFromCallExpression","call","shouldParseAsyncArrow","afterLeftParse","_jsx","jsx","j_oTag","j_expr","_jsx2","_jsx3","abort","_arrowExpression$extr","arrowExpression","resetStartLocationFromNode","maybeUnwrapTypeCastExpression","aborted","async","thrown","parseArrow","shouldParseArrow","setArrowFunctionParameters","allowDuplicates","isArrowFunction","parseParenAndDistinguishExpression","canBeArrow","parseSubscripts","parseCallExpressionArguments","parseAsyncArrowWithTypeParameters","subscriptState","isLookaheadToken_lt","typeArguments","parseNewArguments","targs","parseArrowExpression","readToken_mult_modulo","hasFlowComment","nextToken","readToken_pipe_amp","parseTopLevel","file","program","fileNode","skipBlockComment","skipFlowComment","hasFlowCommentCompletion","shiftToFirstNonWhiteSpace","includes","ch2","ch3","flowEnumErrorBooleanMemberNotInitialized","enumName","memberName","flowEnumErrorInvalidMemberName","toUpperCase","flowEnumErrorDuplicateMemberName","flowEnumErrorInconsistentMemberValues","flowEnumErrorInvalidExplicitType","suppliedType","flowEnumErrorInvalidMemberInitializer","explicitType","flowEnumErrorNumberMemberNotInitialized","flowEnumErrorStringMemberInconsistentlyInitailized","flowEnumMemberInit","endOfInit","literal","parseBooleanLiteral","flowEnumMemberRaw","init","flowEnumCheckExplicitTypeMismatch","expectedType","flowEnumMembers","seenNames","members","booleanMembers","numberMembers","stringMembers","defaultedMembers","memberNode","add","flowEnumStringMembers","initializedMembers","_i","_i2","flowEnumParseExplicitType","flowEnumBody","nameLoc","empty","boolsLen","numsLen","strsLen","defaultedLen","_i3","_members$defaultedMem","_i4","_members$defaultedMem2","nextTokenStart","afterNext","entities","quot","amp","apos","lt","gt","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","AElig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","OElig","oelig","Scaron","scaron","Yuml","fnof","circ","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","bull","hellip","permil","prime","Prime","lsaquo","rsaquo","oline","frasl","euro","image","weierp","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","infin","ang","and","or","cap","cup","int","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","lang","rang","loz","spades","clubs","hearts","diams","HEX_NUMBER","DECIMAL_NUMBER","JsxErrors","AttributeIsEmpty","MissingClosingTagFragment","MissingClosingTagElement","UnsupportedJsxValue","UnterminatedJsxContent","UnwrappedAdjacentJSXElements","j_cTag","jsxName","jsxText","jsxTagEnd","isFragment","object","getQualifiedJSXName","namespace","jsxReadToken","chunkStart","ch","jsxReadEntity","jsxReadNewLine","normalizeCRLF","curLine","jsxReadString","quote","str","count","entity","substr","fromCodePoint","parseInt","jsxReadWord","jsxParseIdentifier","jsxParseNamespacedName","jsxParseElementName","newNode","jsxParseAttributeValue","jsxParseExpressionContainer","jsxParseEmptyExpression","jsxParseSpreadChild","jsxParseAttribute","jsxParseOpeningElementAt","jsxParseOpeningElementAfterName","attributes","selfClosing","jsxParseClosingElementAt","jsxParseElementAt","children","openingElement","closingElement","contents","openingFragment","closingFragment","jsxParseElement","inPropertyName","Scope","var","lexical","functions","ScopeHandler","scopeStack","undefinedExports","undefinedPrivateNames","inFunction","currentVarScope","allowSuper","currentThisScope","inClass","inNonArrowFunction","treatFunctionsAsVar","treatFunctionsAsVarInScope","currentScope","createScope","checkRedeclarationInScope","maybeExportDefined","delete","isRedeclaredInScope","checkLocalExport","TypeScriptScope","args","enums","constEnums","classes","exportOnlyBindings","TypeScriptScopeHandler","isConst","wasConst","PARAM","PARAM_YIELD","PARAM_AWAIT","PARAM_RETURN","PARAM_IN","ProductionParameterHandler","stacks","currentFlags","hasAwait","hasReturn","hasIn","functionFlags","nonNull","x","assert","TSErrors","ClassMethodHasDeclare","ClassMethodHasReadonly","DeclareClassFieldHasInitializer","DuplicateModifier","EmptyHeritageClauseType","IndexSignatureHasAbstract","IndexSignatureHasAccessibility","IndexSignatureHasStatic","InvalidTupleMemberLabel","MixedLabeledAndUnlabeledElements","OptionalTypeBeforeRequired","PatternIsOptional","PrivateElementHasAbstract","PrivateElementHasAccessibility","TemplateTypeHasSubstitution","TypeAnnotationAfterAssign","UnexpectedReadonly","UnexpectedTypeAnnotation","UnexpectedTypeCastInParameter","UnsupportedImportTypeArgument","UnsupportedParameterPropertyKind","UnsupportedSignatureParameterKind","keywordTypeFromName","typescript","getScopeHandler","tsIsIdentifier","tsNextTokenCanFollowModifier","tsParseModifier","allowedModifiers","modifier","tsTryParse","bind","tsParseModifiers","modified","hasOwnProperty","tsIsListTerminator","tsParseList","parseElement","tsParseDelimitedList","tsParseDelimitedListWorker","expectSuccess","tsParseBracketedList","bracket","skipFirstToken","tsParseImportType","qualifier","tsParseEntityName","tsParseTypeArguments","allowReservedWords","tsParseTypeReference","typeName","tsParseThisTypePredicate","lhs","parameterName","tsParseTypeAnnotation","tsParseThisTypeNode","tsParseTypeQuery","exprName","tsParseTypeParameter","parseIdentifierName","constraint","tsEatThenParseType","tsTryParseTypeParameters","tsParseTypeParameters","tsTryNextParseConstantContext","tsFillSignature","returnToken","signature","returnTokenRequired","parameters","tsParseBindingListForSignature","tsParseTypeOrTypePredicateAnnotation","parseBindingList","tsParseTypeMemberSemicolon","tsParseSignatureMember","tsIsUnambiguouslyIndexSignature","tsTryParseIndexSignature","tsLookAhead","tsTryParseTypeAnnotation","tsParsePropertyOrMethodSignature","readonly","nodeAny","tsParseTypeMember","idx","tsParseTypeLiteral","tsParseObjectTypeMembers","tsIsStartOfMappedType","tsParseMappedTypeParameter","tsExpectThenParseType","tsParseMappedType","tsTryParseType","tsParseTupleType","elementTypes","tsParseTupleElementType","seenOptionalElement","labeledElements","elementNode","_labeledElements","isLabeled","tsParseType","labeled","labeledNode","optionalTypeNode","restNode","tsParseParenthesizedType","tsParseFunctionOrConstructorType","tsParseLiteralTypeNode","tsParseTemplateLiteralType","templateNode","parseTemplate","expressions","tsParseThisTypeOrThisTypePredicate","thisKeyword","tsParseNonArrayType","lookaheadCharCode","parseMaybeUnary","tsParseArrayTypeOrHigher","objectType","indexType","tsParseTypeOperator","tsParseTypeOperatorOrHigher","tsCheckTypeAnnotationForReadOnly","tsParseInferType","find","kw","tsParseUnionOrIntersectionType","parseConstituentType","tsParseIntersectionTypeOrHigher","tsParseUnionTypeOrHigher","tsIsStartOfFunctionType","tsIsUnambiguouslyStartOfFunctionType","tsSkipParameterStart","braceStackCounter","tsInType","t","asserts","tsParseTypePredicateAsserts","thisTypePredicate","typePredicateVariable","tsParseTypePredicatePrefix","tsTryParseTypeOrTypePredicateAnnotation","containsEsc","eatColon","tsParseNonConditionalType","checkType","extendsType","trueType","falseType","tsParseTypeAssertion","tsNextThenParseType","tsParseHeritageClause","descriptor","originalStart","delimitedList","tsParseExpressionWithTypeArguments","tsParseInterfaceDeclaration","tsParseTypeAliasDeclaration","tsInNoContext","cb","oldContext","tsDoThenParseType","tsParseEnumMember","initializer","tsParseEnumDeclaration","tsParseModuleBlock","parseBlockOrModuleBlockBody","tsParseModuleOrNamespaceDeclaration","nested","inner","tsParseAmbientExternalModuleDeclaration","global","tsParseImportEqualsDeclaration","isExport","moduleReference","tsParseModuleReference","tsIsExternalModuleReference","tsParseExternalModuleReference","f","res","tsTryParseAndCatch","tsTryParseDeclare","nany","isLineTerminator","starttype","parseFunctionStatement","parseClass","parseVarStatement","tsParseDeclaration","tsTryParseExportDeclaration","tsParseExpressionStatement","mod","tsCheckLineTerminatorAndMatch","cls","abstract","tokenType","tsTryParseGenericAsyncArrowFunction","oldMaybeInArrowParameters","maybeInArrowParameters","oldYieldPos","yieldPos","oldAwaitPos","awaitPos","tsIsDeclarationStart","parseAssignableListItem","decorators","accessibility","parseAccessModifier","elt","pp","parameter","bodilessType","registerFunctionStatementId","nonNullExpression","atPossibleAsyncArrow","asyncArrowFn","parseTaggedTemplateExpression","parseExprOp","leftStartPos","leftStartLoc","minPrec","reScan_lt_gt","checkKeywords","checkDuplicateExports","ahead","importNode","isAbstractClass","parseStatementContent","parseClassMemberWithIsStatic","parsePostMemberNameModifiers","methodOrProp","isDeclare","resetStartLocation","parseClassPropertyAnnotation","definite","equal","_typeCast","_typeCast2","_jsx4","_typeCast3","typeCast","_typeParameters","parseBindingAtom","parseMaybeDecoratorArguments","readToken_lt_gt","isInParens","canHaveLeadingDecorator","getGetterSetterExpectedParamCount","baseCount","firstParam","hasContextParam","parseCatchClauseParam","placeholder","placeholders","parsePlaceholder","expectedNode","assertNoSpace","finishPlaceholder","isFinished","verifyBreakContinue","parseBlock","parseFunctionId","takeDecorators","oldStrict","parseClassBody","expectPlugin","isUnparsedContextual","startsWith","nextTokenStartSince","maybeParseExportDefaultSpecifier","checkExport","filter","hasStarImport","maybeParseStarImportSpecifier","parseNamedImportSpecifiers","parseImportSource","v8intrinsic","parseV8Intrinsic","v8IntrinsicStart","identifier","some","Array","isArray","option","PIPELINE_PROPOSALS","RECORD_AND_TUPLE_SYNTAX_TYPES","validatePlugins","decoratorsBeforeExport","join","moduleAttributesVerionPluginOption","mixinPlugins","mixinPluginNames","keys","defaultOptions","sourceType","sourceFilename","startLine","allowAwaitOutsideFunction","allowReturnOutsideFunction","allowImportExportEverywhere","allowSuperOutsideMethod","allowUndeclaredExports","strictMode","ranges","tokens","createParenthesizedExpressions","getOptions","opts","_Object$keys","State","potentialArrowAt","inParameters","maybeInAsyncArrowHead","inPipeline","topicContext","maxNumOfResolvableTopics","maxTopicIndex","soloAwait","inFSharpPipelineDirectBody","labels","decoratorStack","comments","octalPositions","exportedIdentifiers","tokensLength","curPosition","skipArrays","_isDigit","isDigit","VALID_REGEX_FLAGS","forbiddenNumericSeparatorSiblings","decBinOct","hex","allowedNumericSeparatorSiblings","bin","oct","dec","Token","Tokenizer","pushToken","checkKeywordEscapes","old","curr","skip","setStrict","lastIndexOf","skipSpace","codePointAt","pushComment","block","text","skipLineComment","startSkip","loop","readToken_numberSign","readToken_interpreter","nextPos","readToken_dot","readNumber","readToken_slash","readRegexp","width","readToken_caret","readToken_plus_min","size","readToken_eq_excl","readToken_question","next2","readRadixNumber","readString","escaped","charAt","content","mods","char","charCode","readInt","radix","len","forceLen","allowNumSeparator","forbiddenSiblings","allowedSiblings","total","Infinity","prev","Number","isNaN","isBigInt","startsWithDot","isFloat","isDecimal","hasExponent","isOctal","hasLeadingZero","integer","underscorePos","parseFloat","readCodePoint","throwOnInvalid","codePos","readHexChar","readEscapedChar","containsInvalid","inTemplate","octalStr","octal","n","readWord1","escStart","identifierCheck","esc","parent","update","UtilParser","addExtra","op","nameStart","nameEnd","messageOrType","missingPlugin","expectOnePlugin","names","checkYieldAwaitInDefaultParams","fn","oldState","abortSignal","checkExpressionErrors","andThrow","shorthandAssign","doubleProto","isLiteralPropertyName","ExpressionErrors","Node","parser","range","NodeUtils","locationNode","unwrapParenthesizedExpression","LValParser","_node$extra3","_node$extra2","raiseRestNotLast","checkToRestConversion","arg","raiseTrailingCommaAfterRest","parseSpread","parseRestBinding","parseObjectLike","close","closeCharCode","allowEmpty","elts","first","checkCommaAfterRest","parseDecorator","_startLoc","_startPos","_left","strictModeChanged","_expr$properties","_expr$elements","elem","ExpressionParser","computed","used","shouldExitDescending","getExpression","paramFlags","disallowIn","disallowInAnd","parseExpressionBase","allowInAnd","parseMaybeAssignDisallowIn","parseYield","ownExpressionErrors","parseMaybeConditional","parseExprOps","prec","checkPipelineAtInfixOperator","logical","coalesce","parseExprOpRightExpr","nextOp","withTopicPermittingContext","parseSmartPipelineBody","parseExprOpBaseRightExpr","withSoloAwaitPermittingContext","parseFSharpPipelineBody","isAwaitAllowed","parseAwait","isDelete","parseUpdate","parseExprSubscripts","maybeAsyncArrow","oldMaybeInAsyncArrowHead","parseBind","parseCoverCallAndAsyncArrowHead","parseMember","parseMaybePrivateName","classScope","usePrivateName","parseNoCallExpr","tag","quasi","_node$arguments","possibleAsyncArrow","dynamicImport","allowPlaceholder","nodeForExtra","innerParenStart","oldInFSharpPipelineDirectBody","parseExprListItem","_call$extra","parseSuper","parseImportMetaProperty","parseFunction","parseAsyncArrowUnaryFunction","parseDo","parseArrayLike","parseFunctionOrFunctionSent","parseDecorators","parseNewOrNewTarget","primaryTopicReferenceIsAllowedInCurrentTopicContext","registerTopicReference","nextCh","lookaheadCh","oldLabels","isPrivate","meta","parseMetaProperty","propertyName","innerStartPos","innerStartLoc","spreadStart","optionalCommaStart","spreadNodeStartPos","spreadNodeStartLoc","innerEndPos","innerEndLoc","arrowNode","parenStart","metaProp","parseNew","parseExprList","parseTemplateElement","isTagged","cooked","tail","curElt","quasis","propHash","create","parsePropertyDefinition","maybeAsyncOrAccessorProp","keyName","oldInPropertyName","generator","canBePattern","isTuple","isExpression","oldInParameters","hasStrictModeDirective","nonSimple","isSimpleParamList","errorPos","nameHash","identifierName","reservedTest","delegate","childExpression","checkSmartPipelineBodyEarlyErrors","parseSmartPipelineBodyInStyle","isSimpleReference","topicReferenceWasUsedInCurrentTopicContext","callback","outerContextTopicState","withTopicForbiddingContext","outerContextSoloAwaitState","prodParamToSet","prodParamToClear","ret","loopLabel","switchLabel","FUNC_NO_FLAGS","FUNC_STATEMENT","FUNC_HANGING_STATEMENT","FUNC_NULLABLE_ID","StatementParser","interpreter","parseInterpreterDirective","_Array$from","from","parseBreakContinueStatement","parseDebuggerStatement","parseDoStatement","parseForStatement","parseIfStatement","parseReturnStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseWhileStatement","parseWithStatement","parseEmptyStatement","nextTokenCharCode","isAsyncFunction","maybeName","parseLabeledStatement","allowExport","currentContextDecorators","decorator","isBreak","lab","parseHeaderExpression","awaitAt","parseFor","parseVar","declarations","parseForIn","description","declarationPosition","discriminant","cases","cur","sawDefault","isCase","simple","handler","clause","finalizer","_this$state$labels","statementStart","createNewLexicalScope","afterBlockParse","parsedNonDirective","isForIn","await","isFor","isTypescript","statement","isHangingStatement","requireId","hadConstructor","publicMethod","privateMethod","publicProp","privateProp","publicMember","parseClassElementName","isSimple","maybeQuestionTokenStart","pushClassPrivateProperty","pushClassProperty","declarePrivateName","hasDefault","parseAfterDefault","hasStar","parseAfterNamespace","isFromRequired","hasSpecifiers","maybeParseExportNamedSpecifiers","hasDeclaration","maybeParseExportDeclaration","l","hasFrom","nextAfterFrom","checkNames","isDefault","isFrom","_declaration$extra","_node$specifiers","_i5","_node$declaration$dec","_i6","_node$properties","_i7","_node$elements","nodes","parseNext","maybeParseModuleAttributes","attrs","ClassScope","privateNames","loneAccessors","ClassScopeHandler","oldClassScope","redefined","accessor","oldStatic","newStatic","oldKind","newKind","_this$stack","Parser","pluginsMap","pluginMap","_options","getParser","ast","_unused","moduleError","_unused2","getParserClass","parserClassCache","pluginsFromOptions","pluginList","tokTypes"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\nclass TokenType {\n  constructor(label, conf = {}) {\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    this.updateContext = null;\n  }\n\n}\nconst keywords = new Map();\n\nfunction createKeyword(name, options = {}) {\n  options.keyword = name;\n  const token = new TokenType(name, options);\n  keywords.set(name, token);\n  return token;\n}\n\nfunction createBinop(name, binop) {\n  return new TokenType(name, {\n    beforeExpr,\n    binop\n  });\n}\n\nconst types = {\n  num: new TokenType(\"num\", {\n    startsExpr\n  }),\n  bigint: new TokenType(\"bigint\", {\n    startsExpr\n  }),\n  decimal: new TokenType(\"decimal\", {\n    startsExpr\n  }),\n  regexp: new TokenType(\"regexp\", {\n    startsExpr\n  }),\n  string: new TokenType(\"string\", {\n    startsExpr\n  }),\n  name: new TokenType(\"name\", {\n    startsExpr\n  }),\n  eof: new TokenType(\"eof\"),\n  bracketL: new TokenType(\"[\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketHashL: new TokenType(\"#[\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketBarL: new TokenType(\"[|\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketR: new TokenType(\"]\"),\n  bracketBarR: new TokenType(\"|]\"),\n  braceL: new TokenType(\"{\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceBarL: new TokenType(\"{|\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceHashL: new TokenType(\"#{\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceR: new TokenType(\"}\"),\n  braceBarR: new TokenType(\"|}\"),\n  parenL: new TokenType(\"(\", {\n    beforeExpr,\n    startsExpr\n  }),\n  parenR: new TokenType(\")\"),\n  comma: new TokenType(\",\", {\n    beforeExpr\n  }),\n  semi: new TokenType(\";\", {\n    beforeExpr\n  }),\n  colon: new TokenType(\":\", {\n    beforeExpr\n  }),\n  doubleColon: new TokenType(\"::\", {\n    beforeExpr\n  }),\n  dot: new TokenType(\".\"),\n  question: new TokenType(\"?\", {\n    beforeExpr\n  }),\n  questionDot: new TokenType(\"?.\"),\n  arrow: new TokenType(\"=>\", {\n    beforeExpr\n  }),\n  template: new TokenType(\"template\"),\n  ellipsis: new TokenType(\"...\", {\n    beforeExpr\n  }),\n  backQuote: new TokenType(\"`\", {\n    startsExpr\n  }),\n  dollarBraceL: new TokenType(\"${\", {\n    beforeExpr,\n    startsExpr\n  }),\n  at: new TokenType(\"@\"),\n  hash: new TokenType(\"#\", {\n    startsExpr\n  }),\n  interpreterDirective: new TokenType(\"#!...\"),\n  eq: new TokenType(\"=\", {\n    beforeExpr,\n    isAssign\n  }),\n  assign: new TokenType(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  incDec: new TokenType(\"++/--\", {\n    prefix,\n    postfix,\n    startsExpr\n  }),\n  bang: new TokenType(\"!\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  tilde: new TokenType(\"~\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  plusMin: new TokenType(\"+/-\", {\n    beforeExpr,\n    binop: 9,\n    prefix,\n    startsExpr\n  }),\n  modulo: new TokenType(\"%\", {\n    beforeExpr,\n    binop: 10,\n    startsExpr\n  }),\n  star: new TokenType(\"*\", {\n    binop: 10\n  }),\n  slash: createBinop(\"/\", 10),\n  exponent: new TokenType(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true\n  }),\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", {\n    beforeExpr\n  }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", {\n    beforeExpr\n  }),\n  _do: createKeyword(\"do\", {\n    isLoop,\n    beforeExpr\n  }),\n  _else: createKeyword(\"else\", {\n    beforeExpr\n  }),\n  _finally: createKeyword(\"finally\"),\n  _for: createKeyword(\"for\", {\n    isLoop\n  }),\n  _function: createKeyword(\"function\", {\n    startsExpr\n  }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", {\n    beforeExpr\n  }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _while: createKeyword(\"while\", {\n    isLoop\n  }),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", {\n    beforeExpr,\n    startsExpr\n  }),\n  _this: createKeyword(\"this\", {\n    startsExpr\n  }),\n  _super: createKeyword(\"super\", {\n    startsExpr\n  }),\n  _class: createKeyword(\"class\", {\n    startsExpr\n  }),\n  _extends: createKeyword(\"extends\", {\n    beforeExpr\n  }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", {\n    startsExpr\n  }),\n  _null: createKeyword(\"null\", {\n    startsExpr\n  }),\n  _true: createKeyword(\"true\", {\n    startsExpr\n  }),\n  _false: createKeyword(\"false\", {\n    startsExpr\n  }),\n  _in: createKeyword(\"in\", {\n    beforeExpr,\n    binop: 7\n  }),\n  _instanceof: createKeyword(\"instanceof\", {\n    beforeExpr,\n    binop: 7\n  }),\n  _typeof: createKeyword(\"typeof\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _void: createKeyword(\"void\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _delete: createKeyword(\"delete\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  })\n};\n\nconst SCOPE_OTHER = 0b00000000,\n      SCOPE_PROGRAM = 0b00000001,\n      SCOPE_FUNCTION = 0b00000010,\n      SCOPE_ARROW = 0b00000100,\n      SCOPE_SIMPLE_CATCH = 0b00001000,\n      SCOPE_SUPER = 0b00010000,\n      SCOPE_DIRECT_SUPER = 0b00100000,\n      SCOPE_CLASS = 0b01000000,\n      SCOPE_TS_MODULE = 0b10000000,\n      SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_TS_MODULE;\nconst BIND_KIND_VALUE = 0b00000000001,\n      BIND_KIND_TYPE = 0b00000000010,\n      BIND_SCOPE_VAR = 0b00000000100,\n      BIND_SCOPE_LEXICAL = 0b00000001000,\n      BIND_SCOPE_FUNCTION = 0b00000010000,\n      BIND_FLAGS_NONE = 0b00001000000,\n      BIND_FLAGS_CLASS = 0b00010000000,\n      BIND_FLAGS_TS_ENUM = 0b00100000000,\n      BIND_FLAGS_TS_CONST_ENUM = 0b01000000000,\n      BIND_FLAGS_TS_EXPORT_ONLY = 0b10000000000;\nconst BIND_CLASS = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_CLASS,\n      BIND_LEXICAL = BIND_KIND_VALUE | 0 | BIND_SCOPE_LEXICAL | 0,\n      BIND_VAR = BIND_KIND_VALUE | 0 | BIND_SCOPE_VAR | 0,\n      BIND_FUNCTION = BIND_KIND_VALUE | 0 | BIND_SCOPE_FUNCTION | 0,\n      BIND_TS_INTERFACE = 0 | BIND_KIND_TYPE | 0 | BIND_FLAGS_CLASS,\n      BIND_TS_TYPE = 0 | BIND_KIND_TYPE | 0 | 0,\n      BIND_TS_ENUM = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_TS_ENUM,\n      BIND_TS_AMBIENT = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY,\n      BIND_NONE = 0 | 0 | 0 | BIND_FLAGS_NONE,\n      BIND_OUTSIDE = BIND_KIND_VALUE | 0 | 0 | BIND_FLAGS_NONE,\n      BIND_TS_CONST_ENUM = BIND_TS_ENUM | BIND_FLAGS_TS_CONST_ENUM,\n      BIND_TS_NAMESPACE = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY;\nconst CLASS_ELEMENT_FLAG_STATIC = 0b100,\n      CLASS_ELEMENT_KIND_GETTER = 0b010,\n      CLASS_ELEMENT_KIND_SETTER = 0b001,\n      CLASS_ELEMENT_KIND_ACCESSOR = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_KIND_SETTER;\nconst CLASS_ELEMENT_STATIC_GETTER = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_FLAG_STATIC,\n      CLASS_ELEMENT_STATIC_SETTER = CLASS_ELEMENT_KIND_SETTER | CLASS_ELEMENT_FLAG_STATIC,\n      CLASS_ELEMENT_INSTANCE_GETTER = CLASS_ELEMENT_KIND_GETTER,\n      CLASS_ELEMENT_INSTANCE_SETTER = CLASS_ELEMENT_KIND_SETTER,\n      CLASS_ELEMENT_OTHER = 0;\n\nconst lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\nconst lineBreakG = new RegExp(lineBreak.source, \"g\");\nfunction isNewLine(code) {\n  switch (code) {\n    case 10:\n    case 13:\n    case 8232:\n    case 8233:\n      return true;\n\n    default:\n      return false;\n  }\n}\nconst skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\nfunction isWhitespace(code) {\n  switch (code) {\n    case 0x0009:\n    case 0x000b:\n    case 0x000c:\n    case 32:\n    case 160:\n    case 5760:\n    case 0x2000:\n    case 0x2001:\n    case 0x2002:\n    case 0x2003:\n    case 0x2004:\n    case 0x2005:\n    case 0x2006:\n    case 0x2007:\n    case 0x2008:\n    case 0x2009:\n    case 0x200a:\n    case 0x202f:\n    case 0x205f:\n    case 0x3000:\n    case 0xfeff:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nclass Position {\n  constructor(line, col) {\n    this.line = line;\n    this.column = col;\n  }\n\n}\nclass SourceLocation {\n  constructor(start, end) {\n    this.start = start;\n    this.end = end;\n  }\n\n}\nfunction getLineInfo(input, offset) {\n  let line = 1;\n  let lineStart = 0;\n  let match;\n  lineBreakG.lastIndex = 0;\n\n  while ((match = lineBreakG.exec(input)) && match.index < offset) {\n    line++;\n    lineStart = lineBreakG.lastIndex;\n  }\n\n  return new Position(line, offset - lineStart);\n}\n\nclass BaseParser {\n  constructor() {\n    this.sawUnambiguousESM = false;\n    this.ambiguousScriptDifferentAst = false;\n  }\n\n  hasPlugin(name) {\n    return this.plugins.has(name);\n  }\n\n  getPluginOption(plugin, name) {\n    if (this.hasPlugin(plugin)) return this.plugins.get(plugin)[name];\n  }\n\n}\n\nfunction last(stack) {\n  return stack[stack.length - 1];\n}\n\nclass CommentsParser extends BaseParser {\n  addComment(comment) {\n    if (this.filename) comment.loc.filename = this.filename;\n    this.state.trailingComments.push(comment);\n    this.state.leadingComments.push(comment);\n  }\n\n  adjustCommentsAfterTrailingComma(node, elements, takeAllComments) {\n    if (this.state.leadingComments.length === 0) {\n      return;\n    }\n\n    let lastElement = null;\n    let i = elements.length;\n\n    while (lastElement === null && i > 0) {\n      lastElement = elements[--i];\n    }\n\n    if (lastElement === null) {\n      return;\n    }\n\n    for (let j = 0; j < this.state.leadingComments.length; j++) {\n      if (this.state.leadingComments[j].end < this.state.commentPreviousNode.end) {\n        this.state.leadingComments.splice(j, 1);\n        j--;\n      }\n    }\n\n    const newTrailingComments = [];\n\n    for (let i = 0; i < this.state.leadingComments.length; i++) {\n      const leadingComment = this.state.leadingComments[i];\n\n      if (leadingComment.end < node.end) {\n        newTrailingComments.push(leadingComment);\n\n        if (!takeAllComments) {\n          this.state.leadingComments.splice(i, 1);\n          i--;\n        }\n      } else {\n        if (node.trailingComments === undefined) {\n          node.trailingComments = [];\n        }\n\n        node.trailingComments.push(leadingComment);\n      }\n    }\n\n    if (takeAllComments) this.state.leadingComments = [];\n\n    if (newTrailingComments.length > 0) {\n      lastElement.trailingComments = newTrailingComments;\n    } else if (lastElement.trailingComments !== undefined) {\n      lastElement.trailingComments = [];\n    }\n  }\n\n  processComment(node) {\n    if (node.type === \"Program\" && node.body.length > 0) return;\n    const stack = this.state.commentStack;\n    let firstChild, lastChild, trailingComments, i, j;\n\n    if (this.state.trailingComments.length > 0) {\n      if (this.state.trailingComments[0].start >= node.end) {\n        trailingComments = this.state.trailingComments;\n        this.state.trailingComments = [];\n      } else {\n        this.state.trailingComments.length = 0;\n      }\n    } else if (stack.length > 0) {\n      const lastInStack = last(stack);\n\n      if (lastInStack.trailingComments && lastInStack.trailingComments[0].start >= node.end) {\n        trailingComments = lastInStack.trailingComments;\n        delete lastInStack.trailingComments;\n      }\n    }\n\n    if (stack.length > 0 && last(stack).start >= node.start) {\n      firstChild = stack.pop();\n    }\n\n    while (stack.length > 0 && last(stack).start >= node.start) {\n      lastChild = stack.pop();\n    }\n\n    if (!lastChild && firstChild) lastChild = firstChild;\n\n    if (firstChild) {\n      switch (node.type) {\n        case \"ObjectExpression\":\n          this.adjustCommentsAfterTrailingComma(node, node.properties);\n          break;\n\n        case \"ObjectPattern\":\n          this.adjustCommentsAfterTrailingComma(node, node.properties, true);\n          break;\n\n        case \"CallExpression\":\n          this.adjustCommentsAfterTrailingComma(node, node.arguments);\n          break;\n\n        case \"ArrayExpression\":\n          this.adjustCommentsAfterTrailingComma(node, node.elements);\n          break;\n\n        case \"ArrayPattern\":\n          this.adjustCommentsAfterTrailingComma(node, node.elements, true);\n          break;\n      }\n    } else if (this.state.commentPreviousNode && (this.state.commentPreviousNode.type === \"ImportSpecifier\" && node.type !== \"ImportSpecifier\" || this.state.commentPreviousNode.type === \"ExportSpecifier\" && node.type !== \"ExportSpecifier\")) {\n      this.adjustCommentsAfterTrailingComma(node, [this.state.commentPreviousNode]);\n    }\n\n    if (lastChild) {\n      if (lastChild.leadingComments) {\n        if (lastChild !== node && lastChild.leadingComments.length > 0 && last(lastChild.leadingComments).end <= node.start) {\n          node.leadingComments = lastChild.leadingComments;\n          delete lastChild.leadingComments;\n        } else {\n          for (i = lastChild.leadingComments.length - 2; i >= 0; --i) {\n            if (lastChild.leadingComments[i].end <= node.start) {\n              node.leadingComments = lastChild.leadingComments.splice(0, i + 1);\n              break;\n            }\n          }\n        }\n      }\n    } else if (this.state.leadingComments.length > 0) {\n      if (last(this.state.leadingComments).end <= node.start) {\n        if (this.state.commentPreviousNode) {\n          for (j = 0; j < this.state.leadingComments.length; j++) {\n            if (this.state.leadingComments[j].end < this.state.commentPreviousNode.end) {\n              this.state.leadingComments.splice(j, 1);\n              j--;\n            }\n          }\n        }\n\n        if (this.state.leadingComments.length > 0) {\n          node.leadingComments = this.state.leadingComments;\n          this.state.leadingComments = [];\n        }\n      } else {\n        for (i = 0; i < this.state.leadingComments.length; i++) {\n          if (this.state.leadingComments[i].end > node.start) {\n            break;\n          }\n        }\n\n        const leadingComments = this.state.leadingComments.slice(0, i);\n\n        if (leadingComments.length) {\n          node.leadingComments = leadingComments;\n        }\n\n        trailingComments = this.state.leadingComments.slice(i);\n\n        if (trailingComments.length === 0) {\n          trailingComments = null;\n        }\n      }\n    }\n\n    this.state.commentPreviousNode = node;\n\n    if (trailingComments) {\n      if (trailingComments.length && trailingComments[0].start >= node.start && last(trailingComments).end <= node.end) {\n        node.innerComments = trailingComments;\n      } else {\n        const firstTrailingCommentIndex = trailingComments.findIndex(comment => comment.end >= node.end);\n\n        if (firstTrailingCommentIndex > 0) {\n          node.innerComments = trailingComments.slice(0, firstTrailingCommentIndex);\n          node.trailingComments = trailingComments.slice(firstTrailingCommentIndex);\n        } else {\n          node.trailingComments = trailingComments;\n        }\n      }\n    }\n\n    stack.push(node);\n  }\n\n}\n\nconst ErrorMessages = Object.freeze({\n  AccessorIsGenerator: \"A %0ter cannot be a generator\",\n  ArgumentsDisallowedInInitializer: \"'arguments' is not allowed in class field initializer\",\n  AsyncFunctionInSingleStatementContext: \"Async functions can only be declared at the top level or inside a block\",\n  AwaitBindingIdentifier: \"Can not use 'await' as identifier inside an async function\",\n  AwaitExpressionFormalParameter: \"await is not allowed in async function parameters\",\n  AwaitNotInAsyncFunction: \"Can not use keyword 'await' outside an async function\",\n  BadGetterArity: \"getter must not have any formal parameters\",\n  BadSetterArity: \"setter must have exactly one formal parameter\",\n  BadSetterRestParameter: \"setter function argument must not be a rest parameter\",\n  ConstructorClassField: \"Classes may not have a field named 'constructor'\",\n  ConstructorClassPrivateField: \"Classes may not have a private field named '#constructor'\",\n  ConstructorIsAccessor: \"Class constructor may not be an accessor\",\n  ConstructorIsAsync: \"Constructor can't be an async function\",\n  ConstructorIsGenerator: \"Constructor can't be a generator\",\n  DeclarationMissingInitializer: \"%0 require an initialization value\",\n  DecoratorBeforeExport: \"Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax\",\n  DecoratorConstructor: \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n  DecoratorExportClass: \"Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead.\",\n  DecoratorSemicolon: \"Decorators must not be followed by a semicolon\",\n  DeletePrivateField: \"Deleting a private field is not allowed\",\n  DestructureNamedImport: \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n  DuplicateConstructor: \"Duplicate constructor in the same class\",\n  DuplicateDefaultExport: \"Only one default export allowed per module.\",\n  DuplicateExport: \"`%0` has already been exported. Exported identifiers must be unique.\",\n  DuplicateProto: \"Redefinition of __proto__ property\",\n  DuplicateRegExpFlags: \"Duplicate regular expression flag\",\n  ElementAfterRest: \"Rest element must be last element\",\n  EscapedCharNotAnIdentifier: \"Invalid Unicode escape\",\n  ExportDefaultFromAsIdentifier: \"'from' is not allowed as an identifier after 'export default'\",\n  ForInOfLoopInitializer: \"%0 loop variable declaration may not have an initializer\",\n  GeneratorInSingleStatementContext: \"Generators can only be declared at the top level or inside a block\",\n  IllegalBreakContinue: \"Unsyntactic %0\",\n  IllegalLanguageModeDirective: \"Illegal 'use strict' directive in function with non-simple parameter list\",\n  IllegalReturn: \"'return' outside of function\",\n  ImportCallArgumentTrailingComma: \"Trailing comma is disallowed inside import(...) arguments\",\n  ImportCallArity: \"import() requires exactly %0\",\n  ImportCallNotNewExpression: \"Cannot use new with import(...)\",\n  ImportCallSpreadArgument: \"... is not allowed in import()\",\n  ImportMetaOutsideModule: `import.meta may appear only with 'sourceType: \"module\"'`,\n  ImportOutsideModule: `'import' and 'export' may appear only with 'sourceType: \"module\"'`,\n  InvalidBigIntLiteral: \"Invalid BigIntLiteral\",\n  InvalidCodePoint: \"Code point out of bounds\",\n  InvalidDecimal: \"Invalid decimal\",\n  InvalidDigit: \"Expected number in radix %0\",\n  InvalidEscapeSequence: \"Bad character escape sequence\",\n  InvalidEscapeSequenceTemplate: \"Invalid escape sequence in template\",\n  InvalidEscapedReservedWord: \"Escape sequence in keyword %0\",\n  InvalidIdentifier: \"Invalid identifier %0\",\n  InvalidLhs: \"Invalid left-hand side in %0\",\n  InvalidLhsBinding: \"Binding invalid left-hand side in %0\",\n  InvalidNumber: \"Invalid number\",\n  InvalidOrUnexpectedToken: \"Unexpected character '%0'\",\n  InvalidParenthesizedAssignment: \"Invalid parenthesized assignment pattern\",\n  InvalidPrivateFieldResolution: \"Private name #%0 is not defined\",\n  InvalidPropertyBindingPattern: \"Binding member expression\",\n  InvalidRecordProperty: \"Only properties and spread elements are allowed in record definitions\",\n  InvalidRestAssignmentPattern: \"Invalid rest operator's argument\",\n  LabelRedeclaration: \"Label '%0' is already declared\",\n  LetInLexicalBinding: \"'let' is not allowed to be used as a name in 'let' or 'const' declarations.\",\n  LineTerminatorBeforeArrow: \"No line break is allowed before '=>'\",\n  MalformedRegExpFlags: \"Invalid regular expression flag\",\n  MissingClassName: \"A class name is required\",\n  MissingEqInAssignment: \"Only '=' operator can be used for specifying default value.\",\n  MissingUnicodeEscape: \"Expecting Unicode escape sequence \\\\uXXXX\",\n  MixingCoalesceWithLogical: \"Nullish coalescing operator(??) requires parens when mixing with logical operators\",\n  ModuleAttributeDifferentFromType: \"The only accepted module attribute is `type`\",\n  ModuleAttributeInvalidValue: \"Only string literals are allowed as module attribute values\",\n  ModuleAttributesWithDuplicateKeys: 'Duplicate key \"%0\" is not allowed in module attributes',\n  ModuleExportUndefined: \"Export '%0' is not defined\",\n  MultipleDefaultsInSwitch: \"Multiple default clauses\",\n  NewlineAfterThrow: \"Illegal newline after throw\",\n  NoCatchOrFinally: \"Missing catch or finally clause\",\n  NumberIdentifier: \"Identifier directly after number\",\n  NumericSeparatorInEscapeSequence: \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences\",\n  ObsoleteAwaitStar: \"await* has been removed from the async functions proposal. Use Promise.all() instead.\",\n  OptionalChainingNoNew: \"constructors in/after an Optional Chain are not allowed\",\n  OptionalChainingNoTemplate: \"Tagged Template Literals are not allowed in optionalChain\",\n  ParamDupe: \"Argument name clash\",\n  PatternHasAccessor: \"Object pattern can't contain getter or setter\",\n  PatternHasMethod: \"Object pattern can't contain methods\",\n  PipelineBodyNoArrow: 'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized',\n  PipelineBodySequenceExpression: \"Pipeline body may not be a comma-separated sequence expression\",\n  PipelineHeadSequenceExpression: \"Pipeline head should not be a comma-separated sequence expression\",\n  PipelineTopicUnused: \"Pipeline is in topic style but does not use topic reference\",\n  PrimaryTopicNotAllowed: \"Topic reference was used in a lexical context without topic binding\",\n  PrimaryTopicRequiresSmartPipeline: \"Primary Topic Reference found but pipelineOperator not passed 'smart' for 'proposal' option.\",\n  PrivateInExpectedIn: \"Private names are only allowed in property accesses (`obj.#%0`) or in `in` expressions (`#%0 in obj`)\",\n  PrivateNameRedeclaration: \"Duplicate private name #%0\",\n  RecordExpressionBarIncorrectEndSyntaxType: \"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'\",\n  RecordExpressionBarIncorrectStartSyntaxType: \"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'\",\n  RecordExpressionHashIncorrectStartSyntaxType: \"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'\",\n  RecordNoProto: \"'__proto__' is not allowed in Record expressions\",\n  RestTrailingComma: \"Unexpected trailing comma after rest element\",\n  SloppyFunction: \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement\",\n  StaticPrototype: \"Classes may not have static property named prototype\",\n  StrictDelete: \"Deleting local variable in strict mode\",\n  StrictEvalArguments: \"Assigning to '%0' in strict mode\",\n  StrictEvalArgumentsBinding: \"Binding '%0' in strict mode\",\n  StrictFunction: \"In strict mode code, functions can only be declared at top level or inside a block\",\n  StrictNumericEscape: \"The only valid numeric escape in strict mode is '\\\\0'\",\n  StrictOctalLiteral: \"Legacy octal literals are not allowed in strict mode\",\n  StrictWith: \"'with' in strict mode\",\n  SuperNotAllowed: \"super() is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n  SuperPrivateField: \"Private fields can't be accessed on super\",\n  TrailingDecorator: \"Decorators must be attached to a class element\",\n  TupleExpressionBarIncorrectEndSyntaxType: \"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'\",\n  TupleExpressionBarIncorrectStartSyntaxType: \"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'\",\n  TupleExpressionHashIncorrectStartSyntaxType: \"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'\",\n  UnexpectedArgumentPlaceholder: \"Unexpected argument placeholder\",\n  UnexpectedAwaitAfterPipelineBody: 'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal',\n  UnexpectedDigitAfterHash: \"Unexpected digit after hash token\",\n  UnexpectedImportExport: \"'import' and 'export' may only appear at the top level\",\n  UnexpectedKeyword: \"Unexpected keyword '%0'\",\n  UnexpectedLeadingDecorator: \"Leading decorators must be attached to a class declaration\",\n  UnexpectedLexicalDeclaration: \"Lexical declaration cannot appear in a single-statement context\",\n  UnexpectedNewTarget: \"new.target can only be used in functions\",\n  UnexpectedNumericSeparator: \"A numeric separator is only allowed between two digits\",\n  UnexpectedPrivateField: \"Private names can only be used as the name of a class element (i.e. class C { #p = 42; #m() {} } )\\n or a property of member expression (i.e. this.#p).\",\n  UnexpectedReservedWord: \"Unexpected reserved word '%0'\",\n  UnexpectedSuper: \"super is only allowed in object methods and classes\",\n  UnexpectedToken: \"Unexpected token '%0'\",\n  UnexpectedTokenUnaryExponentiation: \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n  UnsupportedBind: \"Binding should be performed on object property.\",\n  UnsupportedDecoratorExport: \"A decorated export must export a class declaration\",\n  UnsupportedDefaultExport: \"Only expressions, functions or classes are allowed as the `default` export.\",\n  UnsupportedImport: \"import can only be used in import() or import.meta\",\n  UnsupportedMetaProperty: \"The only valid meta property for %0 is %0.%1\",\n  UnsupportedParameterDecorator: \"Decorators cannot be used to decorate parameters\",\n  UnsupportedPropertyDecorator: \"Decorators cannot be used to decorate object literal properties\",\n  UnsupportedSuper: \"super can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop])\",\n  UnterminatedComment: \"Unterminated comment\",\n  UnterminatedRegExp: \"Unterminated regular expression\",\n  UnterminatedString: \"Unterminated string constant\",\n  UnterminatedTemplate: \"Unterminated template\",\n  VarRedeclaration: \"Identifier '%0' has already been declared\",\n  YieldBindingIdentifier: \"Can not use 'yield' as identifier inside a generator\",\n  YieldInParameter: \"yield is not allowed in generator parameters\",\n  ZeroDigitNumericSeparator: \"Numeric separator can not be used after leading 0\"\n});\n\nclass ParserError extends CommentsParser {\n  getLocationForPosition(pos) {\n    let loc;\n    if (pos === this.state.start) loc = this.state.startLoc;else if (pos === this.state.lastTokStart) loc = this.state.lastTokStartLoc;else if (pos === this.state.end) loc = this.state.endLoc;else if (pos === this.state.lastTokEnd) loc = this.state.lastTokEndLoc;else loc = getLineInfo(this.input, pos);\n    return loc;\n  }\n\n  raise(pos, errorTemplate, ...params) {\n    return this.raiseWithData(pos, undefined, errorTemplate, ...params);\n  }\n\n  raiseWithData(pos, data, errorTemplate, ...params) {\n    const loc = this.getLocationForPosition(pos);\n    const message = errorTemplate.replace(/%(\\d+)/g, (_, i) => params[i]) + ` (${loc.line}:${loc.column})`;\n    return this._raise(Object.assign({\n      loc,\n      pos\n    }, data), message);\n  }\n\n  _raise(errorContext, message) {\n    const err = new SyntaxError(message);\n    Object.assign(err, errorContext);\n\n    if (this.options.errorRecovery) {\n      if (!this.isLookahead) this.state.errors.push(err);\n      return err;\n    } else {\n      throw err;\n    }\n  }\n\n}\n\nfunction isSimpleProperty(node) {\n  return node != null && node.type === \"Property\" && node.kind === \"init\" && node.method === false;\n}\n\nvar estree = (superClass => class extends superClass {\n  estreeParseRegExpLiteral({\n    pattern,\n    flags\n  }) {\n    let regex = null;\n\n    try {\n      regex = new RegExp(pattern, flags);\n    } catch (e) {}\n\n    const node = this.estreeParseLiteral(regex);\n    node.regex = {\n      pattern,\n      flags\n    };\n    return node;\n  }\n\n  estreeParseBigIntLiteral(value) {\n    const bigInt = typeof BigInt !== \"undefined\" ? BigInt(value) : null;\n    const node = this.estreeParseLiteral(bigInt);\n    node.bigint = String(node.value || value);\n    return node;\n  }\n\n  estreeParseDecimalLiteral(value) {\n    const decimal = null;\n    const node = this.estreeParseLiteral(decimal);\n    node.decimal = String(node.value || value);\n    return node;\n  }\n\n  estreeParseLiteral(value) {\n    return this.parseLiteral(value, \"Literal\");\n  }\n\n  directiveToStmt(directive) {\n    const directiveLiteral = directive.value;\n    const stmt = this.startNodeAt(directive.start, directive.loc.start);\n    const expression = this.startNodeAt(directiveLiteral.start, directiveLiteral.loc.start);\n    expression.value = directiveLiteral.value;\n    expression.raw = directiveLiteral.extra.raw;\n    stmt.expression = this.finishNodeAt(expression, \"Literal\", directiveLiteral.end, directiveLiteral.loc.end);\n    stmt.directive = directiveLiteral.extra.raw.slice(1, -1);\n    return this.finishNodeAt(stmt, \"ExpressionStatement\", directive.end, directive.loc.end);\n  }\n\n  initFunction(node, isAsync) {\n    super.initFunction(node, isAsync);\n    node.expression = false;\n  }\n\n  checkDeclaration(node) {\n    if (isSimpleProperty(node)) {\n      this.checkDeclaration(node.value);\n    } else {\n      super.checkDeclaration(node);\n    }\n  }\n\n  checkGetterSetterParams(method) {\n    const prop = method;\n    const paramCount = prop.kind === \"get\" ? 0 : 1;\n    const start = prop.start;\n\n    if (prop.value.params.length !== paramCount) {\n      if (method.kind === \"get\") {\n        this.raise(start, ErrorMessages.BadGetterArity);\n      } else {\n        this.raise(start, ErrorMessages.BadSetterArity);\n      }\n    } else if (prop.kind === \"set\" && prop.value.params[0].type === \"RestElement\") {\n      this.raise(start, ErrorMessages.BadSetterRestParameter);\n    }\n  }\n\n  checkLVal(expr, bindingType = BIND_NONE, checkClashes, contextDescription, disallowLetBinding) {\n    switch (expr.type) {\n      case \"ObjectPattern\":\n        expr.properties.forEach(prop => {\n          this.checkLVal(prop.type === \"Property\" ? prop.value : prop, bindingType, checkClashes, \"object destructuring pattern\", disallowLetBinding);\n        });\n        break;\n\n      default:\n        super.checkLVal(expr, bindingType, checkClashes, contextDescription, disallowLetBinding);\n    }\n  }\n\n  checkProto(prop, isRecord, protoRef, refExpressionErrors) {\n    if (prop.method) {\n      return;\n    }\n\n    super.checkProto(prop, isRecord, protoRef, refExpressionErrors);\n  }\n\n  isValidDirective(stmt) {\n    var _stmt$expression$extr;\n\n    return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"Literal\" && typeof stmt.expression.value === \"string\" && !((_stmt$expression$extr = stmt.expression.extra) == null ? void 0 : _stmt$expression$extr.parenthesized);\n  }\n\n  stmtToDirective(stmt) {\n    const directive = super.stmtToDirective(stmt);\n    const value = stmt.expression.value;\n    directive.value.value = value;\n    return directive;\n  }\n\n  parseBlockBody(node, allowDirectives, topLevel, end) {\n    super.parseBlockBody(node, allowDirectives, topLevel, end);\n    const directiveStatements = node.directives.map(d => this.directiveToStmt(d));\n    node.body = directiveStatements.concat(node.body);\n    delete node.directives;\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true);\n\n    if (method.typeParameters) {\n      method.value.typeParameters = method.typeParameters;\n      delete method.typeParameters;\n    }\n\n    classBody.body.push(method);\n  }\n\n  parseExprAtom(refExpressionErrors) {\n    switch (this.state.type) {\n      case types.num:\n      case types.string:\n        return this.estreeParseLiteral(this.state.value);\n\n      case types.regexp:\n        return this.estreeParseRegExpLiteral(this.state.value);\n\n      case types.bigint:\n        return this.estreeParseBigIntLiteral(this.state.value);\n\n      case types.decimal:\n        return this.estreeParseDecimalLiteral(this.state.value);\n\n      case types._null:\n        return this.estreeParseLiteral(null);\n\n      case types._true:\n        return this.estreeParseLiteral(true);\n\n      case types._false:\n        return this.estreeParseLiteral(false);\n\n      default:\n        return super.parseExprAtom(refExpressionErrors);\n    }\n  }\n\n  parseLiteral(value, type, startPos, startLoc) {\n    const node = super.parseLiteral(value, type, startPos, startLoc);\n    node.raw = node.extra.raw;\n    delete node.extra;\n    return node;\n  }\n\n  parseFunctionBody(node, allowExpression, isMethod = false) {\n    super.parseFunctionBody(node, allowExpression, isMethod);\n    node.expression = node.body.type !== \"BlockStatement\";\n  }\n\n  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {\n    let funcNode = this.startNode();\n    funcNode.kind = node.kind;\n    funcNode = super.parseMethod(funcNode, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope);\n    funcNode.type = \"FunctionExpression\";\n    delete funcNode.kind;\n    node.value = funcNode;\n    type = type === \"ClassMethod\" ? \"MethodDefinition\" : type;\n    return this.finishNode(node, type);\n  }\n\n  parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {\n    const node = super.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor);\n\n    if (node) {\n      node.type = \"Property\";\n      if (node.kind === \"method\") node.kind = \"init\";\n      node.shorthand = false;\n    }\n\n    return node;\n  }\n\n  parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {\n    const node = super.parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors);\n\n    if (node) {\n      node.kind = \"init\";\n      node.type = \"Property\";\n    }\n\n    return node;\n  }\n\n  toAssignable(node) {\n    if (isSimpleProperty(node)) {\n      this.toAssignable(node.value);\n      return node;\n    }\n\n    return super.toAssignable(node);\n  }\n\n  toAssignableObjectExpressionProp(prop, isLast) {\n    if (prop.kind === \"get\" || prop.kind === \"set\") {\n      throw this.raise(prop.key.start, ErrorMessages.PatternHasAccessor);\n    } else if (prop.method) {\n      throw this.raise(prop.key.start, ErrorMessages.PatternHasMethod);\n    } else {\n      super.toAssignableObjectExpressionProp(prop, isLast);\n    }\n  }\n\n  finishCallExpression(node, optional) {\n    super.finishCallExpression(node, optional);\n\n    if (node.callee.type === \"Import\") {\n      node.type = \"ImportExpression\";\n      node.source = node.arguments[0];\n      delete node.arguments;\n      delete node.callee;\n    }\n\n    return node;\n  }\n\n  toReferencedListDeep(exprList, isParenthesizedExpr) {\n    if (!exprList) {\n      return;\n    }\n\n    super.toReferencedListDeep(exprList, isParenthesizedExpr);\n  }\n\n  parseExport(node) {\n    super.parseExport(node);\n\n    switch (node.type) {\n      case \"ExportAllDeclaration\":\n        node.exported = null;\n        break;\n\n      case \"ExportNamedDeclaration\":\n        if (node.specifiers.length === 1 && node.specifiers[0].type === \"ExportNamespaceSpecifier\") {\n          node.type = \"ExportAllDeclaration\";\n          node.exported = node.specifiers[0].exported;\n          delete node.specifiers;\n        }\n\n        break;\n    }\n\n    return node;\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    const node = super.parseSubscript(base, startPos, startLoc, noCalls, state);\n\n    if (state.optionalChainMember) {\n      if (node.type === \"OptionalMemberExpression\" || node.type === \"OptionalCallExpression\") {\n        node.type = node.type.substring(8);\n      }\n\n      if (state.stop) {\n        const chain = this.startNodeAtNode(node);\n        chain.expression = node;\n        return this.finishNode(chain, \"ChainExpression\");\n      }\n    } else if (node.type === \"MemberExpression\" || node.type === \"CallExpression\") {\n      node.optional = false;\n    }\n\n    return node;\n  }\n\n});\n\nclass TokContext {\n  constructor(token, isExpr, preserveSpace, override) {\n    this.token = token;\n    this.isExpr = !!isExpr;\n    this.preserveSpace = !!preserveSpace;\n    this.override = override;\n  }\n\n}\nconst types$1 = {\n  braceStatement: new TokContext(\"{\", false),\n  braceExpression: new TokContext(\"{\", true),\n  recordExpression: new TokContext(\"#{\", true),\n  templateQuasi: new TokContext(\"${\", false),\n  parenStatement: new TokContext(\"(\", false),\n  parenExpression: new TokContext(\"(\", true),\n  template: new TokContext(\"`\", true, true, p => p.readTmplToken()),\n  functionExpression: new TokContext(\"function\", true),\n  functionStatement: new TokContext(\"function\", false)\n};\n\ntypes.parenR.updateContext = types.braceR.updateContext = function () {\n  if (this.state.context.length === 1) {\n    this.state.exprAllowed = true;\n    return;\n  }\n\n  let out = this.state.context.pop();\n\n  if (out === types$1.braceStatement && this.curContext().token === \"function\") {\n    out = this.state.context.pop();\n  }\n\n  this.state.exprAllowed = !out.isExpr;\n};\n\ntypes.name.updateContext = function (prevType) {\n  let allowed = false;\n\n  if (prevType !== types.dot) {\n    if (this.state.value === \"of\" && !this.state.exprAllowed && prevType !== types._function && prevType !== types._class || this.state.value === \"yield\" && this.prodParam.hasYield) {\n      allowed = true;\n    }\n  }\n\n  this.state.exprAllowed = allowed;\n\n  if (this.state.isIterator) {\n    this.state.isIterator = false;\n  }\n};\n\ntypes.braceL.updateContext = function (prevType) {\n  this.state.context.push(this.braceIsBlock(prevType) ? types$1.braceStatement : types$1.braceExpression);\n  this.state.exprAllowed = true;\n};\n\ntypes.dollarBraceL.updateContext = function () {\n  this.state.context.push(types$1.templateQuasi);\n  this.state.exprAllowed = true;\n};\n\ntypes.parenL.updateContext = function (prevType) {\n  const statementParens = prevType === types._if || prevType === types._for || prevType === types._with || prevType === types._while;\n  this.state.context.push(statementParens ? types$1.parenStatement : types$1.parenExpression);\n  this.state.exprAllowed = true;\n};\n\ntypes.incDec.updateContext = function () {};\n\ntypes._function.updateContext = types._class.updateContext = function (prevType) {\n  if (prevType.beforeExpr && prevType !== types.semi && prevType !== types._else && !(prevType === types._return && this.hasPrecedingLineBreak()) && !((prevType === types.colon || prevType === types.braceL) && this.curContext() === types$1.b_stat)) {\n    this.state.context.push(types$1.functionExpression);\n  } else {\n    this.state.context.push(types$1.functionStatement);\n  }\n\n  this.state.exprAllowed = false;\n};\n\ntypes.backQuote.updateContext = function () {\n  if (this.curContext() === types$1.template) {\n    this.state.context.pop();\n  } else {\n    this.state.context.push(types$1.template);\n  }\n\n  this.state.exprAllowed = false;\n};\n\ntypes.braceHashL.updateContext = function () {\n  this.state.context.push(types$1.recordExpression);\n  this.state.exprAllowed = true;\n};\n\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u08a0-\\u08b4\\u08b6-\\u08c7\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\u9ffc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7bf\\ua7c2-\\ua7ca\\ua7f5-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\nlet nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u08d3-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf\\u1ac0\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1df9\\u1dfb-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\nconst nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\nconst nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\nconst astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 157, 310, 10, 21, 11, 7, 153, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 107, 20, 28, 22, 13, 52, 76, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 230, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 35, 56, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 190, 0, 80, 921, 103, 110, 18, 195, 2749, 1070, 4050, 582, 8634, 568, 8, 30, 114, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8952, 286, 50, 2, 18, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 2357, 44, 11, 6, 17, 0, 370, 43, 1301, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42717, 35, 4148, 12, 221, 3, 5761, 15, 7472, 3104, 541, 1507, 4938];\nconst astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 154, 10, 176, 2, 54, 14, 32, 9, 16, 3, 46, 10, 54, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 19306, 9, 135, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 5319, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 262, 6, 10, 9, 419, 13, 1495, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];\n\nfunction isInAstralSet(code, set) {\n  let pos = 0x10000;\n\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n\n  return false;\n}\n\nfunction isIdentifierStart(code) {\n  if (code < 65) return code === 36;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));\n  }\n\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\nfunction isIdentifierChar(code) {\n  if (code < 48) return code === 36;\n  if (code < 58) return true;\n  if (code < 65) return false;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n\n  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);\n}\n\nconst reservedWords = {\n  keyword: [\"break\", \"case\", \"catch\", \"continue\", \"debugger\", \"default\", \"do\", \"else\", \"finally\", \"for\", \"function\", \"if\", \"return\", \"switch\", \"throw\", \"try\", \"var\", \"const\", \"while\", \"with\", \"new\", \"this\", \"super\", \"class\", \"extends\", \"export\", \"import\", \"null\", \"true\", \"false\", \"in\", \"instanceof\", \"typeof\", \"void\", \"delete\"],\n  strict: [\"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\", \"public\", \"static\", \"yield\"],\n  strictBind: [\"eval\", \"arguments\"]\n};\nconst keywords$1 = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\nfunction isReservedWord(word, inModule) {\n  return inModule && word === \"await\" || word === \"enum\";\n}\nfunction isStrictReservedWord(word, inModule) {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\nfunction isStrictBindOnlyReservedWord(word) {\n  return reservedWordsStrictBindSet.has(word);\n}\nfunction isStrictBindReservedWord(word, inModule) {\n  return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);\n}\nfunction isKeyword(word) {\n  return keywords$1.has(word);\n}\n\nconst keywordRelationalOperator = /^in(stanceof)?$/;\nfunction isIteratorStart(current, next) {\n  return current === 64 && next === 64;\n}\n\nconst reservedTypes = new Set([\"_\", \"any\", \"bool\", \"boolean\", \"empty\", \"extends\", \"false\", \"interface\", \"mixed\", \"null\", \"number\", \"static\", \"string\", \"true\", \"typeof\", \"void\"]);\nconst FlowErrors = Object.freeze({\n  AmbiguousConditionalArrow: \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n  AmbiguousDeclareModuleKind: \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module\",\n  AssignReservedType: \"Cannot overwrite reserved type %0\",\n  DeclareClassElement: \"The `declare` modifier can only appear on class fields.\",\n  DeclareClassFieldInitializer: \"Initializers are not allowed in fields with the `declare` modifier.\",\n  DuplicateDeclareModuleExports: \"Duplicate `declare module.exports` statement\",\n  EnumBooleanMemberNotInitialized: \"Boolean enum members need to be initialized. Use either `%0 = true,` or `%0 = false,` in enum `%1`.\",\n  EnumDuplicateMemberName: \"Enum member names need to be unique, but the name `%0` has already been used before in enum `%1`.\",\n  EnumInconsistentMemberValues: \"Enum `%0` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.\",\n  EnumInvalidExplicitType: \"Enum type `%1` is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n  EnumInvalidExplicitTypeUnknownSupplied: \"Supplied enum type is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n  EnumInvalidMemberInitializerPrimaryType: \"Enum `%0` has type `%2`, so the initializer of `%1` needs to be a %2 literal.\",\n  EnumInvalidMemberInitializerSymbolType: \"Symbol enum members cannot be initialized. Use `%1,` in enum `%0`.\",\n  EnumInvalidMemberInitializerUnknownType: \"The enum member initializer for `%1` needs to be a literal (either a boolean, number, or string) in enum `%0`.\",\n  EnumInvalidMemberName: \"Enum member names cannot start with lowercase 'a' through 'z'. Instead of using `%0`, consider using `%1`, in enum `%2`.\",\n  EnumNumberMemberNotInitialized: \"Number enum members need to be initialized, e.g. `%1 = 1` in enum `%0`.\",\n  EnumStringMemberInconsistentlyInitailized: \"String enum members need to consistently either all use initializers, or use no initializers, in enum `%0`.\",\n  ImportTypeShorthandOnlyInPureImport: \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements\",\n  InexactInsideExact: \"Explicit inexact syntax cannot appear inside an explicit exact object type\",\n  InexactInsideNonObject: \"Explicit inexact syntax cannot appear in class or interface definitions\",\n  InexactVariance: \"Explicit inexact syntax cannot have variance\",\n  InvalidNonTypeImportInDeclareModule: \"Imports within a `declare module` body must always be `import type` or `import typeof`\",\n  MissingTypeParamDefault: \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n  NestedDeclareModule: \"`declare module` cannot be used inside another `declare module`\",\n  NestedFlowComment: \"Cannot have a flow comment inside another flow comment\",\n  OptionalBindingPattern: \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  SpreadVariance: \"Spread properties cannot have variance\",\n  TypeBeforeInitializer: \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`\",\n  TypeCastInPattern: \"The type cast expression is expected to be wrapped with parenthesis\",\n  UnexpectedExplicitInexactInObject: \"Explicit inexact syntax must appear at the end of an inexact object\",\n  UnexpectedReservedType: \"Unexpected reserved type %0\",\n  UnexpectedReservedUnderscore: \"`_` is only allowed as a type argument to call or new\",\n  UnexpectedSpaceBetweenModuloChecks: \"Spaces between `%` and `checks` are not allowed here.\",\n  UnexpectedSpreadType: \"Spread operator cannot appear in class or interface definitions\",\n  UnexpectedSubtractionOperand: 'Unexpected token, expected \"number\" or \"bigint\"',\n  UnexpectedTokenAfterTypeParameter: \"Expected an arrow function after this type parameter declaration\",\n  UnexpectedTypeParameterBeforeAsyncArrowFunction: \"Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`\",\n  UnsupportedDeclareExportKind: \"`declare export %0` is not supported. Use `%1` instead\",\n  UnsupportedStatementInDeclareModule: \"Only declares and type imports are allowed inside declare module\",\n  UnterminatedFlowComment: \"Unterminated flow-comment\"\n});\n\nfunction isEsModuleType(bodyElement) {\n  return bodyElement.type === \"DeclareExportAllDeclaration\" || bodyElement.type === \"DeclareExportDeclaration\" && (!bodyElement.declaration || bodyElement.declaration.type !== \"TypeAlias\" && bodyElement.declaration.type !== \"InterfaceDeclaration\");\n}\n\nfunction hasTypeImportKind(node) {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nfunction isMaybeDefaultImport(state) {\n  return (state.type === types.name || !!state.type.keyword) && state.value !== \"from\";\n}\n\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\"\n};\n\nfunction partition(list, test) {\n  const list1 = [];\n  const list2 = [];\n\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n\n  return [list1, list2];\n}\n\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\nvar flow = (superClass => class extends superClass {\n  constructor(options, input) {\n    super(options, input);\n    this.flowPragma = undefined;\n  }\n\n  shouldParseTypes() {\n    return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n  }\n\n  shouldParseEnums() {\n    return !!this.getPluginOption(\"flow\", \"enums\");\n  }\n\n  finishToken(type, val) {\n    if (type !== types.string && type !== types.semi && type !== types.interpreterDirective) {\n      if (this.flowPragma === undefined) {\n        this.flowPragma = null;\n      }\n    }\n\n    return super.finishToken(type, val);\n  }\n\n  addComment(comment) {\n    if (this.flowPragma === undefined) {\n      const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n\n      if (!matches) ; else if (matches[1] === \"flow\") {\n        this.flowPragma = \"flow\";\n      } else if (matches[1] === \"noflow\") {\n        this.flowPragma = \"noflow\";\n      } else {\n        throw new Error(\"Unexpected flow pragma\");\n      }\n    }\n\n    return super.addComment(comment);\n  }\n\n  flowParseTypeInitialiser(tok) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    this.expect(tok || types.colon);\n    const type = this.flowParseType();\n    this.state.inType = oldInType;\n    return type;\n  }\n\n  flowParsePredicate() {\n    const node = this.startNode();\n    const moduloLoc = this.state.startLoc;\n    const moduloPos = this.state.start;\n    this.expect(types.modulo);\n    const checksLoc = this.state.startLoc;\n    this.expectContextual(\"checks\");\n\n    if (moduloLoc.line !== checksLoc.line || moduloLoc.column !== checksLoc.column - 1) {\n      this.raise(moduloPos, FlowErrors.UnexpectedSpaceBetweenModuloChecks);\n    }\n\n    if (this.eat(types.parenL)) {\n      node.value = this.parseExpression();\n      this.expect(types.parenR);\n      return this.finishNode(node, \"DeclaredPredicate\");\n    } else {\n      return this.finishNode(node, \"InferredPredicate\");\n    }\n  }\n\n  flowParseTypeAndPredicateInitialiser() {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    this.expect(types.colon);\n    let type = null;\n    let predicate = null;\n\n    if (this.match(types.modulo)) {\n      this.state.inType = oldInType;\n      predicate = this.flowParsePredicate();\n    } else {\n      type = this.flowParseType();\n      this.state.inType = oldInType;\n\n      if (this.match(types.modulo)) {\n        predicate = this.flowParsePredicate();\n      }\n    }\n\n    return [type, predicate];\n  }\n\n  flowParseDeclareClass(node) {\n    this.next();\n    this.flowParseInterfaceish(node, true);\n    return this.finishNode(node, \"DeclareClass\");\n  }\n\n  flowParseDeclareFunction(node) {\n    this.next();\n    const id = node.id = this.parseIdentifier();\n    const typeNode = this.startNode();\n    const typeContainer = this.startNode();\n\n    if (this.isRelational(\"<\")) {\n      typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      typeNode.typeParameters = null;\n    }\n\n    this.expect(types.parenL);\n    const tmp = this.flowParseFunctionTypeParams();\n    typeNode.params = tmp.params;\n    typeNode.rest = tmp.rest;\n    this.expect(types.parenR);\n    [typeNode.returnType, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n    typeContainer.typeAnnotation = this.finishNode(typeNode, \"FunctionTypeAnnotation\");\n    id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n    this.resetEndLocation(id);\n    this.semicolon();\n    return this.finishNode(node, \"DeclareFunction\");\n  }\n\n  flowParseDeclare(node, insideModule) {\n    if (this.match(types._class)) {\n      return this.flowParseDeclareClass(node);\n    } else if (this.match(types._function)) {\n      return this.flowParseDeclareFunction(node);\n    } else if (this.match(types._var)) {\n      return this.flowParseDeclareVariable(node);\n    } else if (this.eatContextual(\"module\")) {\n      if (this.match(types.dot)) {\n        return this.flowParseDeclareModuleExports(node);\n      } else {\n        if (insideModule) {\n          this.raise(this.state.lastTokStart, FlowErrors.NestedDeclareModule);\n        }\n\n        return this.flowParseDeclareModule(node);\n      }\n    } else if (this.isContextual(\"type\")) {\n      return this.flowParseDeclareTypeAlias(node);\n    } else if (this.isContextual(\"opaque\")) {\n      return this.flowParseDeclareOpaqueType(node);\n    } else if (this.isContextual(\"interface\")) {\n      return this.flowParseDeclareInterface(node);\n    } else if (this.match(types._export)) {\n      return this.flowParseDeclareExportDeclaration(node, insideModule);\n    } else {\n      throw this.unexpected();\n    }\n  }\n\n  flowParseDeclareVariable(node) {\n    this.next();\n    node.id = this.flowParseTypeAnnotatableIdentifier(true);\n    this.scope.declareName(node.id.name, BIND_VAR, node.id.start);\n    this.semicolon();\n    return this.finishNode(node, \"DeclareVariable\");\n  }\n\n  flowParseDeclareModule(node) {\n    this.scope.enter(SCOPE_OTHER);\n\n    if (this.match(types.string)) {\n      node.id = this.parseExprAtom();\n    } else {\n      node.id = this.parseIdentifier();\n    }\n\n    const bodyNode = node.body = this.startNode();\n    const body = bodyNode.body = [];\n    this.expect(types.braceL);\n\n    while (!this.match(types.braceR)) {\n      let bodyNode = this.startNode();\n\n      if (this.match(types._import)) {\n        this.next();\n\n        if (!this.isContextual(\"type\") && !this.match(types._typeof)) {\n          this.raise(this.state.lastTokStart, FlowErrors.InvalidNonTypeImportInDeclareModule);\n        }\n\n        this.parseImport(bodyNode);\n      } else {\n        this.expectContextual(\"declare\", FlowErrors.UnsupportedStatementInDeclareModule);\n        bodyNode = this.flowParseDeclare(bodyNode, true);\n      }\n\n      body.push(bodyNode);\n    }\n\n    this.scope.exit();\n    this.expect(types.braceR);\n    this.finishNode(bodyNode, \"BlockStatement\");\n    let kind = null;\n    let hasModuleExport = false;\n    body.forEach(bodyElement => {\n      if (isEsModuleType(bodyElement)) {\n        if (kind === \"CommonJS\") {\n          this.raise(bodyElement.start, FlowErrors.AmbiguousDeclareModuleKind);\n        }\n\n        kind = \"ES\";\n      } else if (bodyElement.type === \"DeclareModuleExports\") {\n        if (hasModuleExport) {\n          this.raise(bodyElement.start, FlowErrors.DuplicateDeclareModuleExports);\n        }\n\n        if (kind === \"ES\") {\n          this.raise(bodyElement.start, FlowErrors.AmbiguousDeclareModuleKind);\n        }\n\n        kind = \"CommonJS\";\n        hasModuleExport = true;\n      }\n    });\n    node.kind = kind || \"CommonJS\";\n    return this.finishNode(node, \"DeclareModule\");\n  }\n\n  flowParseDeclareExportDeclaration(node, insideModule) {\n    this.expect(types._export);\n\n    if (this.eat(types._default)) {\n      if (this.match(types._function) || this.match(types._class)) {\n        node.declaration = this.flowParseDeclare(this.startNode());\n      } else {\n        node.declaration = this.flowParseType();\n        this.semicolon();\n      }\n\n      node.default = true;\n      return this.finishNode(node, \"DeclareExportDeclaration\");\n    } else {\n      if (this.match(types._const) || this.isLet() || (this.isContextual(\"type\") || this.isContextual(\"interface\")) && !insideModule) {\n        const label = this.state.value;\n        const suggestion = exportSuggestions[label];\n        throw this.raise(this.state.start, FlowErrors.UnsupportedDeclareExportKind, label, suggestion);\n      }\n\n      if (this.match(types._var) || this.match(types._function) || this.match(types._class) || this.isContextual(\"opaque\")) {\n          node.declaration = this.flowParseDeclare(this.startNode());\n          node.default = false;\n          return this.finishNode(node, \"DeclareExportDeclaration\");\n        } else if (this.match(types.star) || this.match(types.braceL) || this.isContextual(\"interface\") || this.isContextual(\"type\") || this.isContextual(\"opaque\")) {\n          node = this.parseExport(node);\n\n          if (node.type === \"ExportNamedDeclaration\") {\n            node.type = \"ExportDeclaration\";\n            node.default = false;\n            delete node.exportKind;\n          }\n\n          node.type = \"Declare\" + node.type;\n          return node;\n        }\n    }\n\n    throw this.unexpected();\n  }\n\n  flowParseDeclareModuleExports(node) {\n    this.next();\n    this.expectContextual(\"exports\");\n    node.typeAnnotation = this.flowParseTypeAnnotation();\n    this.semicolon();\n    return this.finishNode(node, \"DeclareModuleExports\");\n  }\n\n  flowParseDeclareTypeAlias(node) {\n    this.next();\n    this.flowParseTypeAlias(node);\n    node.type = \"DeclareTypeAlias\";\n    return node;\n  }\n\n  flowParseDeclareOpaqueType(node) {\n    this.next();\n    this.flowParseOpaqueType(node, true);\n    node.type = \"DeclareOpaqueType\";\n    return node;\n  }\n\n  flowParseDeclareInterface(node) {\n    this.next();\n    this.flowParseInterfaceish(node);\n    return this.finishNode(node, \"DeclareInterface\");\n  }\n\n  flowParseInterfaceish(node, isClass = false) {\n    node.id = this.flowParseRestrictedIdentifier(!isClass, true);\n    this.scope.declareName(node.id.name, isClass ? BIND_FUNCTION : BIND_LEXICAL, node.id.start);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n\n    node.extends = [];\n    node.implements = [];\n    node.mixins = [];\n\n    if (this.eat(types._extends)) {\n      do {\n        node.extends.push(this.flowParseInterfaceExtends());\n      } while (!isClass && this.eat(types.comma));\n    }\n\n    if (this.isContextual(\"mixins\")) {\n      this.next();\n\n      do {\n        node.mixins.push(this.flowParseInterfaceExtends());\n      } while (this.eat(types.comma));\n    }\n\n    if (this.isContextual(\"implements\")) {\n      this.next();\n\n      do {\n        node.implements.push(this.flowParseInterfaceExtends());\n      } while (this.eat(types.comma));\n    }\n\n    node.body = this.flowParseObjectType({\n      allowStatic: isClass,\n      allowExact: false,\n      allowSpread: false,\n      allowProto: isClass,\n      allowInexact: false\n    });\n  }\n\n  flowParseInterfaceExtends() {\n    const node = this.startNode();\n    node.id = this.flowParseQualifiedTypeIdentifier();\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterInstantiation();\n    } else {\n      node.typeParameters = null;\n    }\n\n    return this.finishNode(node, \"InterfaceExtends\");\n  }\n\n  flowParseInterface(node) {\n    this.flowParseInterfaceish(node);\n    return this.finishNode(node, \"InterfaceDeclaration\");\n  }\n\n  checkNotUnderscore(word) {\n    if (word === \"_\") {\n      this.raise(this.state.start, FlowErrors.UnexpectedReservedUnderscore);\n    }\n  }\n\n  checkReservedType(word, startLoc, declaration) {\n    if (!reservedTypes.has(word)) return;\n    this.raise(startLoc, declaration ? FlowErrors.AssignReservedType : FlowErrors.UnexpectedReservedType, word);\n  }\n\n  flowParseRestrictedIdentifier(liberal, declaration) {\n    this.checkReservedType(this.state.value, this.state.start, declaration);\n    return this.parseIdentifier(liberal);\n  }\n\n  flowParseTypeAlias(node) {\n    node.id = this.flowParseRestrictedIdentifier(false, true);\n    this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n\n    node.right = this.flowParseTypeInitialiser(types.eq);\n    this.semicolon();\n    return this.finishNode(node, \"TypeAlias\");\n  }\n\n  flowParseOpaqueType(node, declare) {\n    this.expectContextual(\"type\");\n    node.id = this.flowParseRestrictedIdentifier(true, true);\n    this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n\n    node.supertype = null;\n\n    if (this.match(types.colon)) {\n      node.supertype = this.flowParseTypeInitialiser(types.colon);\n    }\n\n    node.impltype = null;\n\n    if (!declare) {\n      node.impltype = this.flowParseTypeInitialiser(types.eq);\n    }\n\n    this.semicolon();\n    return this.finishNode(node, \"OpaqueType\");\n  }\n\n  flowParseTypeParameter(requireDefault = false) {\n    const nodeStart = this.state.start;\n    const node = this.startNode();\n    const variance = this.flowParseVariance();\n    const ident = this.flowParseTypeAnnotatableIdentifier();\n    node.name = ident.name;\n    node.variance = variance;\n    node.bound = ident.typeAnnotation;\n\n    if (this.match(types.eq)) {\n      this.eat(types.eq);\n      node.default = this.flowParseType();\n    } else {\n      if (requireDefault) {\n        this.raise(nodeStart, FlowErrors.MissingTypeParamDefault);\n      }\n    }\n\n    return this.finishNode(node, \"TypeParameter\");\n  }\n\n  flowParseTypeParameterDeclaration() {\n    const oldInType = this.state.inType;\n    const node = this.startNode();\n    node.params = [];\n    this.state.inType = true;\n\n    if (this.isRelational(\"<\") || this.match(types.jsxTagStart)) {\n      this.next();\n    } else {\n      this.unexpected();\n    }\n\n    let defaultRequired = false;\n\n    do {\n      const typeParameter = this.flowParseTypeParameter(defaultRequired);\n      node.params.push(typeParameter);\n\n      if (typeParameter.default) {\n        defaultRequired = true;\n      }\n\n      if (!this.isRelational(\">\")) {\n        this.expect(types.comma);\n      }\n    } while (!this.isRelational(\">\"));\n\n    this.expectRelational(\">\");\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterDeclaration\");\n  }\n\n  flowParseTypeParameterInstantiation() {\n    const node = this.startNode();\n    const oldInType = this.state.inType;\n    node.params = [];\n    this.state.inType = true;\n    this.expectRelational(\"<\");\n    const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n    this.state.noAnonFunctionType = false;\n\n    while (!this.isRelational(\">\")) {\n      node.params.push(this.flowParseType());\n\n      if (!this.isRelational(\">\")) {\n        this.expect(types.comma);\n      }\n    }\n\n    this.state.noAnonFunctionType = oldNoAnonFunctionType;\n    this.expectRelational(\">\");\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterInstantiation\");\n  }\n\n  flowParseTypeParameterInstantiationCallOrNew() {\n    const node = this.startNode();\n    const oldInType = this.state.inType;\n    node.params = [];\n    this.state.inType = true;\n    this.expectRelational(\"<\");\n\n    while (!this.isRelational(\">\")) {\n      node.params.push(this.flowParseTypeOrImplicitInstantiation());\n\n      if (!this.isRelational(\">\")) {\n        this.expect(types.comma);\n      }\n    }\n\n    this.expectRelational(\">\");\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterInstantiation\");\n  }\n\n  flowParseInterfaceType() {\n    const node = this.startNode();\n    this.expectContextual(\"interface\");\n    node.extends = [];\n\n    if (this.eat(types._extends)) {\n      do {\n        node.extends.push(this.flowParseInterfaceExtends());\n      } while (this.eat(types.comma));\n    }\n\n    node.body = this.flowParseObjectType({\n      allowStatic: false,\n      allowExact: false,\n      allowSpread: false,\n      allowProto: false,\n      allowInexact: false\n    });\n    return this.finishNode(node, \"InterfaceTypeAnnotation\");\n  }\n\n  flowParseObjectPropertyKey() {\n    return this.match(types.num) || this.match(types.string) ? this.parseExprAtom() : this.parseIdentifier(true);\n  }\n\n  flowParseObjectTypeIndexer(node, isStatic, variance) {\n    node.static = isStatic;\n\n    if (this.lookahead().type === types.colon) {\n      node.id = this.flowParseObjectPropertyKey();\n      node.key = this.flowParseTypeInitialiser();\n    } else {\n      node.id = null;\n      node.key = this.flowParseType();\n    }\n\n    this.expect(types.bracketR);\n    node.value = this.flowParseTypeInitialiser();\n    node.variance = variance;\n    return this.finishNode(node, \"ObjectTypeIndexer\");\n  }\n\n  flowParseObjectTypeInternalSlot(node, isStatic) {\n    node.static = isStatic;\n    node.id = this.flowParseObjectPropertyKey();\n    this.expect(types.bracketR);\n    this.expect(types.bracketR);\n\n    if (this.isRelational(\"<\") || this.match(types.parenL)) {\n      node.method = true;\n      node.optional = false;\n      node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));\n    } else {\n      node.method = false;\n\n      if (this.eat(types.question)) {\n        node.optional = true;\n      }\n\n      node.value = this.flowParseTypeInitialiser();\n    }\n\n    return this.finishNode(node, \"ObjectTypeInternalSlot\");\n  }\n\n  flowParseObjectTypeMethodish(node) {\n    node.params = [];\n    node.rest = null;\n    node.typeParameters = null;\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    this.expect(types.parenL);\n\n    while (!this.match(types.parenR) && !this.match(types.ellipsis)) {\n      node.params.push(this.flowParseFunctionTypeParam());\n\n      if (!this.match(types.parenR)) {\n        this.expect(types.comma);\n      }\n    }\n\n    if (this.eat(types.ellipsis)) {\n      node.rest = this.flowParseFunctionTypeParam();\n    }\n\n    this.expect(types.parenR);\n    node.returnType = this.flowParseTypeInitialiser();\n    return this.finishNode(node, \"FunctionTypeAnnotation\");\n  }\n\n  flowParseObjectTypeCallProperty(node, isStatic) {\n    const valueNode = this.startNode();\n    node.static = isStatic;\n    node.value = this.flowParseObjectTypeMethodish(valueNode);\n    return this.finishNode(node, \"ObjectTypeCallProperty\");\n  }\n\n  flowParseObjectType({\n    allowStatic,\n    allowExact,\n    allowSpread,\n    allowProto,\n    allowInexact\n  }) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    const nodeStart = this.startNode();\n    nodeStart.callProperties = [];\n    nodeStart.properties = [];\n    nodeStart.indexers = [];\n    nodeStart.internalSlots = [];\n    let endDelim;\n    let exact;\n    let inexact = false;\n\n    if (allowExact && this.match(types.braceBarL)) {\n      this.expect(types.braceBarL);\n      endDelim = types.braceBarR;\n      exact = true;\n    } else {\n      this.expect(types.braceL);\n      endDelim = types.braceR;\n      exact = false;\n    }\n\n    nodeStart.exact = exact;\n\n    while (!this.match(endDelim)) {\n      let isStatic = false;\n      let protoStart = null;\n      let inexactStart = null;\n      const node = this.startNode();\n\n      if (allowProto && this.isContextual(\"proto\")) {\n        const lookahead = this.lookahead();\n\n        if (lookahead.type !== types.colon && lookahead.type !== types.question) {\n          this.next();\n          protoStart = this.state.start;\n          allowStatic = false;\n        }\n      }\n\n      if (allowStatic && this.isContextual(\"static\")) {\n        const lookahead = this.lookahead();\n\n        if (lookahead.type !== types.colon && lookahead.type !== types.question) {\n          this.next();\n          isStatic = true;\n        }\n      }\n\n      const variance = this.flowParseVariance();\n\n      if (this.eat(types.bracketL)) {\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n\n        if (this.eat(types.bracketL)) {\n          if (variance) {\n            this.unexpected(variance.start);\n          }\n\n          nodeStart.internalSlots.push(this.flowParseObjectTypeInternalSlot(node, isStatic));\n        } else {\n          nodeStart.indexers.push(this.flowParseObjectTypeIndexer(node, isStatic, variance));\n        }\n      } else if (this.match(types.parenL) || this.isRelational(\"<\")) {\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n\n        if (variance) {\n          this.unexpected(variance.start);\n        }\n\n        nodeStart.callProperties.push(this.flowParseObjectTypeCallProperty(node, isStatic));\n      } else {\n        let kind = \"init\";\n\n        if (this.isContextual(\"get\") || this.isContextual(\"set\")) {\n          const lookahead = this.lookahead();\n\n          if (lookahead.type === types.name || lookahead.type === types.string || lookahead.type === types.num) {\n            kind = this.state.value;\n            this.next();\n          }\n        }\n\n        const propOrInexact = this.flowParseObjectTypeProperty(node, isStatic, protoStart, variance, kind, allowSpread, allowInexact != null ? allowInexact : !exact);\n\n        if (propOrInexact === null) {\n          inexact = true;\n          inexactStart = this.state.lastTokStart;\n        } else {\n          nodeStart.properties.push(propOrInexact);\n        }\n      }\n\n      this.flowObjectTypeSemicolon();\n\n      if (inexactStart && !this.match(types.braceR) && !this.match(types.braceBarR)) {\n        this.raise(inexactStart, FlowErrors.UnexpectedExplicitInexactInObject);\n      }\n    }\n\n    this.expect(endDelim);\n\n    if (allowSpread) {\n      nodeStart.inexact = inexact;\n    }\n\n    const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n    this.state.inType = oldInType;\n    return out;\n  }\n\n  flowParseObjectTypeProperty(node, isStatic, protoStart, variance, kind, allowSpread, allowInexact) {\n    if (this.eat(types.ellipsis)) {\n      const isInexactToken = this.match(types.comma) || this.match(types.semi) || this.match(types.braceR) || this.match(types.braceBarR);\n\n      if (isInexactToken) {\n        if (!allowSpread) {\n          this.raise(this.state.lastTokStart, FlowErrors.InexactInsideNonObject);\n        } else if (!allowInexact) {\n          this.raise(this.state.lastTokStart, FlowErrors.InexactInsideExact);\n        }\n\n        if (variance) {\n          this.raise(variance.start, FlowErrors.InexactVariance);\n        }\n\n        return null;\n      }\n\n      if (!allowSpread) {\n        this.raise(this.state.lastTokStart, FlowErrors.UnexpectedSpreadType);\n      }\n\n      if (protoStart != null) {\n        this.unexpected(protoStart);\n      }\n\n      if (variance) {\n        this.raise(variance.start, FlowErrors.SpreadVariance);\n      }\n\n      node.argument = this.flowParseType();\n      return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n    } else {\n      node.key = this.flowParseObjectPropertyKey();\n      node.static = isStatic;\n      node.proto = protoStart != null;\n      node.kind = kind;\n      let optional = false;\n\n      if (this.isRelational(\"<\") || this.match(types.parenL)) {\n        node.method = true;\n\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n\n        if (variance) {\n          this.unexpected(variance.start);\n        }\n\n        node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));\n\n        if (kind === \"get\" || kind === \"set\") {\n          this.flowCheckGetterSetterParams(node);\n        }\n      } else {\n        if (kind !== \"init\") this.unexpected();\n        node.method = false;\n\n        if (this.eat(types.question)) {\n          optional = true;\n        }\n\n        node.value = this.flowParseTypeInitialiser();\n        node.variance = variance;\n      }\n\n      node.optional = optional;\n      return this.finishNode(node, \"ObjectTypeProperty\");\n    }\n  }\n\n  flowCheckGetterSetterParams(property) {\n    const paramCount = property.kind === \"get\" ? 0 : 1;\n    const start = property.start;\n    const length = property.value.params.length + (property.value.rest ? 1 : 0);\n\n    if (length !== paramCount) {\n      if (property.kind === \"get\") {\n        this.raise(start, ErrorMessages.BadGetterArity);\n      } else {\n        this.raise(start, ErrorMessages.BadSetterArity);\n      }\n    }\n\n    if (property.kind === \"set\" && property.value.rest) {\n      this.raise(start, ErrorMessages.BadSetterRestParameter);\n    }\n  }\n\n  flowObjectTypeSemicolon() {\n    if (!this.eat(types.semi) && !this.eat(types.comma) && !this.match(types.braceR) && !this.match(types.braceBarR)) {\n      this.unexpected();\n    }\n  }\n\n  flowParseQualifiedTypeIdentifier(startPos, startLoc, id) {\n    startPos = startPos || this.state.start;\n    startLoc = startLoc || this.state.startLoc;\n    let node = id || this.flowParseRestrictedIdentifier(true);\n\n    while (this.eat(types.dot)) {\n      const node2 = this.startNodeAt(startPos, startLoc);\n      node2.qualification = node;\n      node2.id = this.flowParseRestrictedIdentifier(true);\n      node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n    }\n\n    return node;\n  }\n\n  flowParseGenericType(startPos, startLoc, id) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.typeParameters = null;\n    node.id = this.flowParseQualifiedTypeIdentifier(startPos, startLoc, id);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterInstantiation();\n    }\n\n    return this.finishNode(node, \"GenericTypeAnnotation\");\n  }\n\n  flowParseTypeofType() {\n    const node = this.startNode();\n    this.expect(types._typeof);\n    node.argument = this.flowParsePrimaryType();\n    return this.finishNode(node, \"TypeofTypeAnnotation\");\n  }\n\n  flowParseTupleType() {\n    const node = this.startNode();\n    node.types = [];\n    this.expect(types.bracketL);\n\n    while (this.state.pos < this.length && !this.match(types.bracketR)) {\n      node.types.push(this.flowParseType());\n      if (this.match(types.bracketR)) break;\n      this.expect(types.comma);\n    }\n\n    this.expect(types.bracketR);\n    return this.finishNode(node, \"TupleTypeAnnotation\");\n  }\n\n  flowParseFunctionTypeParam() {\n    let name = null;\n    let optional = false;\n    let typeAnnotation = null;\n    const node = this.startNode();\n    const lh = this.lookahead();\n\n    if (lh.type === types.colon || lh.type === types.question) {\n      name = this.parseIdentifier();\n\n      if (this.eat(types.question)) {\n        optional = true;\n      }\n\n      typeAnnotation = this.flowParseTypeInitialiser();\n    } else {\n      typeAnnotation = this.flowParseType();\n    }\n\n    node.name = name;\n    node.optional = optional;\n    node.typeAnnotation = typeAnnotation;\n    return this.finishNode(node, \"FunctionTypeParam\");\n  }\n\n  reinterpretTypeAsFunctionTypeParam(type) {\n    const node = this.startNodeAt(type.start, type.loc.start);\n    node.name = null;\n    node.optional = false;\n    node.typeAnnotation = type;\n    return this.finishNode(node, \"FunctionTypeParam\");\n  }\n\n  flowParseFunctionTypeParams(params = []) {\n    let rest = null;\n\n    while (!this.match(types.parenR) && !this.match(types.ellipsis)) {\n      params.push(this.flowParseFunctionTypeParam());\n\n      if (!this.match(types.parenR)) {\n        this.expect(types.comma);\n      }\n    }\n\n    if (this.eat(types.ellipsis)) {\n      rest = this.flowParseFunctionTypeParam();\n    }\n\n    return {\n      params,\n      rest\n    };\n  }\n\n  flowIdentToTypeAnnotation(startPos, startLoc, node, id) {\n    switch (id.name) {\n      case \"any\":\n        return this.finishNode(node, \"AnyTypeAnnotation\");\n\n      case \"bool\":\n      case \"boolean\":\n        return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n      case \"mixed\":\n        return this.finishNode(node, \"MixedTypeAnnotation\");\n\n      case \"empty\":\n        return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n      case \"number\":\n        return this.finishNode(node, \"NumberTypeAnnotation\");\n\n      case \"string\":\n        return this.finishNode(node, \"StringTypeAnnotation\");\n\n      case \"symbol\":\n        return this.finishNode(node, \"SymbolTypeAnnotation\");\n\n      default:\n        this.checkNotUnderscore(id.name);\n        return this.flowParseGenericType(startPos, startLoc, id);\n    }\n  }\n\n  flowParsePrimaryType() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const node = this.startNode();\n    let tmp;\n    let type;\n    let isGroupedType = false;\n    const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n    switch (this.state.type) {\n      case types.name:\n        if (this.isContextual(\"interface\")) {\n          return this.flowParseInterfaceType();\n        }\n\n        return this.flowIdentToTypeAnnotation(startPos, startLoc, node, this.parseIdentifier());\n\n      case types.braceL:\n        return this.flowParseObjectType({\n          allowStatic: false,\n          allowExact: false,\n          allowSpread: true,\n          allowProto: false,\n          allowInexact: true\n        });\n\n      case types.braceBarL:\n        return this.flowParseObjectType({\n          allowStatic: false,\n          allowExact: true,\n          allowSpread: true,\n          allowProto: false,\n          allowInexact: false\n        });\n\n      case types.bracketL:\n        this.state.noAnonFunctionType = false;\n        type = this.flowParseTupleType();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n        return type;\n\n      case types.relational:\n        if (this.state.value === \"<\") {\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n          this.expect(types.parenL);\n          tmp = this.flowParseFunctionTypeParams();\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          this.expect(types.parenR);\n          this.expect(types.arrow);\n          node.returnType = this.flowParseType();\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n        }\n\n        break;\n\n      case types.parenL:\n        this.next();\n\n        if (!this.match(types.parenR) && !this.match(types.ellipsis)) {\n          if (this.match(types.name)) {\n            const token = this.lookahead().type;\n            isGroupedType = token !== types.question && token !== types.colon;\n          } else {\n            isGroupedType = true;\n          }\n        }\n\n        if (isGroupedType) {\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n          if (this.state.noAnonFunctionType || !(this.match(types.comma) || this.match(types.parenR) && this.lookahead().type === types.arrow)) {\n            this.expect(types.parenR);\n            return type;\n          } else {\n            this.eat(types.comma);\n          }\n        }\n\n        if (type) {\n          tmp = this.flowParseFunctionTypeParams([this.reinterpretTypeAsFunctionTypeParam(type)]);\n        } else {\n          tmp = this.flowParseFunctionTypeParams();\n        }\n\n        node.params = tmp.params;\n        node.rest = tmp.rest;\n        this.expect(types.parenR);\n        this.expect(types.arrow);\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n      case types.string:\n        return this.parseLiteral(this.state.value, \"StringLiteralTypeAnnotation\");\n\n      case types._true:\n      case types._false:\n        node.value = this.match(types._true);\n        this.next();\n        return this.finishNode(node, \"BooleanLiteralTypeAnnotation\");\n\n      case types.plusMin:\n        if (this.state.value === \"-\") {\n          this.next();\n\n          if (this.match(types.num)) {\n            return this.parseLiteral(-this.state.value, \"NumberLiteralTypeAnnotation\", node.start, node.loc.start);\n          }\n\n          if (this.match(types.bigint)) {\n            return this.parseLiteral(-this.state.value, \"BigIntLiteralTypeAnnotation\", node.start, node.loc.start);\n          }\n\n          throw this.raise(this.state.start, FlowErrors.UnexpectedSubtractionOperand);\n        }\n\n        throw this.unexpected();\n\n      case types.num:\n        return this.parseLiteral(this.state.value, \"NumberLiteralTypeAnnotation\");\n\n      case types.bigint:\n        return this.parseLiteral(this.state.value, \"BigIntLiteralTypeAnnotation\");\n\n      case types._void:\n        this.next();\n        return this.finishNode(node, \"VoidTypeAnnotation\");\n\n      case types._null:\n        this.next();\n        return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n      case types._this:\n        this.next();\n        return this.finishNode(node, \"ThisTypeAnnotation\");\n\n      case types.star:\n        this.next();\n        return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n      default:\n        if (this.state.type.keyword === \"typeof\") {\n          return this.flowParseTypeofType();\n        } else if (this.state.type.keyword) {\n          const label = this.state.type.label;\n          this.next();\n          return super.createIdentifier(node, label);\n        }\n\n    }\n\n    throw this.unexpected();\n  }\n\n  flowParsePostfixType() {\n    const startPos = this.state.start,\n          startLoc = this.state.startLoc;\n    let type = this.flowParsePrimaryType();\n\n    while (this.match(types.bracketL) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.elementType = type;\n      this.expect(types.bracketL);\n      this.expect(types.bracketR);\n      type = this.finishNode(node, \"ArrayTypeAnnotation\");\n    }\n\n    return type;\n  }\n\n  flowParsePrefixType() {\n    const node = this.startNode();\n\n    if (this.eat(types.question)) {\n      node.typeAnnotation = this.flowParsePrefixType();\n      return this.finishNode(node, \"NullableTypeAnnotation\");\n    } else {\n      return this.flowParsePostfixType();\n    }\n  }\n\n  flowParseAnonFunctionWithoutParens() {\n    const param = this.flowParsePrefixType();\n\n    if (!this.state.noAnonFunctionType && this.eat(types.arrow)) {\n      const node = this.startNodeAt(param.start, param.loc.start);\n      node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n      node.rest = null;\n      node.returnType = this.flowParseType();\n      node.typeParameters = null;\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n\n    return param;\n  }\n\n  flowParseIntersectionType() {\n    const node = this.startNode();\n    this.eat(types.bitwiseAND);\n    const type = this.flowParseAnonFunctionWithoutParens();\n    node.types = [type];\n\n    while (this.eat(types.bitwiseAND)) {\n      node.types.push(this.flowParseAnonFunctionWithoutParens());\n    }\n\n    return node.types.length === 1 ? type : this.finishNode(node, \"IntersectionTypeAnnotation\");\n  }\n\n  flowParseUnionType() {\n    const node = this.startNode();\n    this.eat(types.bitwiseOR);\n    const type = this.flowParseIntersectionType();\n    node.types = [type];\n\n    while (this.eat(types.bitwiseOR)) {\n      node.types.push(this.flowParseIntersectionType());\n    }\n\n    return node.types.length === 1 ? type : this.finishNode(node, \"UnionTypeAnnotation\");\n  }\n\n  flowParseType() {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    const type = this.flowParseUnionType();\n    this.state.inType = oldInType;\n    this.state.exprAllowed = this.state.exprAllowed || this.state.noAnonFunctionType;\n    return type;\n  }\n\n  flowParseTypeOrImplicitInstantiation() {\n    if (this.state.type === types.name && this.state.value === \"_\") {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const node = this.parseIdentifier();\n      return this.flowParseGenericType(startPos, startLoc, node);\n    } else {\n      return this.flowParseType();\n    }\n  }\n\n  flowParseTypeAnnotation() {\n    const node = this.startNode();\n    node.typeAnnotation = this.flowParseTypeInitialiser();\n    return this.finishNode(node, \"TypeAnnotation\");\n  }\n\n  flowParseTypeAnnotatableIdentifier(allowPrimitiveOverride) {\n    const ident = allowPrimitiveOverride ? this.parseIdentifier() : this.flowParseRestrictedIdentifier();\n\n    if (this.match(types.colon)) {\n      ident.typeAnnotation = this.flowParseTypeAnnotation();\n      this.resetEndLocation(ident);\n    }\n\n    return ident;\n  }\n\n  typeCastToParameter(node) {\n    node.expression.typeAnnotation = node.typeAnnotation;\n    this.resetEndLocation(node.expression, node.typeAnnotation.end, node.typeAnnotation.loc.end);\n    return node.expression;\n  }\n\n  flowParseVariance() {\n    let variance = null;\n\n    if (this.match(types.plusMin)) {\n      variance = this.startNode();\n\n      if (this.state.value === \"+\") {\n        variance.kind = \"plus\";\n      } else {\n        variance.kind = \"minus\";\n      }\n\n      this.next();\n      this.finishNode(variance, \"Variance\");\n    }\n\n    return variance;\n  }\n\n  parseFunctionBody(node, allowExpressionBody, isMethod = false) {\n    if (allowExpressionBody) {\n      return this.forwardNoArrowParamsConversionAt(node, () => super.parseFunctionBody(node, true, isMethod));\n    }\n\n    return super.parseFunctionBody(node, false, isMethod);\n  }\n\n  parseFunctionBodyAndFinish(node, type, isMethod = false) {\n    if (this.match(types.colon)) {\n      const typeNode = this.startNode();\n      [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n      node.returnType = typeNode.typeAnnotation ? this.finishNode(typeNode, \"TypeAnnotation\") : null;\n    }\n\n    super.parseFunctionBodyAndFinish(node, type, isMethod);\n  }\n\n  parseStatement(context, topLevel) {\n    if (this.state.strict && this.match(types.name) && this.state.value === \"interface\") {\n      const node = this.startNode();\n      this.next();\n      return this.flowParseInterface(node);\n    } else if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n      const node = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(node);\n    } else {\n      const stmt = super.parseStatement(context, topLevel);\n\n      if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n        this.flowPragma = null;\n      }\n\n      return stmt;\n    }\n  }\n\n  parseExpressionStatement(node, expr) {\n    if (expr.type === \"Identifier\") {\n      if (expr.name === \"declare\") {\n        if (this.match(types._class) || this.match(types.name) || this.match(types._function) || this.match(types._var) || this.match(types._export)) {\n          return this.flowParseDeclare(node);\n        }\n      } else if (this.match(types.name)) {\n        if (expr.name === \"interface\") {\n          return this.flowParseInterface(node);\n        } else if (expr.name === \"type\") {\n          return this.flowParseTypeAlias(node);\n        } else if (expr.name === \"opaque\") {\n          return this.flowParseOpaqueType(node, false);\n        }\n      }\n    }\n\n    return super.parseExpressionStatement(node, expr);\n  }\n\n  shouldParseExportDeclaration() {\n    return this.isContextual(\"type\") || this.isContextual(\"interface\") || this.isContextual(\"opaque\") || this.shouldParseEnums() && this.isContextual(\"enum\") || super.shouldParseExportDeclaration();\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.match(types.name) && (this.state.value === \"type\" || this.state.value === \"interface\" || this.state.value === \"opaque\" || this.shouldParseEnums() && this.state.value === \"enum\")) {\n      return false;\n    }\n\n    return super.isExportDefaultSpecifier();\n  }\n\n  parseExportDefaultExpression() {\n    if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n      const node = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(node);\n    }\n\n    return super.parseExportDefaultExpression();\n  }\n\n  parseConditional(expr, startPos, startLoc, refNeedsArrowPos) {\n    if (!this.match(types.question)) return expr;\n\n    if (refNeedsArrowPos) {\n      const result = this.tryParse(() => super.parseConditional(expr, startPos, startLoc));\n\n      if (!result.node) {\n        refNeedsArrowPos.start = result.error.pos || this.state.start;\n        return expr;\n      }\n\n      if (result.error) this.state = result.failState;\n      return result.node;\n    }\n\n    this.expect(types.question);\n    const state = this.state.clone();\n    const originalNoArrowAt = this.state.noArrowAt;\n    const node = this.startNodeAt(startPos, startLoc);\n    let {\n      consequent,\n      failed\n    } = this.tryParseConditionalConsequent();\n    let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n\n    if (failed || invalid.length > 0) {\n      const noArrowAt = [...originalNoArrowAt];\n\n      if (invalid.length > 0) {\n        this.state = state;\n        this.state.noArrowAt = noArrowAt;\n\n        for (let i = 0; i < invalid.length; i++) {\n          noArrowAt.push(invalid[i].start);\n        }\n\n        ({\n          consequent,\n          failed\n        } = this.tryParseConditionalConsequent());\n        [valid, invalid] = this.getArrowLikeExpressions(consequent);\n      }\n\n      if (failed && valid.length > 1) {\n        this.raise(state.start, FlowErrors.AmbiguousConditionalArrow);\n      }\n\n      if (failed && valid.length === 1) {\n        this.state = state;\n        this.state.noArrowAt = noArrowAt.concat(valid[0].start);\n        ({\n          consequent,\n          failed\n        } = this.tryParseConditionalConsequent());\n      }\n    }\n\n    this.getArrowLikeExpressions(consequent, true);\n    this.state.noArrowAt = originalNoArrowAt;\n    this.expect(types.colon);\n    node.test = expr;\n    node.consequent = consequent;\n    node.alternate = this.forwardNoArrowParamsConversionAt(node, () => this.parseMaybeAssign(undefined, undefined, undefined));\n    return this.finishNode(node, \"ConditionalExpression\");\n  }\n\n  tryParseConditionalConsequent() {\n    this.state.noArrowParamsConversionAt.push(this.state.start);\n    const consequent = this.parseMaybeAssignAllowIn();\n    const failed = !this.match(types.colon);\n    this.state.noArrowParamsConversionAt.pop();\n    return {\n      consequent,\n      failed\n    };\n  }\n\n  getArrowLikeExpressions(node, disallowInvalid) {\n    const stack = [node];\n    const arrows = [];\n\n    while (stack.length !== 0) {\n      const node = stack.pop();\n\n      if (node.type === \"ArrowFunctionExpression\") {\n        if (node.typeParameters || !node.returnType) {\n          this.finishArrowValidation(node);\n        } else {\n          arrows.push(node);\n        }\n\n        stack.push(node.body);\n      } else if (node.type === \"ConditionalExpression\") {\n        stack.push(node.consequent);\n        stack.push(node.alternate);\n      }\n    }\n\n    if (disallowInvalid) {\n      arrows.forEach(node => this.finishArrowValidation(node));\n      return [arrows, []];\n    }\n\n    return partition(arrows, node => node.params.every(param => this.isAssignable(param, true)));\n  }\n\n  finishArrowValidation(node) {\n    var _node$extra;\n\n    this.toAssignableList(node.params, (_node$extra = node.extra) == null ? void 0 : _node$extra.trailingComma);\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    super.checkParams(node, false, true);\n    this.scope.exit();\n  }\n\n  forwardNoArrowParamsConversionAt(node, parse) {\n    let result;\n\n    if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n      result = parse();\n      this.state.noArrowParamsConversionAt.pop();\n    } else {\n      result = parse();\n    }\n\n    return result;\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    node = super.parseParenItem(node, startPos, startLoc);\n\n    if (this.eat(types.question)) {\n      node.optional = true;\n      this.resetEndLocation(node);\n    }\n\n    if (this.match(types.colon)) {\n      const typeCastNode = this.startNodeAt(startPos, startLoc);\n      typeCastNode.expression = node;\n      typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n      return this.finishNode(typeCastNode, \"TypeCastExpression\");\n    }\n\n    return node;\n  }\n\n  assertModuleNodeAllowed(node) {\n    if (node.type === \"ImportDeclaration\" && (node.importKind === \"type\" || node.importKind === \"typeof\") || node.type === \"ExportNamedDeclaration\" && node.exportKind === \"type\" || node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\") {\n      return;\n    }\n\n    super.assertModuleNodeAllowed(node);\n  }\n\n  parseExport(node) {\n    const decl = super.parseExport(node);\n\n    if (decl.type === \"ExportNamedDeclaration\" || decl.type === \"ExportAllDeclaration\") {\n      decl.exportKind = decl.exportKind || \"value\";\n    }\n\n    return decl;\n  }\n\n  parseExportDeclaration(node) {\n    if (this.isContextual(\"type\")) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n\n      if (this.match(types.braceL)) {\n        node.specifiers = this.parseExportSpecifiers();\n        this.parseExportFrom(node);\n        return null;\n      } else {\n        return this.flowParseTypeAlias(declarationNode);\n      }\n    } else if (this.isContextual(\"opaque\")) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseOpaqueType(declarationNode, false);\n    } else if (this.isContextual(\"interface\")) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseInterface(declarationNode);\n    } else if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n      node.exportKind = \"value\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(declarationNode);\n    } else {\n      return super.parseExportDeclaration(node);\n    }\n  }\n\n  eatExportStar(node) {\n    if (super.eatExportStar(...arguments)) return true;\n\n    if (this.isContextual(\"type\") && this.lookahead().type === types.star) {\n      node.exportKind = \"type\";\n      this.next();\n      this.next();\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node) {\n    const pos = this.state.start;\n    const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n\n    if (hasNamespace && node.exportKind === \"type\") {\n      this.unexpected(pos);\n    }\n\n    return hasNamespace;\n  }\n\n  parseClassId(node, isStatement, optionalId) {\n    super.parseClassId(node, isStatement, optionalId);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n  }\n\n  parseClassMember(classBody, member, state, constructorAllowsSuper) {\n    const pos = this.state.start;\n\n    if (this.isContextual(\"declare\")) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        return;\n      }\n\n      member.declare = true;\n    }\n\n    super.parseClassMember(classBody, member, state, constructorAllowsSuper);\n\n    if (member.declare) {\n      if (member.type !== \"ClassProperty\" && member.type !== \"ClassPrivateProperty\") {\n        this.raise(pos, FlowErrors.DeclareClassElement);\n      } else if (member.value) {\n        this.raise(member.value.start, FlowErrors.DeclareClassFieldInitializer);\n      }\n    }\n  }\n\n  getTokenFromCode(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 123 && next === 124) {\n      return this.finishOp(types.braceBarL, 2);\n    } else if (this.state.inType && (code === 62 || code === 60)) {\n      return this.finishOp(types.relational, 1);\n    } else if (this.state.inType && code === 63) {\n      return this.finishOp(types.question, 1);\n    } else if (isIteratorStart(code, next)) {\n      this.state.isIterator = true;\n      return super.readWord();\n    } else {\n      return super.getTokenFromCode(code);\n    }\n  }\n\n  isAssignable(node, isBinding) {\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n        return true;\n\n      case \"ObjectExpression\":\n        {\n          const last = node.properties.length - 1;\n          return node.properties.every((prop, i) => {\n            return prop.type !== \"ObjectMethod\" && (i === last || prop.type === \"SpreadElement\") && this.isAssignable(prop);\n          });\n        }\n\n      case \"ObjectProperty\":\n        return this.isAssignable(node.value);\n\n      case \"SpreadElement\":\n        return this.isAssignable(node.argument);\n\n      case \"ArrayExpression\":\n        return node.elements.every(element => this.isAssignable(element));\n\n      case \"AssignmentExpression\":\n        return node.operator === \"=\";\n\n      case \"ParenthesizedExpression\":\n      case \"TypeCastExpression\":\n        return this.isAssignable(node.expression);\n\n      case \"MemberExpression\":\n      case \"OptionalMemberExpression\":\n        return !isBinding;\n\n      default:\n        return false;\n    }\n  }\n\n  toAssignable(node) {\n    if (node.type === \"TypeCastExpression\") {\n      return super.toAssignable(this.typeCastToParameter(node));\n    } else {\n      return super.toAssignable(node);\n    }\n  }\n\n  toAssignableList(exprList, trailingCommaPos) {\n    for (let i = 0; i < exprList.length; i++) {\n      const expr = exprList[i];\n\n      if ((expr == null ? void 0 : expr.type) === \"TypeCastExpression\") {\n        exprList[i] = this.typeCastToParameter(expr);\n      }\n    }\n\n    return super.toAssignableList(exprList, trailingCommaPos);\n  }\n\n  toReferencedList(exprList, isParenthesizedExpr) {\n    for (let i = 0; i < exprList.length; i++) {\n      var _expr$extra;\n\n      const expr = exprList[i];\n\n      if (expr && expr.type === \"TypeCastExpression\" && !((_expr$extra = expr.extra) == null ? void 0 : _expr$extra.parenthesized) && (exprList.length > 1 || !isParenthesizedExpr)) {\n        this.raise(expr.typeAnnotation.start, FlowErrors.TypeCastInPattern);\n      }\n    }\n\n    return exprList;\n  }\n\n  checkLVal(expr, bindingType = BIND_NONE, checkClashes, contextDescription) {\n    if (expr.type !== \"TypeCastExpression\") {\n      return super.checkLVal(expr, bindingType, checkClashes, contextDescription);\n    }\n  }\n\n  parseClassProperty(node) {\n    if (this.match(types.colon)) {\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n    }\n\n    return super.parseClassProperty(node);\n  }\n\n  parseClassPrivateProperty(node) {\n    if (this.match(types.colon)) {\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n    }\n\n    return super.parseClassPrivateProperty(node);\n  }\n\n  isClassMethod() {\n    return this.isRelational(\"<\") || super.isClassMethod();\n  }\n\n  isClassProperty() {\n    return this.match(types.colon) || super.isClassProperty();\n  }\n\n  isNonstaticConstructor(method) {\n    return !this.match(types.colon) && super.isNonstaticConstructor(method);\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    if (method.variance) {\n      this.unexpected(method.variance.start);\n    }\n\n    delete method.variance;\n\n    if (this.isRelational(\"<\")) {\n      method.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    if (method.variance) {\n      this.unexpected(method.variance.start);\n    }\n\n    delete method.variance;\n\n    if (this.isRelational(\"<\")) {\n      method.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n  }\n\n  parseClassSuper(node) {\n    super.parseClassSuper(node);\n\n    if (node.superClass && this.isRelational(\"<\")) {\n      node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n    }\n\n    if (this.isContextual(\"implements\")) {\n      this.next();\n      const implemented = node.implements = [];\n\n      do {\n        const node = this.startNode();\n        node.id = this.flowParseRestrictedIdentifier(true);\n\n        if (this.isRelational(\"<\")) {\n          node.typeParameters = this.flowParseTypeParameterInstantiation();\n        } else {\n          node.typeParameters = null;\n        }\n\n        implemented.push(this.finishNode(node, \"ClassImplements\"));\n      } while (this.eat(types.comma));\n    }\n  }\n\n  parsePropertyName(node, isPrivateNameAllowed) {\n    const variance = this.flowParseVariance();\n    const key = super.parsePropertyName(node, isPrivateNameAllowed);\n    node.variance = variance;\n    return key;\n  }\n\n  parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {\n    if (prop.variance) {\n      this.unexpected(prop.variance.start);\n    }\n\n    delete prop.variance;\n    let typeParameters;\n\n    if (this.isRelational(\"<\") && !isAccessor) {\n      typeParameters = this.flowParseTypeParameterDeclaration();\n      if (!this.match(types.parenL)) this.unexpected();\n    }\n\n    super.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);\n\n    if (typeParameters) {\n      (prop.value || prop).typeParameters = typeParameters;\n    }\n  }\n\n  parseAssignableListItemTypes(param) {\n    if (this.eat(types.question)) {\n      if (param.type !== \"Identifier\") {\n        this.raise(param.start, FlowErrors.OptionalBindingPattern);\n      }\n\n      param.optional = true;\n    }\n\n    if (this.match(types.colon)) {\n      param.typeAnnotation = this.flowParseTypeAnnotation();\n    }\n\n    this.resetEndLocation(param);\n    return param;\n  }\n\n  parseMaybeDefault(startPos, startLoc, left) {\n    const node = super.parseMaybeDefault(startPos, startLoc, left);\n\n    if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n      this.raise(node.typeAnnotation.start, FlowErrors.TypeBeforeInitializer);\n    }\n\n    return node;\n  }\n\n  shouldParseDefaultImport(node) {\n    if (!hasTypeImportKind(node)) {\n      return super.shouldParseDefaultImport(node);\n    }\n\n    return isMaybeDefaultImport(this.state);\n  }\n\n  parseImportSpecifierLocal(node, specifier, type, contextDescription) {\n    specifier.local = hasTypeImportKind(node) ? this.flowParseRestrictedIdentifier(true, true) : this.parseIdentifier();\n    this.checkLVal(specifier.local, BIND_LEXICAL, undefined, contextDescription);\n    node.specifiers.push(this.finishNode(specifier, type));\n  }\n\n  maybeParseDefaultImportSpecifier(node) {\n    node.importKind = \"value\";\n    let kind = null;\n\n    if (this.match(types._typeof)) {\n      kind = \"typeof\";\n    } else if (this.isContextual(\"type\")) {\n      kind = \"type\";\n    }\n\n    if (kind) {\n      const lh = this.lookahead();\n\n      if (kind === \"type\" && lh.type === types.star) {\n        this.unexpected(lh.start);\n      }\n\n      if (isMaybeDefaultImport(lh) || lh.type === types.braceL || lh.type === types.star) {\n        this.next();\n        node.importKind = kind;\n      }\n    }\n\n    return super.maybeParseDefaultImportSpecifier(node);\n  }\n\n  parseImportSpecifier(node) {\n    const specifier = this.startNode();\n    const firstIdentLoc = this.state.start;\n    const firstIdent = this.parseIdentifier(true);\n    let specifierTypeKind = null;\n\n    if (firstIdent.name === \"type\") {\n      specifierTypeKind = \"type\";\n    } else if (firstIdent.name === \"typeof\") {\n      specifierTypeKind = \"typeof\";\n    }\n\n    let isBinding = false;\n\n    if (this.isContextual(\"as\") && !this.isLookaheadContextual(\"as\")) {\n      const as_ident = this.parseIdentifier(true);\n\n      if (specifierTypeKind !== null && !this.match(types.name) && !this.state.type.keyword) {\n        specifier.imported = as_ident;\n        specifier.importKind = specifierTypeKind;\n        specifier.local = as_ident.__clone();\n      } else {\n        specifier.imported = firstIdent;\n        specifier.importKind = null;\n        specifier.local = this.parseIdentifier();\n      }\n    } else if (specifierTypeKind !== null && (this.match(types.name) || this.state.type.keyword)) {\n      specifier.imported = this.parseIdentifier(true);\n      specifier.importKind = specifierTypeKind;\n\n      if (this.eatContextual(\"as\")) {\n        specifier.local = this.parseIdentifier();\n      } else {\n        isBinding = true;\n        specifier.local = specifier.imported.__clone();\n      }\n    } else {\n      isBinding = true;\n      specifier.imported = firstIdent;\n      specifier.importKind = null;\n      specifier.local = specifier.imported.__clone();\n    }\n\n    const nodeIsTypeImport = hasTypeImportKind(node);\n    const specifierIsTypeImport = hasTypeImportKind(specifier);\n\n    if (nodeIsTypeImport && specifierIsTypeImport) {\n      this.raise(firstIdentLoc, FlowErrors.ImportTypeShorthandOnlyInPureImport);\n    }\n\n    if (nodeIsTypeImport || specifierIsTypeImport) {\n      this.checkReservedType(specifier.local.name, specifier.local.start, true);\n    }\n\n    if (isBinding && !nodeIsTypeImport && !specifierIsTypeImport) {\n      this.checkReservedWord(specifier.local.name, specifier.start, true, true);\n    }\n\n    this.checkLVal(specifier.local, BIND_LEXICAL, undefined, \"import specifier\");\n    node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    const kind = node.kind;\n\n    if (kind !== \"get\" && kind !== \"set\" && this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    super.parseFunctionParams(node, allowModifiers);\n  }\n\n  parseVarId(decl, kind) {\n    super.parseVarId(decl, kind);\n\n    if (this.match(types.colon)) {\n      decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n      this.resetEndLocation(decl.id);\n    }\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    if (this.match(types.colon)) {\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n      this.state.noAnonFunctionType = true;\n      node.returnType = this.flowParseTypeAnnotation();\n      this.state.noAnonFunctionType = oldNoAnonFunctionType;\n    }\n\n    return super.parseAsyncArrowFromCallExpression(node, call);\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(types.colon) || super.shouldParseAsyncArrow();\n  }\n\n  parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos) {\n    var _jsx;\n\n    let state = null;\n    let jsx;\n\n    if (this.hasPlugin(\"jsx\") && (this.match(types.jsxTagStart) || this.isRelational(\"<\"))) {\n      state = this.state.clone();\n      jsx = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos), state);\n      if (!jsx.error) return jsx.node;\n      const {\n        context\n      } = this.state;\n\n      if (context[context.length - 1] === types$1.j_oTag) {\n        context.length -= 2;\n      } else if (context[context.length - 1] === types$1.j_expr) {\n        context.length -= 1;\n      }\n    }\n\n    if (((_jsx = jsx) == null ? void 0 : _jsx.error) || this.isRelational(\"<\")) {\n      var _jsx2, _jsx3;\n\n      state = state || this.state.clone();\n      let typeParameters;\n      const arrow = this.tryParse(abort => {\n        var _arrowExpression$extr;\n\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        const arrowExpression = this.forwardNoArrowParamsConversionAt(typeParameters, () => {\n          const result = super.parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos);\n          this.resetStartLocationFromNode(result, typeParameters);\n          return result;\n        });\n\n        if (arrowExpression.type !== \"ArrowFunctionExpression\" && ((_arrowExpression$extr = arrowExpression.extra) == null ? void 0 : _arrowExpression$extr.parenthesized)) {\n          abort();\n        }\n\n        const expr = this.maybeUnwrapTypeCastExpression(arrowExpression);\n        expr.typeParameters = typeParameters;\n        this.resetStartLocationFromNode(expr, typeParameters);\n        return arrowExpression;\n      }, state);\n      let arrowExpression = null;\n\n      if (arrow.node && this.maybeUnwrapTypeCastExpression(arrow.node).type === \"ArrowFunctionExpression\") {\n        if (!arrow.error && !arrow.aborted) {\n          if (arrow.node.async) {\n            this.raise(typeParameters.start, FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction);\n          }\n\n          return arrow.node;\n        }\n\n        arrowExpression = arrow.node;\n      }\n\n      if ((_jsx2 = jsx) == null ? void 0 : _jsx2.node) {\n        this.state = jsx.failState;\n        return jsx.node;\n      }\n\n      if (arrowExpression) {\n        this.state = arrow.failState;\n        return arrowExpression;\n      }\n\n      if ((_jsx3 = jsx) == null ? void 0 : _jsx3.thrown) throw jsx.error;\n      if (arrow.thrown) throw arrow.error;\n      throw this.raise(typeParameters.start, FlowErrors.UnexpectedTokenAfterTypeParameter);\n    }\n\n    return super.parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos);\n  }\n\n  parseArrow(node) {\n    if (this.match(types.colon)) {\n      const result = this.tryParse(() => {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        const typeNode = this.startNode();\n        [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n        if (this.canInsertSemicolon()) this.unexpected();\n        if (!this.match(types.arrow)) this.unexpected();\n        return typeNode;\n      });\n      if (result.thrown) return null;\n      if (result.error) this.state = result.failState;\n      node.returnType = result.node.typeAnnotation ? this.finishNode(result.node, \"TypeAnnotation\") : null;\n    }\n\n    return super.parseArrow(node);\n  }\n\n  shouldParseArrow() {\n    return this.match(types.colon) || super.shouldParseArrow();\n  }\n\n  setArrowFunctionParameters(node, params) {\n    if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      node.params = params;\n    } else {\n      super.setArrowFunctionParameters(node, params);\n    }\n  }\n\n  checkParams(node, allowDuplicates, isArrowFunction) {\n    if (isArrowFunction && this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      return;\n    }\n\n    return super.checkParams(...arguments);\n  }\n\n  parseParenAndDistinguishExpression(canBeArrow) {\n    return super.parseParenAndDistinguishExpression(canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1);\n  }\n\n  parseSubscripts(base, startPos, startLoc, noCalls) {\n    if (base.type === \"Identifier\" && base.name === \"async\" && this.state.noArrowAt.indexOf(startPos) !== -1) {\n      this.next();\n      const node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n      base = this.finishNode(node, \"CallExpression\");\n    } else if (base.type === \"Identifier\" && base.name === \"async\" && this.isRelational(\"<\")) {\n      const state = this.state.clone();\n      const arrow = this.tryParse(abort => this.parseAsyncArrowWithTypeParameters(startPos, startLoc) || abort(), state);\n      if (!arrow.error && !arrow.aborted) return arrow.node;\n      const result = this.tryParse(() => super.parseSubscripts(base, startPos, startLoc, noCalls), state);\n      if (result.node && !result.error) return result.node;\n\n      if (arrow.node) {\n        this.state = arrow.failState;\n        return arrow.node;\n      }\n\n      if (result.node) {\n        this.state = result.failState;\n        return result.node;\n      }\n\n      throw arrow.error || result.error;\n    }\n\n    return super.parseSubscripts(base, startPos, startLoc, noCalls);\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, subscriptState) {\n    if (this.match(types.questionDot) && this.isLookaheadToken_lt()) {\n      subscriptState.optionalChainMember = true;\n\n      if (noCalls) {\n        subscriptState.stop = true;\n        return base;\n      }\n\n      this.next();\n      const node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      node.typeArguments = this.flowParseTypeParameterInstantiation();\n      this.expect(types.parenL);\n      node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n      node.optional = true;\n      return this.finishCallExpression(node, true);\n    } else if (!noCalls && this.shouldParseTypes() && this.isRelational(\"<\")) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      const result = this.tryParse(() => {\n        node.typeArguments = this.flowParseTypeParameterInstantiationCallOrNew();\n        this.expect(types.parenL);\n        node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n        if (subscriptState.optionalChainMember) node.optional = false;\n        return this.finishCallExpression(node, subscriptState.optionalChainMember);\n      });\n\n      if (result.node) {\n        if (result.error) this.state = result.failState;\n        return result.node;\n      }\n    }\n\n    return super.parseSubscript(base, startPos, startLoc, noCalls, subscriptState);\n  }\n\n  parseNewArguments(node) {\n    let targs = null;\n\n    if (this.shouldParseTypes() && this.isRelational(\"<\")) {\n      targs = this.tryParse(() => this.flowParseTypeParameterInstantiationCallOrNew()).node;\n    }\n\n    node.typeArguments = targs;\n    super.parseNewArguments(node);\n  }\n\n  parseAsyncArrowWithTypeParameters(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n    this.parseFunctionParams(node);\n    if (!this.parseArrow(node)) return;\n    return this.parseArrowExpression(node, undefined, true);\n  }\n\n  readToken_mult_modulo(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 42 && next === 47 && this.state.hasFlowComment) {\n      this.state.hasFlowComment = false;\n      this.state.pos += 2;\n      this.nextToken();\n      return;\n    }\n\n    super.readToken_mult_modulo(code);\n  }\n\n  readToken_pipe_amp(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 124 && next === 125) {\n      this.finishOp(types.braceBarR, 2);\n      return;\n    }\n\n    super.readToken_pipe_amp(code);\n  }\n\n  parseTopLevel(file, program) {\n    const fileNode = super.parseTopLevel(file, program);\n\n    if (this.state.hasFlowComment) {\n      this.raise(this.state.pos, FlowErrors.UnterminatedFlowComment);\n    }\n\n    return fileNode;\n  }\n\n  skipBlockComment() {\n    if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n      if (this.state.hasFlowComment) {\n        this.unexpected(null, FlowErrors.NestedFlowComment);\n      }\n\n      this.hasFlowCommentCompletion();\n      this.state.pos += this.skipFlowComment();\n      this.state.hasFlowComment = true;\n      return;\n    }\n\n    if (this.state.hasFlowComment) {\n      const end = this.input.indexOf(\"*-/\", this.state.pos += 2);\n\n      if (end === -1) {\n        throw this.raise(this.state.pos - 2, ErrorMessages.UnterminatedComment);\n      }\n\n      this.state.pos = end + 3;\n      return;\n    }\n\n    super.skipBlockComment();\n  }\n\n  skipFlowComment() {\n    const {\n      pos\n    } = this.state;\n    let shiftToFirstNonWhiteSpace = 2;\n\n    while ([32, 9].includes(this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace))) {\n      shiftToFirstNonWhiteSpace++;\n    }\n\n    const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n    const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n    if (ch2 === 58 && ch3 === 58) {\n      return shiftToFirstNonWhiteSpace + 2;\n    }\n\n    if (this.input.slice(shiftToFirstNonWhiteSpace + pos, shiftToFirstNonWhiteSpace + pos + 12) === \"flow-include\") {\n      return shiftToFirstNonWhiteSpace + 12;\n    }\n\n    if (ch2 === 58 && ch3 !== 58) {\n      return shiftToFirstNonWhiteSpace;\n    }\n\n    return false;\n  }\n\n  hasFlowCommentCompletion() {\n    const end = this.input.indexOf(\"*/\", this.state.pos);\n\n    if (end === -1) {\n      throw this.raise(this.state.pos, ErrorMessages.UnterminatedComment);\n    }\n  }\n\n  flowEnumErrorBooleanMemberNotInitialized(pos, {\n    enumName,\n    memberName\n  }) {\n    this.raise(pos, FlowErrors.EnumBooleanMemberNotInitialized, memberName, enumName);\n  }\n\n  flowEnumErrorInvalidMemberName(pos, {\n    enumName,\n    memberName\n  }) {\n    const suggestion = memberName[0].toUpperCase() + memberName.slice(1);\n    this.raise(pos, FlowErrors.EnumInvalidMemberName, memberName, suggestion, enumName);\n  }\n\n  flowEnumErrorDuplicateMemberName(pos, {\n    enumName,\n    memberName\n  }) {\n    this.raise(pos, FlowErrors.EnumDuplicateMemberName, memberName, enumName);\n  }\n\n  flowEnumErrorInconsistentMemberValues(pos, {\n    enumName\n  }) {\n    this.raise(pos, FlowErrors.EnumInconsistentMemberValues, enumName);\n  }\n\n  flowEnumErrorInvalidExplicitType(pos, {\n    enumName,\n    suppliedType\n  }) {\n    return this.raise(pos, suppliedType === null ? FlowErrors.EnumInvalidExplicitTypeUnknownSupplied : FlowErrors.EnumInvalidExplicitType, enumName, suppliedType);\n  }\n\n  flowEnumErrorInvalidMemberInitializer(pos, {\n    enumName,\n    explicitType,\n    memberName\n  }) {\n    let message = null;\n\n    switch (explicitType) {\n      case \"boolean\":\n      case \"number\":\n      case \"string\":\n        message = FlowErrors.EnumInvalidMemberInitializerPrimaryType;\n        break;\n\n      case \"symbol\":\n        message = FlowErrors.EnumInvalidMemberInitializerSymbolType;\n        break;\n\n      default:\n        message = FlowErrors.EnumInvalidMemberInitializerUnknownType;\n    }\n\n    return this.raise(pos, message, enumName, memberName, explicitType);\n  }\n\n  flowEnumErrorNumberMemberNotInitialized(pos, {\n    enumName,\n    memberName\n  }) {\n    this.raise(pos, FlowErrors.EnumNumberMemberNotInitialized, enumName, memberName);\n  }\n\n  flowEnumErrorStringMemberInconsistentlyInitailized(pos, {\n    enumName\n  }) {\n    this.raise(pos, FlowErrors.EnumStringMemberInconsistentlyInitailized, enumName);\n  }\n\n  flowEnumMemberInit() {\n    const startPos = this.state.start;\n\n    const endOfInit = () => this.match(types.comma) || this.match(types.braceR);\n\n    switch (this.state.type) {\n      case types.num:\n        {\n          const literal = this.parseLiteral(this.state.value, \"NumericLiteral\");\n\n          if (endOfInit()) {\n            return {\n              type: \"number\",\n              pos: literal.start,\n              value: literal\n            };\n          }\n\n          return {\n            type: \"invalid\",\n            pos: startPos\n          };\n        }\n\n      case types.string:\n        {\n          const literal = this.parseLiteral(this.state.value, \"StringLiteral\");\n\n          if (endOfInit()) {\n            return {\n              type: \"string\",\n              pos: literal.start,\n              value: literal\n            };\n          }\n\n          return {\n            type: \"invalid\",\n            pos: startPos\n          };\n        }\n\n      case types._true:\n      case types._false:\n        {\n          const literal = this.parseBooleanLiteral();\n\n          if (endOfInit()) {\n            return {\n              type: \"boolean\",\n              pos: literal.start,\n              value: literal\n            };\n          }\n\n          return {\n            type: \"invalid\",\n            pos: startPos\n          };\n        }\n\n      default:\n        return {\n          type: \"invalid\",\n          pos: startPos\n        };\n    }\n  }\n\n  flowEnumMemberRaw() {\n    const pos = this.state.start;\n    const id = this.parseIdentifier(true);\n    const init = this.eat(types.eq) ? this.flowEnumMemberInit() : {\n      type: \"none\",\n      pos\n    };\n    return {\n      id,\n      init\n    };\n  }\n\n  flowEnumCheckExplicitTypeMismatch(pos, context, expectedType) {\n    const {\n      explicitType\n    } = context;\n\n    if (explicitType === null) {\n      return;\n    }\n\n    if (explicitType !== expectedType) {\n      this.flowEnumErrorInvalidMemberInitializer(pos, context);\n    }\n  }\n\n  flowEnumMembers({\n    enumName,\n    explicitType\n  }) {\n    const seenNames = new Set();\n    const members = {\n      booleanMembers: [],\n      numberMembers: [],\n      stringMembers: [],\n      defaultedMembers: []\n    };\n\n    while (!this.match(types.braceR)) {\n      const memberNode = this.startNode();\n      const {\n        id,\n        init\n      } = this.flowEnumMemberRaw();\n      const memberName = id.name;\n\n      if (memberName === \"\") {\n        continue;\n      }\n\n      if (/^[a-z]/.test(memberName)) {\n        this.flowEnumErrorInvalidMemberName(id.start, {\n          enumName,\n          memberName\n        });\n      }\n\n      if (seenNames.has(memberName)) {\n        this.flowEnumErrorDuplicateMemberName(id.start, {\n          enumName,\n          memberName\n        });\n      }\n\n      seenNames.add(memberName);\n      const context = {\n        enumName,\n        explicitType,\n        memberName\n      };\n      memberNode.id = id;\n\n      switch (init.type) {\n        case \"boolean\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"boolean\");\n            memberNode.init = init.value;\n            members.booleanMembers.push(this.finishNode(memberNode, \"EnumBooleanMember\"));\n            break;\n          }\n\n        case \"number\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"number\");\n            memberNode.init = init.value;\n            members.numberMembers.push(this.finishNode(memberNode, \"EnumNumberMember\"));\n            break;\n          }\n\n        case \"string\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"string\");\n            memberNode.init = init.value;\n            members.stringMembers.push(this.finishNode(memberNode, \"EnumStringMember\"));\n            break;\n          }\n\n        case \"invalid\":\n          {\n            throw this.flowEnumErrorInvalidMemberInitializer(init.pos, context);\n          }\n\n        case \"none\":\n          {\n            switch (explicitType) {\n              case \"boolean\":\n                this.flowEnumErrorBooleanMemberNotInitialized(init.pos, context);\n                break;\n\n              case \"number\":\n                this.flowEnumErrorNumberMemberNotInitialized(init.pos, context);\n                break;\n\n              default:\n                members.defaultedMembers.push(this.finishNode(memberNode, \"EnumDefaultedMember\"));\n            }\n          }\n      }\n\n      if (!this.match(types.braceR)) {\n        this.expect(types.comma);\n      }\n    }\n\n    return members;\n  }\n\n  flowEnumStringMembers(initializedMembers, defaultedMembers, {\n    enumName\n  }) {\n    if (initializedMembers.length === 0) {\n      return defaultedMembers;\n    } else if (defaultedMembers.length === 0) {\n      return initializedMembers;\n    } else if (defaultedMembers.length > initializedMembers.length) {\n      for (let _i = 0; _i < initializedMembers.length; _i++) {\n        const member = initializedMembers[_i];\n        this.flowEnumErrorStringMemberInconsistentlyInitailized(member.start, {\n          enumName\n        });\n      }\n\n      return defaultedMembers;\n    } else {\n      for (let _i2 = 0; _i2 < defaultedMembers.length; _i2++) {\n        const member = defaultedMembers[_i2];\n        this.flowEnumErrorStringMemberInconsistentlyInitailized(member.start, {\n          enumName\n        });\n      }\n\n      return initializedMembers;\n    }\n  }\n\n  flowEnumParseExplicitType({\n    enumName\n  }) {\n    if (this.eatContextual(\"of\")) {\n      if (!this.match(types.name)) {\n        throw this.flowEnumErrorInvalidExplicitType(this.state.start, {\n          enumName,\n          suppliedType: null\n        });\n      }\n\n      const {\n        value\n      } = this.state;\n      this.next();\n\n      if (value !== \"boolean\" && value !== \"number\" && value !== \"string\" && value !== \"symbol\") {\n        this.flowEnumErrorInvalidExplicitType(this.state.start, {\n          enumName,\n          suppliedType: value\n        });\n      }\n\n      return value;\n    }\n\n    return null;\n  }\n\n  flowEnumBody(node, {\n    enumName,\n    nameLoc\n  }) {\n    const explicitType = this.flowEnumParseExplicitType({\n      enumName\n    });\n    this.expect(types.braceL);\n    const members = this.flowEnumMembers({\n      enumName,\n      explicitType\n    });\n\n    switch (explicitType) {\n      case \"boolean\":\n        node.explicitType = true;\n        node.members = members.booleanMembers;\n        this.expect(types.braceR);\n        return this.finishNode(node, \"EnumBooleanBody\");\n\n      case \"number\":\n        node.explicitType = true;\n        node.members = members.numberMembers;\n        this.expect(types.braceR);\n        return this.finishNode(node, \"EnumNumberBody\");\n\n      case \"string\":\n        node.explicitType = true;\n        node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\n          enumName\n        });\n        this.expect(types.braceR);\n        return this.finishNode(node, \"EnumStringBody\");\n\n      case \"symbol\":\n        node.members = members.defaultedMembers;\n        this.expect(types.braceR);\n        return this.finishNode(node, \"EnumSymbolBody\");\n\n      default:\n        {\n          const empty = () => {\n            node.members = [];\n            this.expect(types.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          };\n\n          node.explicitType = false;\n          const boolsLen = members.booleanMembers.length;\n          const numsLen = members.numberMembers.length;\n          const strsLen = members.stringMembers.length;\n          const defaultedLen = members.defaultedMembers.length;\n\n          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n            return empty();\n          } else if (!boolsLen && !numsLen) {\n            node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\n              enumName\n            });\n            this.expect(types.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n            for (let _i3 = 0, _members$defaultedMem = members.defaultedMembers; _i3 < _members$defaultedMem.length; _i3++) {\n              const member = _members$defaultedMem[_i3];\n              this.flowEnumErrorBooleanMemberNotInitialized(member.start, {\n                enumName,\n                memberName: member.id.name\n              });\n            }\n\n            node.members = members.booleanMembers;\n            this.expect(types.braceR);\n            return this.finishNode(node, \"EnumBooleanBody\");\n          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n            for (let _i4 = 0, _members$defaultedMem2 = members.defaultedMembers; _i4 < _members$defaultedMem2.length; _i4++) {\n              const member = _members$defaultedMem2[_i4];\n              this.flowEnumErrorNumberMemberNotInitialized(member.start, {\n                enumName,\n                memberName: member.id.name\n              });\n            }\n\n            node.members = members.numberMembers;\n            this.expect(types.braceR);\n            return this.finishNode(node, \"EnumNumberBody\");\n          } else {\n            this.flowEnumErrorInconsistentMemberValues(nameLoc, {\n              enumName\n            });\n            return empty();\n          }\n        }\n    }\n  }\n\n  flowParseEnumDeclaration(node) {\n    const id = this.parseIdentifier();\n    node.id = id;\n    node.body = this.flowEnumBody(this.startNode(), {\n      enumName: id.name,\n      nameLoc: id.start\n    });\n    return this.finishNode(node, \"EnumDeclaration\");\n  }\n\n  updateContext(prevType) {\n    if (this.match(types.name) && this.state.value === \"of\" && prevType === types.name && this.input.slice(this.state.lastTokStart, this.state.lastTokEnd) === \"interface\") {\n      this.state.exprAllowed = false;\n    } else {\n      super.updateContext(prevType);\n    }\n  }\n\n  isLookaheadToken_lt() {\n    const next = this.nextTokenStart();\n\n    if (this.input.charCodeAt(next) === 60) {\n      const afterNext = this.input.charCodeAt(next + 1);\n      return afterNext !== 60 && afterNext !== 61;\n    }\n\n    return false;\n  }\n\n  maybeUnwrapTypeCastExpression(node) {\n    return node.type === \"TypeCastExpression\" ? node.expression : node;\n  }\n\n});\n\nconst entities = {\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\"\n};\n\nconst HEX_NUMBER = /^[\\da-fA-F]+$/;\nconst DECIMAL_NUMBER = /^\\d+$/;\nconst JsxErrors = Object.freeze({\n  AttributeIsEmpty: \"JSX attributes must only be assigned a non-empty expression\",\n  MissingClosingTagFragment: \"Expected corresponding JSX closing tag for <>\",\n  MissingClosingTagElement: \"Expected corresponding JSX closing tag for <%0>\",\n  UnsupportedJsxValue: \"JSX value should be either an expression or a quoted JSX text\",\n  UnterminatedJsxContent: \"Unterminated JSX contents\",\n  UnwrappedAdjacentJSXElements: \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\"\n});\ntypes$1.j_oTag = new TokContext(\"<tag\", false);\ntypes$1.j_cTag = new TokContext(\"</tag\", false);\ntypes$1.j_expr = new TokContext(\"<tag>...</tag>\", true, true);\ntypes.jsxName = new TokenType(\"jsxName\");\ntypes.jsxText = new TokenType(\"jsxText\", {\n  beforeExpr: true\n});\ntypes.jsxTagStart = new TokenType(\"jsxTagStart\", {\n  startsExpr: true\n});\ntypes.jsxTagEnd = new TokenType(\"jsxTagEnd\");\n\ntypes.jsxTagStart.updateContext = function () {\n  this.state.context.push(types$1.j_expr);\n  this.state.context.push(types$1.j_oTag);\n  this.state.exprAllowed = false;\n};\n\ntypes.jsxTagEnd.updateContext = function (prevType) {\n  const out = this.state.context.pop();\n\n  if (out === types$1.j_oTag && prevType === types.slash || out === types$1.j_cTag) {\n    this.state.context.pop();\n    this.state.exprAllowed = this.curContext() === types$1.j_expr;\n  } else {\n    this.state.exprAllowed = true;\n  }\n};\n\nfunction isFragment(object) {\n  return object ? object.type === \"JSXOpeningFragment\" || object.type === \"JSXClosingFragment\" : false;\n}\n\nfunction getQualifiedJSXName(object) {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return getQualifiedJSXName(object.object) + \".\" + getQualifiedJSXName(object.property);\n  }\n\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nvar jsx = (superClass => class extends superClass {\n  jsxReadToken() {\n    let out = \"\";\n    let chunkStart = this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, JsxErrors.UnterminatedJsxContent);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      switch (ch) {\n        case 60:\n        case 123:\n          if (this.state.pos === this.state.start) {\n            if (ch === 60 && this.state.exprAllowed) {\n              ++this.state.pos;\n              return this.finishToken(types.jsxTagStart);\n            }\n\n            return super.getTokenFromCode(ch);\n          }\n\n          out += this.input.slice(chunkStart, this.state.pos);\n          return this.finishToken(types.jsxText, out);\n\n        case 38:\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n          break;\n\n        default:\n          if (isNewLine(ch)) {\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadNewLine(true);\n            chunkStart = this.state.pos;\n          } else {\n            ++this.state.pos;\n          }\n\n      }\n    }\n  }\n\n  jsxReadNewLine(normalizeCRLF) {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let out;\n    ++this.state.pos;\n\n    if (ch === 13 && this.input.charCodeAt(this.state.pos) === 10) {\n      ++this.state.pos;\n      out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n    } else {\n      out = String.fromCharCode(ch);\n    }\n\n    ++this.state.curLine;\n    this.state.lineStart = this.state.pos;\n    return out;\n  }\n\n  jsxReadString(quote) {\n    let out = \"\";\n    let chunkStart = ++this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedString);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n\n      if (ch === 38) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.jsxReadEntity();\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.jsxReadNewLine(false);\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n\n    out += this.input.slice(chunkStart, this.state.pos++);\n    return this.finishToken(types.string, out);\n  }\n\n  jsxReadEntity() {\n    let str = \"\";\n    let count = 0;\n    let entity;\n    let ch = this.input[this.state.pos];\n    const startPos = ++this.state.pos;\n\n    while (this.state.pos < this.length && count++ < 10) {\n      ch = this.input[this.state.pos++];\n\n      if (ch === \";\") {\n        if (str[0] === \"#\") {\n          if (str[1] === \"x\") {\n            str = str.substr(2);\n\n            if (HEX_NUMBER.test(str)) {\n              entity = String.fromCodePoint(parseInt(str, 16));\n            }\n          } else {\n            str = str.substr(1);\n\n            if (DECIMAL_NUMBER.test(str)) {\n              entity = String.fromCodePoint(parseInt(str, 10));\n            }\n          }\n        } else {\n          entity = entities[str];\n        }\n\n        break;\n      }\n\n      str += ch;\n    }\n\n    if (!entity) {\n      this.state.pos = startPos;\n      return \"&\";\n    }\n\n    return entity;\n  }\n\n  jsxReadWord() {\n    let ch;\n    const start = this.state.pos;\n\n    do {\n      ch = this.input.charCodeAt(++this.state.pos);\n    } while (isIdentifierChar(ch) || ch === 45);\n\n    return this.finishToken(types.jsxName, this.input.slice(start, this.state.pos));\n  }\n\n  jsxParseIdentifier() {\n    const node = this.startNode();\n\n    if (this.match(types.jsxName)) {\n      node.name = this.state.value;\n    } else if (this.state.type.keyword) {\n      node.name = this.state.type.keyword;\n    } else {\n      this.unexpected();\n    }\n\n    this.next();\n    return this.finishNode(node, \"JSXIdentifier\");\n  }\n\n  jsxParseNamespacedName() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const name = this.jsxParseIdentifier();\n    if (!this.eat(types.colon)) return name;\n    const node = this.startNodeAt(startPos, startLoc);\n    node.namespace = name;\n    node.name = this.jsxParseIdentifier();\n    return this.finishNode(node, \"JSXNamespacedName\");\n  }\n\n  jsxParseElementName() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let node = this.jsxParseNamespacedName();\n\n    if (node.type === \"JSXNamespacedName\") {\n      return node;\n    }\n\n    while (this.eat(types.dot)) {\n      const newNode = this.startNodeAt(startPos, startLoc);\n      newNode.object = node;\n      newNode.property = this.jsxParseIdentifier();\n      node = this.finishNode(newNode, \"JSXMemberExpression\");\n    }\n\n    return node;\n  }\n\n  jsxParseAttributeValue() {\n    let node;\n\n    switch (this.state.type) {\n      case types.braceL:\n        node = this.startNode();\n        this.next();\n        node = this.jsxParseExpressionContainer(node);\n\n        if (node.expression.type === \"JSXEmptyExpression\") {\n          this.raise(node.start, JsxErrors.AttributeIsEmpty);\n        }\n\n        return node;\n\n      case types.jsxTagStart:\n      case types.string:\n        return this.parseExprAtom();\n\n      default:\n        throw this.raise(this.state.start, JsxErrors.UnsupportedJsxValue);\n    }\n  }\n\n  jsxParseEmptyExpression() {\n    const node = this.startNodeAt(this.state.lastTokEnd, this.state.lastTokEndLoc);\n    return this.finishNodeAt(node, \"JSXEmptyExpression\", this.state.start, this.state.startLoc);\n  }\n\n  jsxParseSpreadChild(node) {\n    this.next();\n    node.expression = this.parseExpression();\n    this.expect(types.braceR);\n    return this.finishNode(node, \"JSXSpreadChild\");\n  }\n\n  jsxParseExpressionContainer(node) {\n    if (this.match(types.braceR)) {\n      node.expression = this.jsxParseEmptyExpression();\n    } else {\n      node.expression = this.parseExpression();\n    }\n\n    this.expect(types.braceR);\n    return this.finishNode(node, \"JSXExpressionContainer\");\n  }\n\n  jsxParseAttribute() {\n    const node = this.startNode();\n\n    if (this.eat(types.braceL)) {\n      this.expect(types.ellipsis);\n      node.argument = this.parseMaybeAssignAllowIn();\n      this.expect(types.braceR);\n      return this.finishNode(node, \"JSXSpreadAttribute\");\n    }\n\n    node.name = this.jsxParseNamespacedName();\n    node.value = this.eat(types.eq) ? this.jsxParseAttributeValue() : null;\n    return this.finishNode(node, \"JSXAttribute\");\n  }\n\n  jsxParseOpeningElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n\n    if (this.match(types.jsxTagEnd)) {\n      this.expect(types.jsxTagEnd);\n      return this.finishNode(node, \"JSXOpeningFragment\");\n    }\n\n    node.name = this.jsxParseElementName();\n    return this.jsxParseOpeningElementAfterName(node);\n  }\n\n  jsxParseOpeningElementAfterName(node) {\n    const attributes = [];\n\n    while (!this.match(types.slash) && !this.match(types.jsxTagEnd)) {\n      attributes.push(this.jsxParseAttribute());\n    }\n\n    node.attributes = attributes;\n    node.selfClosing = this.eat(types.slash);\n    this.expect(types.jsxTagEnd);\n    return this.finishNode(node, \"JSXOpeningElement\");\n  }\n\n  jsxParseClosingElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n\n    if (this.match(types.jsxTagEnd)) {\n      this.expect(types.jsxTagEnd);\n      return this.finishNode(node, \"JSXClosingFragment\");\n    }\n\n    node.name = this.jsxParseElementName();\n    this.expect(types.jsxTagEnd);\n    return this.finishNode(node, \"JSXClosingElement\");\n  }\n\n  jsxParseElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n    const children = [];\n    const openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);\n    let closingElement = null;\n\n    if (!openingElement.selfClosing) {\n      contents: for (;;) {\n        switch (this.state.type) {\n          case types.jsxTagStart:\n            startPos = this.state.start;\n            startLoc = this.state.startLoc;\n            this.next();\n\n            if (this.eat(types.slash)) {\n              closingElement = this.jsxParseClosingElementAt(startPos, startLoc);\n              break contents;\n            }\n\n            children.push(this.jsxParseElementAt(startPos, startLoc));\n            break;\n\n          case types.jsxText:\n            children.push(this.parseExprAtom());\n            break;\n\n          case types.braceL:\n            {\n              const node = this.startNode();\n              this.next();\n\n              if (this.match(types.ellipsis)) {\n                children.push(this.jsxParseSpreadChild(node));\n              } else {\n                children.push(this.jsxParseExpressionContainer(node));\n              }\n\n              break;\n            }\n\n          default:\n            throw this.unexpected();\n        }\n      }\n\n      if (isFragment(openingElement) && !isFragment(closingElement)) {\n        this.raise(closingElement.start, JsxErrors.MissingClosingTagFragment);\n      } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n        this.raise(closingElement.start, JsxErrors.MissingClosingTagElement, getQualifiedJSXName(openingElement.name));\n      } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n        if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {\n          this.raise(closingElement.start, JsxErrors.MissingClosingTagElement, getQualifiedJSXName(openingElement.name));\n        }\n      }\n    }\n\n    if (isFragment(openingElement)) {\n      node.openingFragment = openingElement;\n      node.closingFragment = closingElement;\n    } else {\n      node.openingElement = openingElement;\n      node.closingElement = closingElement;\n    }\n\n    node.children = children;\n\n    if (this.isRelational(\"<\")) {\n      throw this.raise(this.state.start, JsxErrors.UnwrappedAdjacentJSXElements);\n    }\n\n    return isFragment(openingElement) ? this.finishNode(node, \"JSXFragment\") : this.finishNode(node, \"JSXElement\");\n  }\n\n  jsxParseElement() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    this.next();\n    return this.jsxParseElementAt(startPos, startLoc);\n  }\n\n  parseExprAtom(refExpressionErrors) {\n    if (this.match(types.jsxText)) {\n      return this.parseLiteral(this.state.value, \"JSXText\");\n    } else if (this.match(types.jsxTagStart)) {\n      return this.jsxParseElement();\n    } else if (this.isRelational(\"<\") && this.input.charCodeAt(this.state.pos) !== 33) {\n      this.finishToken(types.jsxTagStart);\n      return this.jsxParseElement();\n    } else {\n      return super.parseExprAtom(refExpressionErrors);\n    }\n  }\n\n  getTokenFromCode(code) {\n    if (this.state.inPropertyName) return super.getTokenFromCode(code);\n    const context = this.curContext();\n\n    if (context === types$1.j_expr) {\n      return this.jsxReadToken();\n    }\n\n    if (context === types$1.j_oTag || context === types$1.j_cTag) {\n      if (isIdentifierStart(code)) {\n        return this.jsxReadWord();\n      }\n\n      if (code === 62) {\n        ++this.state.pos;\n        return this.finishToken(types.jsxTagEnd);\n      }\n\n      if ((code === 34 || code === 39) && context === types$1.j_oTag) {\n        return this.jsxReadString(code);\n      }\n    }\n\n    if (code === 60 && this.state.exprAllowed && this.input.charCodeAt(this.state.pos + 1) !== 33) {\n      ++this.state.pos;\n      return this.finishToken(types.jsxTagStart);\n    }\n\n    return super.getTokenFromCode(code);\n  }\n\n  updateContext(prevType) {\n    if (this.match(types.braceL)) {\n      const curContext = this.curContext();\n\n      if (curContext === types$1.j_oTag) {\n        this.state.context.push(types$1.braceExpression);\n      } else if (curContext === types$1.j_expr) {\n        this.state.context.push(types$1.templateQuasi);\n      } else {\n        super.updateContext(prevType);\n      }\n\n      this.state.exprAllowed = true;\n    } else if (this.match(types.slash) && prevType === types.jsxTagStart) {\n      this.state.context.length -= 2;\n      this.state.context.push(types$1.j_cTag);\n      this.state.exprAllowed = false;\n    } else {\n      return super.updateContext(prevType);\n    }\n  }\n\n});\n\nclass Scope {\n  constructor(flags) {\n    this.var = [];\n    this.lexical = [];\n    this.functions = [];\n    this.flags = flags;\n  }\n\n}\nclass ScopeHandler {\n  constructor(raise, inModule) {\n    this.scopeStack = [];\n    this.undefinedExports = new Map();\n    this.undefinedPrivateNames = new Map();\n    this.raise = raise;\n    this.inModule = inModule;\n  }\n\n  get inFunction() {\n    return (this.currentVarScope().flags & SCOPE_FUNCTION) > 0;\n  }\n\n  get allowSuper() {\n    return (this.currentThisScope().flags & SCOPE_SUPER) > 0;\n  }\n\n  get allowDirectSuper() {\n    return (this.currentThisScope().flags & SCOPE_DIRECT_SUPER) > 0;\n  }\n\n  get inClass() {\n    return (this.currentThisScope().flags & SCOPE_CLASS) > 0;\n  }\n\n  get inNonArrowFunction() {\n    return (this.currentThisScope().flags & SCOPE_FUNCTION) > 0;\n  }\n\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n\n  createScope(flags) {\n    return new Scope(flags);\n  }\n\n  enter(flags) {\n    this.scopeStack.push(this.createScope(flags));\n  }\n\n  exit() {\n    this.scopeStack.pop();\n  }\n\n  treatFunctionsAsVarInScope(scope) {\n    return !!(scope.flags & SCOPE_FUNCTION || !this.inModule && scope.flags & SCOPE_PROGRAM);\n  }\n\n  declareName(name, bindingType, pos) {\n    let scope = this.currentScope();\n\n    if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {\n      this.checkRedeclarationInScope(scope, name, bindingType, pos);\n\n      if (bindingType & BIND_SCOPE_FUNCTION) {\n        scope.functions.push(name);\n      } else {\n        scope.lexical.push(name);\n      }\n\n      if (bindingType & BIND_SCOPE_LEXICAL) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & BIND_SCOPE_VAR) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n        scope.var.push(name);\n        this.maybeExportDefined(scope, name);\n        if (scope.flags & SCOPE_VAR) break;\n      }\n    }\n\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  maybeExportDefined(scope, name) {\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  checkRedeclarationInScope(scope, name, bindingType, pos) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.raise(pos, ErrorMessages.VarRedeclaration, name);\n    }\n  }\n\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (!(bindingType & BIND_KIND_VALUE)) return false;\n\n    if (bindingType & BIND_SCOPE_LEXICAL) {\n      return scope.lexical.indexOf(name) > -1 || scope.functions.indexOf(name) > -1 || scope.var.indexOf(name) > -1;\n    }\n\n    if (bindingType & BIND_SCOPE_FUNCTION) {\n      return scope.lexical.indexOf(name) > -1 || !this.treatFunctionsAsVarInScope(scope) && scope.var.indexOf(name) > -1;\n    }\n\n    return scope.lexical.indexOf(name) > -1 && !(scope.flags & SCOPE_SIMPLE_CATCH && scope.lexical[0] === name) || !this.treatFunctionsAsVarInScope(scope) && scope.functions.indexOf(name) > -1;\n  }\n\n  checkLocalExport(id) {\n    if (this.scopeStack[0].lexical.indexOf(id.name) === -1 && this.scopeStack[0].var.indexOf(id.name) === -1 && this.scopeStack[0].functions.indexOf(id.name) === -1) {\n      this.undefinedExports.set(id.name, id.start);\n    }\n  }\n\n  currentScope() {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n\n  currentVarScope() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const scope = this.scopeStack[i];\n\n      if (scope.flags & SCOPE_VAR) {\n        return scope;\n      }\n    }\n  }\n\n  currentThisScope() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const scope = this.scopeStack[i];\n\n      if ((scope.flags & SCOPE_VAR || scope.flags & SCOPE_CLASS) && !(scope.flags & SCOPE_ARROW)) {\n        return scope;\n      }\n    }\n  }\n\n}\n\nclass TypeScriptScope extends Scope {\n  constructor(...args) {\n    super(...args);\n    this.types = [];\n    this.enums = [];\n    this.constEnums = [];\n    this.classes = [];\n    this.exportOnlyBindings = [];\n  }\n\n}\n\nclass TypeScriptScopeHandler extends ScopeHandler {\n  createScope(flags) {\n    return new TypeScriptScope(flags);\n  }\n\n  declareName(name, bindingType, pos) {\n    const scope = this.currentScope();\n\n    if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.exportOnlyBindings.push(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n\n    if (bindingType & BIND_KIND_TYPE) {\n      if (!(bindingType & BIND_KIND_VALUE)) {\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n        this.maybeExportDefined(scope, name);\n      }\n\n      scope.types.push(name);\n    }\n\n    if (bindingType & BIND_FLAGS_TS_ENUM) scope.enums.push(name);\n    if (bindingType & BIND_FLAGS_TS_CONST_ENUM) scope.constEnums.push(name);\n    if (bindingType & BIND_FLAGS_CLASS) scope.classes.push(name);\n  }\n\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (scope.enums.indexOf(name) > -1) {\n      if (bindingType & BIND_FLAGS_TS_ENUM) {\n        const isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);\n        const wasConst = scope.constEnums.indexOf(name) > -1;\n        return isConst !== wasConst;\n      }\n\n      return true;\n    }\n\n    if (bindingType & BIND_FLAGS_CLASS && scope.classes.indexOf(name) > -1) {\n      if (scope.lexical.indexOf(name) > -1) {\n        return !!(bindingType & BIND_KIND_VALUE);\n      } else {\n        return false;\n      }\n    }\n\n    if (bindingType & BIND_KIND_TYPE && scope.types.indexOf(name) > -1) {\n      return true;\n    }\n\n    return super.isRedeclaredInScope(...arguments);\n  }\n\n  checkLocalExport(id) {\n    if (this.scopeStack[0].types.indexOf(id.name) === -1 && this.scopeStack[0].exportOnlyBindings.indexOf(id.name) === -1) {\n      super.checkLocalExport(id);\n    }\n  }\n\n}\n\nconst PARAM = 0b0000,\n      PARAM_YIELD = 0b0001,\n      PARAM_AWAIT = 0b0010,\n      PARAM_RETURN = 0b0100,\n      PARAM_IN = 0b1000;\nclass ProductionParameterHandler {\n  constructor() {\n    this.stacks = [];\n  }\n\n  enter(flags) {\n    this.stacks.push(flags);\n  }\n\n  exit() {\n    this.stacks.pop();\n  }\n\n  currentFlags() {\n    return this.stacks[this.stacks.length - 1];\n  }\n\n  get hasAwait() {\n    return (this.currentFlags() & PARAM_AWAIT) > 0;\n  }\n\n  get hasYield() {\n    return (this.currentFlags() & PARAM_YIELD) > 0;\n  }\n\n  get hasReturn() {\n    return (this.currentFlags() & PARAM_RETURN) > 0;\n  }\n\n  get hasIn() {\n    return (this.currentFlags() & PARAM_IN) > 0;\n  }\n\n}\nfunction functionFlags(isAsync, isGenerator) {\n  return (isAsync ? PARAM_AWAIT : 0) | (isGenerator ? PARAM_YIELD : 0);\n}\n\nfunction nonNull(x) {\n  if (x == null) {\n    throw new Error(`Unexpected ${x} value.`);\n  }\n\n  return x;\n}\n\nfunction assert(x) {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\nconst TSErrors = Object.freeze({\n  ClassMethodHasDeclare: \"Class methods cannot have the 'declare' modifier\",\n  ClassMethodHasReadonly: \"Class methods cannot have the 'readonly' modifier\",\n  DeclareClassFieldHasInitializer: \"'declare' class fields cannot have an initializer\",\n  DuplicateModifier: \"Duplicate modifier: '%0'\",\n  EmptyHeritageClauseType: \"'%0' list cannot be empty.\",\n  IndexSignatureHasAbstract: \"Index signatures cannot have the 'abstract' modifier\",\n  IndexSignatureHasAccessibility: \"Index signatures cannot have an accessibility modifier ('%0')\",\n  IndexSignatureHasStatic: \"Index signatures cannot have the 'static' modifier\",\n  InvalidTupleMemberLabel: \"Tuple members must be labeled with a simple identifier.\",\n  MixedLabeledAndUnlabeledElements: \"Tuple members must all have names or all not have names.\",\n  OptionalTypeBeforeRequired: \"A required element cannot follow an optional element.\",\n  PatternIsOptional: \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  PrivateElementHasAbstract: \"Private elements cannot have the 'abstract' modifier.\",\n  PrivateElementHasAccessibility: \"Private elements cannot have an accessibility modifier ('%0')\",\n  TemplateTypeHasSubstitution: \"Template literal types cannot have any substitution\",\n  TypeAnnotationAfterAssign: \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`\",\n  UnexpectedReadonly: \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n  UnexpectedTypeAnnotation: \"Did not expect a type annotation here.\",\n  UnexpectedTypeCastInParameter: \"Unexpected type cast in parameter position.\",\n  UnsupportedImportTypeArgument: \"Argument in a type import must be a string literal\",\n  UnsupportedParameterPropertyKind: \"A parameter property may not be declared using a binding pattern.\",\n  UnsupportedSignatureParameterKind: \"Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got %0\"\n});\n\nfunction keywordTypeFromName(value) {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n\n    case \"never\":\n      return \"TSNeverKeyword\";\n\n    case \"number\":\n      return \"TSNumberKeyword\";\n\n    case \"object\":\n      return \"TSObjectKeyword\";\n\n    case \"string\":\n      return \"TSStringKeyword\";\n\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n\n    default:\n      return undefined;\n  }\n}\n\nvar typescript = (superClass => class extends superClass {\n  getScopeHandler() {\n    return TypeScriptScopeHandler;\n  }\n\n  tsIsIdentifier() {\n    return this.match(types.name);\n  }\n\n  tsNextTokenCanFollowModifier() {\n    this.next();\n    return !this.hasPrecedingLineBreak() && !this.match(types.parenL) && !this.match(types.parenR) && !this.match(types.colon) && !this.match(types.eq) && !this.match(types.question) && !this.match(types.bang);\n  }\n\n  tsParseModifier(allowedModifiers) {\n    if (!this.match(types.name)) {\n      return undefined;\n    }\n\n    const modifier = this.state.value;\n\n    if (allowedModifiers.indexOf(modifier) !== -1 && this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {\n      return modifier;\n    }\n\n    return undefined;\n  }\n\n  tsParseModifiers(modified, allowedModifiers) {\n    for (;;) {\n      const startPos = this.state.start;\n      const modifier = this.tsParseModifier(allowedModifiers);\n      if (!modifier) break;\n\n      if (Object.hasOwnProperty.call(modified, modifier)) {\n        this.raise(startPos, TSErrors.DuplicateModifier, modifier);\n      }\n\n      modified[modifier] = true;\n    }\n  }\n\n  tsIsListTerminator(kind) {\n    switch (kind) {\n      case \"EnumMembers\":\n      case \"TypeMembers\":\n        return this.match(types.braceR);\n\n      case \"HeritageClauseElement\":\n        return this.match(types.braceL);\n\n      case \"TupleElementTypes\":\n        return this.match(types.bracketR);\n\n      case \"TypeParametersOrArguments\":\n        return this.isRelational(\">\");\n    }\n\n    throw new Error(\"Unreachable\");\n  }\n\n  tsParseList(kind, parseElement) {\n    const result = [];\n\n    while (!this.tsIsListTerminator(kind)) {\n      result.push(parseElement());\n    }\n\n    return result;\n  }\n\n  tsParseDelimitedList(kind, parseElement) {\n    return nonNull(this.tsParseDelimitedListWorker(kind, parseElement, true));\n  }\n\n  tsParseDelimitedListWorker(kind, parseElement, expectSuccess) {\n    const result = [];\n\n    for (;;) {\n      if (this.tsIsListTerminator(kind)) {\n        break;\n      }\n\n      const element = parseElement();\n\n      if (element == null) {\n        return undefined;\n      }\n\n      result.push(element);\n\n      if (this.eat(types.comma)) {\n        continue;\n      }\n\n      if (this.tsIsListTerminator(kind)) {\n        break;\n      }\n\n      if (expectSuccess) {\n        this.expect(types.comma);\n      }\n\n      return undefined;\n    }\n\n    return result;\n  }\n\n  tsParseBracketedList(kind, parseElement, bracket, skipFirstToken) {\n    if (!skipFirstToken) {\n      if (bracket) {\n        this.expect(types.bracketL);\n      } else {\n        this.expectRelational(\"<\");\n      }\n    }\n\n    const result = this.tsParseDelimitedList(kind, parseElement);\n\n    if (bracket) {\n      this.expect(types.bracketR);\n    } else {\n      this.expectRelational(\">\");\n    }\n\n    return result;\n  }\n\n  tsParseImportType() {\n    const node = this.startNode();\n    this.expect(types._import);\n    this.expect(types.parenL);\n\n    if (!this.match(types.string)) {\n      this.raise(this.state.start, TSErrors.UnsupportedImportTypeArgument);\n    }\n\n    node.argument = this.parseExprAtom();\n    this.expect(types.parenR);\n\n    if (this.eat(types.dot)) {\n      node.qualifier = this.tsParseEntityName(true);\n    }\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSImportType\");\n  }\n\n  tsParseEntityName(allowReservedWords) {\n    let entity = this.parseIdentifier();\n\n    while (this.eat(types.dot)) {\n      const node = this.startNodeAtNode(entity);\n      node.left = entity;\n      node.right = this.parseIdentifier(allowReservedWords);\n      entity = this.finishNode(node, \"TSQualifiedName\");\n    }\n\n    return entity;\n  }\n\n  tsParseTypeReference() {\n    const node = this.startNode();\n    node.typeName = this.tsParseEntityName(false);\n\n    if (!this.hasPrecedingLineBreak() && this.isRelational(\"<\")) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSTypeReference\");\n  }\n\n  tsParseThisTypePredicate(lhs) {\n    this.next();\n    const node = this.startNodeAtNode(lhs);\n    node.parameterName = lhs;\n    node.typeAnnotation = this.tsParseTypeAnnotation(false);\n    return this.finishNode(node, \"TSTypePredicate\");\n  }\n\n  tsParseThisTypeNode() {\n    const node = this.startNode();\n    this.next();\n    return this.finishNode(node, \"TSThisType\");\n  }\n\n  tsParseTypeQuery() {\n    const node = this.startNode();\n    this.expect(types._typeof);\n\n    if (this.match(types._import)) {\n      node.exprName = this.tsParseImportType();\n    } else {\n      node.exprName = this.tsParseEntityName(true);\n    }\n\n    return this.finishNode(node, \"TSTypeQuery\");\n  }\n\n  tsParseTypeParameter() {\n    const node = this.startNode();\n    node.name = this.parseIdentifierName(node.start);\n    node.constraint = this.tsEatThenParseType(types._extends);\n    node.default = this.tsEatThenParseType(types.eq);\n    return this.finishNode(node, \"TSTypeParameter\");\n  }\n\n  tsTryParseTypeParameters() {\n    if (this.isRelational(\"<\")) {\n      return this.tsParseTypeParameters();\n    }\n  }\n\n  tsParseTypeParameters() {\n    const node = this.startNode();\n\n    if (this.isRelational(\"<\") || this.match(types.jsxTagStart)) {\n      this.next();\n    } else {\n      this.unexpected();\n    }\n\n    node.params = this.tsParseBracketedList(\"TypeParametersOrArguments\", this.tsParseTypeParameter.bind(this), false, true);\n    return this.finishNode(node, \"TSTypeParameterDeclaration\");\n  }\n\n  tsTryNextParseConstantContext() {\n    if (this.lookahead().type === types._const) {\n      this.next();\n      return this.tsParseTypeReference();\n    }\n\n    return null;\n  }\n\n  tsFillSignature(returnToken, signature) {\n    const returnTokenRequired = returnToken === types.arrow;\n    signature.typeParameters = this.tsTryParseTypeParameters();\n    this.expect(types.parenL);\n    signature.parameters = this.tsParseBindingListForSignature();\n\n    if (returnTokenRequired) {\n      signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n    } else if (this.match(returnToken)) {\n      signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n    }\n  }\n\n  tsParseBindingListForSignature() {\n    return this.parseBindingList(types.parenR, 41).map(pattern => {\n      if (pattern.type !== \"Identifier\" && pattern.type !== \"RestElement\" && pattern.type !== \"ObjectPattern\" && pattern.type !== \"ArrayPattern\") {\n        this.raise(pattern.start, TSErrors.UnsupportedSignatureParameterKind, pattern.type);\n      }\n\n      return pattern;\n    });\n  }\n\n  tsParseTypeMemberSemicolon() {\n    if (!this.eat(types.comma)) {\n      this.semicolon();\n    }\n  }\n\n  tsParseSignatureMember(kind, node) {\n    this.tsFillSignature(types.colon, node);\n    this.tsParseTypeMemberSemicolon();\n    return this.finishNode(node, kind);\n  }\n\n  tsIsUnambiguouslyIndexSignature() {\n    this.next();\n    return this.eat(types.name) && this.match(types.colon);\n  }\n\n  tsTryParseIndexSignature(node) {\n    if (!(this.match(types.bracketL) && this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this)))) {\n      return undefined;\n    }\n\n    this.expect(types.bracketL);\n    const id = this.parseIdentifier();\n    id.typeAnnotation = this.tsParseTypeAnnotation();\n    this.resetEndLocation(id);\n    this.expect(types.bracketR);\n    node.parameters = [id];\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) node.typeAnnotation = type;\n    this.tsParseTypeMemberSemicolon();\n    return this.finishNode(node, \"TSIndexSignature\");\n  }\n\n  tsParsePropertyOrMethodSignature(node, readonly) {\n    if (this.eat(types.question)) node.optional = true;\n    const nodeAny = node;\n\n    if (!readonly && (this.match(types.parenL) || this.isRelational(\"<\"))) {\n      const method = nodeAny;\n      this.tsFillSignature(types.colon, method);\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(method, \"TSMethodSignature\");\n    } else {\n      const property = nodeAny;\n      if (readonly) property.readonly = true;\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) property.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(property, \"TSPropertySignature\");\n    }\n  }\n\n  tsParseTypeMember() {\n    const node = this.startNode();\n\n    if (this.match(types.parenL) || this.isRelational(\"<\")) {\n      return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n    }\n\n    if (this.match(types._new)) {\n      const id = this.startNode();\n      this.next();\n\n      if (this.match(types.parenL) || this.isRelational(\"<\")) {\n        return this.tsParseSignatureMember(\"TSConstructSignatureDeclaration\", node);\n      } else {\n        node.key = this.createIdentifier(id, \"new\");\n        return this.tsParsePropertyOrMethodSignature(node, false);\n      }\n    }\n\n    const readonly = !!this.tsParseModifier([\"readonly\"]);\n    const idx = this.tsTryParseIndexSignature(node);\n\n    if (idx) {\n      if (readonly) node.readonly = true;\n      return idx;\n    }\n\n    this.parsePropertyName(node, false);\n    return this.tsParsePropertyOrMethodSignature(node, readonly);\n  }\n\n  tsParseTypeLiteral() {\n    const node = this.startNode();\n    node.members = this.tsParseObjectTypeMembers();\n    return this.finishNode(node, \"TSTypeLiteral\");\n  }\n\n  tsParseObjectTypeMembers() {\n    this.expect(types.braceL);\n    const members = this.tsParseList(\"TypeMembers\", this.tsParseTypeMember.bind(this));\n    this.expect(types.braceR);\n    return members;\n  }\n\n  tsIsStartOfMappedType() {\n    this.next();\n\n    if (this.eat(types.plusMin)) {\n      return this.isContextual(\"readonly\");\n    }\n\n    if (this.isContextual(\"readonly\")) {\n      this.next();\n    }\n\n    if (!this.match(types.bracketL)) {\n      return false;\n    }\n\n    this.next();\n\n    if (!this.tsIsIdentifier()) {\n      return false;\n    }\n\n    this.next();\n    return this.match(types._in);\n  }\n\n  tsParseMappedTypeParameter() {\n    const node = this.startNode();\n    node.name = this.parseIdentifierName(node.start);\n    node.constraint = this.tsExpectThenParseType(types._in);\n    return this.finishNode(node, \"TSTypeParameter\");\n  }\n\n  tsParseMappedType() {\n    const node = this.startNode();\n    this.expect(types.braceL);\n\n    if (this.match(types.plusMin)) {\n      node.readonly = this.state.value;\n      this.next();\n      this.expectContextual(\"readonly\");\n    } else if (this.eatContextual(\"readonly\")) {\n      node.readonly = true;\n    }\n\n    this.expect(types.bracketL);\n    node.typeParameter = this.tsParseMappedTypeParameter();\n    this.expect(types.bracketR);\n\n    if (this.match(types.plusMin)) {\n      node.optional = this.state.value;\n      this.next();\n      this.expect(types.question);\n    } else if (this.eat(types.question)) {\n      node.optional = true;\n    }\n\n    node.typeAnnotation = this.tsTryParseType();\n    this.semicolon();\n    this.expect(types.braceR);\n    return this.finishNode(node, \"TSMappedType\");\n  }\n\n  tsParseTupleType() {\n    const node = this.startNode();\n    node.elementTypes = this.tsParseBracketedList(\"TupleElementTypes\", this.tsParseTupleElementType.bind(this), true, false);\n    let seenOptionalElement = false;\n    let labeledElements = null;\n    node.elementTypes.forEach(elementNode => {\n      var _labeledElements;\n\n      let {\n        type\n      } = elementNode;\n\n      if (seenOptionalElement && type !== \"TSRestType\" && type !== \"TSOptionalType\" && !(type === \"TSNamedTupleMember\" && elementNode.optional)) {\n        this.raise(elementNode.start, TSErrors.OptionalTypeBeforeRequired);\n      }\n\n      seenOptionalElement = seenOptionalElement || type === \"TSNamedTupleMember\" && elementNode.optional || type === \"TSOptionalType\";\n\n      if (type === \"TSRestType\") {\n        elementNode = elementNode.typeAnnotation;\n        type = elementNode.type;\n      }\n\n      const isLabeled = type === \"TSNamedTupleMember\";\n      labeledElements = (_labeledElements = labeledElements) != null ? _labeledElements : isLabeled;\n\n      if (labeledElements !== isLabeled) {\n        this.raise(elementNode.start, TSErrors.MixedLabeledAndUnlabeledElements);\n      }\n    });\n    return this.finishNode(node, \"TSTupleType\");\n  }\n\n  tsParseTupleElementType() {\n    const {\n      start: startPos,\n      startLoc\n    } = this.state;\n    const rest = this.eat(types.ellipsis);\n    let type = this.tsParseType();\n    const optional = this.eat(types.question);\n    const labeled = this.eat(types.colon);\n\n    if (labeled) {\n      const labeledNode = this.startNodeAtNode(type);\n      labeledNode.optional = optional;\n\n      if (type.type === \"TSTypeReference\" && !type.typeParameters && type.typeName.type === \"Identifier\") {\n        labeledNode.label = type.typeName;\n      } else {\n        this.raise(type.start, TSErrors.InvalidTupleMemberLabel);\n        labeledNode.label = type;\n      }\n\n      labeledNode.elementType = this.tsParseType();\n      type = this.finishNode(labeledNode, \"TSNamedTupleMember\");\n    } else if (optional) {\n      const optionalTypeNode = this.startNodeAtNode(type);\n      optionalTypeNode.typeAnnotation = type;\n      type = this.finishNode(optionalTypeNode, \"TSOptionalType\");\n    }\n\n    if (rest) {\n      const restNode = this.startNodeAt(startPos, startLoc);\n      restNode.typeAnnotation = type;\n      type = this.finishNode(restNode, \"TSRestType\");\n    }\n\n    return type;\n  }\n\n  tsParseParenthesizedType() {\n    const node = this.startNode();\n    this.expect(types.parenL);\n    node.typeAnnotation = this.tsParseType();\n    this.expect(types.parenR);\n    return this.finishNode(node, \"TSParenthesizedType\");\n  }\n\n  tsParseFunctionOrConstructorType(type) {\n    const node = this.startNode();\n\n    if (type === \"TSConstructorType\") {\n      this.expect(types._new);\n    }\n\n    this.tsFillSignature(types.arrow, node);\n    return this.finishNode(node, type);\n  }\n\n  tsParseLiteralTypeNode() {\n    const node = this.startNode();\n\n    node.literal = (() => {\n      switch (this.state.type) {\n        case types.num:\n        case types.bigint:\n        case types.string:\n        case types._true:\n        case types._false:\n          return this.parseExprAtom();\n\n        default:\n          throw this.unexpected();\n      }\n    })();\n\n    return this.finishNode(node, \"TSLiteralType\");\n  }\n\n  tsParseTemplateLiteralType() {\n    const node = this.startNode();\n    const templateNode = this.parseTemplate(false);\n\n    if (templateNode.expressions.length > 0) {\n      this.raise(templateNode.expressions[0].start, TSErrors.TemplateTypeHasSubstitution);\n    }\n\n    node.literal = templateNode;\n    return this.finishNode(node, \"TSLiteralType\");\n  }\n\n  tsParseThisTypeOrThisTypePredicate() {\n    const thisKeyword = this.tsParseThisTypeNode();\n\n    if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) {\n      return this.tsParseThisTypePredicate(thisKeyword);\n    } else {\n      return thisKeyword;\n    }\n  }\n\n  tsParseNonArrayType() {\n    switch (this.state.type) {\n      case types.name:\n      case types._void:\n      case types._null:\n        {\n          const type = this.match(types._void) ? \"TSVoidKeyword\" : this.match(types._null) ? \"TSNullKeyword\" : keywordTypeFromName(this.state.value);\n\n          if (type !== undefined && this.lookaheadCharCode() !== 46) {\n            const node = this.startNode();\n            this.next();\n            return this.finishNode(node, type);\n          }\n\n          return this.tsParseTypeReference();\n        }\n\n      case types.string:\n      case types.num:\n      case types.bigint:\n      case types._true:\n      case types._false:\n        return this.tsParseLiteralTypeNode();\n\n      case types.plusMin:\n        if (this.state.value === \"-\") {\n          const node = this.startNode();\n          const nextToken = this.lookahead();\n\n          if (nextToken.type !== types.num && nextToken.type !== types.bigint) {\n            throw this.unexpected();\n          }\n\n          node.literal = this.parseMaybeUnary();\n          return this.finishNode(node, \"TSLiteralType\");\n        }\n\n        break;\n\n      case types._this:\n        return this.tsParseThisTypeOrThisTypePredicate();\n\n      case types._typeof:\n        return this.tsParseTypeQuery();\n\n      case types._import:\n        return this.tsParseImportType();\n\n      case types.braceL:\n        return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this)) ? this.tsParseMappedType() : this.tsParseTypeLiteral();\n\n      case types.bracketL:\n        return this.tsParseTupleType();\n\n      case types.parenL:\n        return this.tsParseParenthesizedType();\n\n      case types.backQuote:\n        return this.tsParseTemplateLiteralType();\n    }\n\n    throw this.unexpected();\n  }\n\n  tsParseArrayTypeOrHigher() {\n    let type = this.tsParseNonArrayType();\n\n    while (!this.hasPrecedingLineBreak() && this.eat(types.bracketL)) {\n      if (this.match(types.bracketR)) {\n        const node = this.startNodeAtNode(type);\n        node.elementType = type;\n        this.expect(types.bracketR);\n        type = this.finishNode(node, \"TSArrayType\");\n      } else {\n        const node = this.startNodeAtNode(type);\n        node.objectType = type;\n        node.indexType = this.tsParseType();\n        this.expect(types.bracketR);\n        type = this.finishNode(node, \"TSIndexedAccessType\");\n      }\n    }\n\n    return type;\n  }\n\n  tsParseTypeOperator(operator) {\n    const node = this.startNode();\n    this.expectContextual(operator);\n    node.operator = operator;\n    node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n    if (operator === \"readonly\") {\n      this.tsCheckTypeAnnotationForReadOnly(node);\n    }\n\n    return this.finishNode(node, \"TSTypeOperator\");\n  }\n\n  tsCheckTypeAnnotationForReadOnly(node) {\n    switch (node.typeAnnotation.type) {\n      case \"TSTupleType\":\n      case \"TSArrayType\":\n        return;\n\n      default:\n        this.raise(node.start, TSErrors.UnexpectedReadonly);\n    }\n  }\n\n  tsParseInferType() {\n    const node = this.startNode();\n    this.expectContextual(\"infer\");\n    const typeParameter = this.startNode();\n    typeParameter.name = this.parseIdentifierName(typeParameter.start);\n    node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n    return this.finishNode(node, \"TSInferType\");\n  }\n\n  tsParseTypeOperatorOrHigher() {\n    const operator = [\"keyof\", \"unique\", \"readonly\"].find(kw => this.isContextual(kw));\n    return operator ? this.tsParseTypeOperator(operator) : this.isContextual(\"infer\") ? this.tsParseInferType() : this.tsParseArrayTypeOrHigher();\n  }\n\n  tsParseUnionOrIntersectionType(kind, parseConstituentType, operator) {\n    this.eat(operator);\n    let type = parseConstituentType();\n\n    if (this.match(operator)) {\n      const types = [type];\n\n      while (this.eat(operator)) {\n        types.push(parseConstituentType());\n      }\n\n      const node = this.startNodeAtNode(type);\n      node.types = types;\n      type = this.finishNode(node, kind);\n    }\n\n    return type;\n  }\n\n  tsParseIntersectionTypeOrHigher() {\n    return this.tsParseUnionOrIntersectionType(\"TSIntersectionType\", this.tsParseTypeOperatorOrHigher.bind(this), types.bitwiseAND);\n  }\n\n  tsParseUnionTypeOrHigher() {\n    return this.tsParseUnionOrIntersectionType(\"TSUnionType\", this.tsParseIntersectionTypeOrHigher.bind(this), types.bitwiseOR);\n  }\n\n  tsIsStartOfFunctionType() {\n    if (this.isRelational(\"<\")) {\n      return true;\n    }\n\n    return this.match(types.parenL) && this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this));\n  }\n\n  tsSkipParameterStart() {\n    if (this.match(types.name) || this.match(types._this)) {\n      this.next();\n      return true;\n    }\n\n    if (this.match(types.braceL)) {\n      let braceStackCounter = 1;\n      this.next();\n\n      while (braceStackCounter > 0) {\n        if (this.match(types.braceL)) {\n          ++braceStackCounter;\n        } else if (this.match(types.braceR)) {\n          --braceStackCounter;\n        }\n\n        this.next();\n      }\n\n      return true;\n    }\n\n    if (this.match(types.bracketL)) {\n      let braceStackCounter = 1;\n      this.next();\n\n      while (braceStackCounter > 0) {\n        if (this.match(types.bracketL)) {\n          ++braceStackCounter;\n        } else if (this.match(types.bracketR)) {\n          --braceStackCounter;\n        }\n\n        this.next();\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  tsIsUnambiguouslyStartOfFunctionType() {\n    this.next();\n\n    if (this.match(types.parenR) || this.match(types.ellipsis)) {\n      return true;\n    }\n\n    if (this.tsSkipParameterStart()) {\n      if (this.match(types.colon) || this.match(types.comma) || this.match(types.question) || this.match(types.eq)) {\n        return true;\n      }\n\n      if (this.match(types.parenR)) {\n        this.next();\n\n        if (this.match(types.arrow)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  tsParseTypeOrTypePredicateAnnotation(returnToken) {\n    return this.tsInType(() => {\n      const t = this.startNode();\n      this.expect(returnToken);\n      const asserts = this.tsTryParse(this.tsParseTypePredicateAsserts.bind(this));\n\n      if (asserts && this.match(types._this)) {\n        let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n\n        if (thisTypePredicate.type === \"TSThisType\") {\n          const node = this.startNodeAtNode(t);\n          node.parameterName = thisTypePredicate;\n          node.asserts = true;\n          thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n        } else {\n          thisTypePredicate.asserts = true;\n        }\n\n        t.typeAnnotation = thisTypePredicate;\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      }\n\n      const typePredicateVariable = this.tsIsIdentifier() && this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n\n      if (!typePredicateVariable) {\n        if (!asserts) {\n          return this.tsParseTypeAnnotation(false, t);\n        }\n\n        const node = this.startNodeAtNode(t);\n        node.parameterName = this.parseIdentifier();\n        node.asserts = asserts;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      }\n\n      const type = this.tsParseTypeAnnotation(false);\n      const node = this.startNodeAtNode(t);\n      node.parameterName = typePredicateVariable;\n      node.typeAnnotation = type;\n      node.asserts = asserts;\n      t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    });\n  }\n\n  tsTryParseTypeOrTypePredicateAnnotation() {\n    return this.match(types.colon) ? this.tsParseTypeOrTypePredicateAnnotation(types.colon) : undefined;\n  }\n\n  tsTryParseTypeAnnotation() {\n    return this.match(types.colon) ? this.tsParseTypeAnnotation() : undefined;\n  }\n\n  tsTryParseType() {\n    return this.tsEatThenParseType(types.colon);\n  }\n\n  tsParseTypePredicatePrefix() {\n    const id = this.parseIdentifier();\n\n    if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) {\n      this.next();\n      return id;\n    }\n  }\n\n  tsParseTypePredicateAsserts() {\n    if (!this.match(types.name) || this.state.value !== \"asserts\" || this.hasPrecedingLineBreak()) {\n      return false;\n    }\n\n    const containsEsc = this.state.containsEsc;\n    this.next();\n\n    if (!this.match(types.name) && !this.match(types._this)) {\n      return false;\n    }\n\n    if (containsEsc) {\n      this.raise(this.state.lastTokStart, ErrorMessages.InvalidEscapedReservedWord, \"asserts\");\n    }\n\n    return true;\n  }\n\n  tsParseTypeAnnotation(eatColon = true, t = this.startNode()) {\n    this.tsInType(() => {\n      if (eatColon) this.expect(types.colon);\n      t.typeAnnotation = this.tsParseType();\n    });\n    return this.finishNode(t, \"TSTypeAnnotation\");\n  }\n\n  tsParseType() {\n    assert(this.state.inType);\n    const type = this.tsParseNonConditionalType();\n\n    if (this.hasPrecedingLineBreak() || !this.eat(types._extends)) {\n      return type;\n    }\n\n    const node = this.startNodeAtNode(type);\n    node.checkType = type;\n    node.extendsType = this.tsParseNonConditionalType();\n    this.expect(types.question);\n    node.trueType = this.tsParseType();\n    this.expect(types.colon);\n    node.falseType = this.tsParseType();\n    return this.finishNode(node, \"TSConditionalType\");\n  }\n\n  tsParseNonConditionalType() {\n    if (this.tsIsStartOfFunctionType()) {\n      return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n    }\n\n    if (this.match(types._new)) {\n      return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n    }\n\n    return this.tsParseUnionTypeOrHigher();\n  }\n\n  tsParseTypeAssertion() {\n    const node = this.startNode();\n\n    const _const = this.tsTryNextParseConstantContext();\n\n    node.typeAnnotation = _const || this.tsNextThenParseType();\n    this.expectRelational(\">\");\n    node.expression = this.parseMaybeUnary();\n    return this.finishNode(node, \"TSTypeAssertion\");\n  }\n\n  tsParseHeritageClause(descriptor) {\n    const originalStart = this.state.start;\n    const delimitedList = this.tsParseDelimitedList(\"HeritageClauseElement\", this.tsParseExpressionWithTypeArguments.bind(this));\n\n    if (!delimitedList.length) {\n      this.raise(originalStart, TSErrors.EmptyHeritageClauseType, descriptor);\n    }\n\n    return delimitedList;\n  }\n\n  tsParseExpressionWithTypeArguments() {\n    const node = this.startNode();\n    node.expression = this.tsParseEntityName(false);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSExpressionWithTypeArguments\");\n  }\n\n  tsParseInterfaceDeclaration(node) {\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, BIND_TS_INTERFACE, undefined, \"typescript interface declaration\");\n    node.typeParameters = this.tsTryParseTypeParameters();\n\n    if (this.eat(types._extends)) {\n      node.extends = this.tsParseHeritageClause(\"extends\");\n    }\n\n    const body = this.startNode();\n    body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n    node.body = this.finishNode(body, \"TSInterfaceBody\");\n    return this.finishNode(node, \"TSInterfaceDeclaration\");\n  }\n\n  tsParseTypeAliasDeclaration(node) {\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, BIND_TS_TYPE, undefined, \"typescript type alias\");\n    node.typeParameters = this.tsTryParseTypeParameters();\n    node.typeAnnotation = this.tsExpectThenParseType(types.eq);\n    this.semicolon();\n    return this.finishNode(node, \"TSTypeAliasDeclaration\");\n  }\n\n  tsInNoContext(cb) {\n    const oldContext = this.state.context;\n    this.state.context = [oldContext[0]];\n\n    try {\n      return cb();\n    } finally {\n      this.state.context = oldContext;\n    }\n  }\n\n  tsInType(cb) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n\n    try {\n      return cb();\n    } finally {\n      this.state.inType = oldInType;\n    }\n  }\n\n  tsEatThenParseType(token) {\n    return !this.match(token) ? undefined : this.tsNextThenParseType();\n  }\n\n  tsExpectThenParseType(token) {\n    return this.tsDoThenParseType(() => this.expect(token));\n  }\n\n  tsNextThenParseType() {\n    return this.tsDoThenParseType(() => this.next());\n  }\n\n  tsDoThenParseType(cb) {\n    return this.tsInType(() => {\n      cb();\n      return this.tsParseType();\n    });\n  }\n\n  tsParseEnumMember() {\n    const node = this.startNode();\n    node.id = this.match(types.string) ? this.parseExprAtom() : this.parseIdentifier(true);\n\n    if (this.eat(types.eq)) {\n      node.initializer = this.parseMaybeAssignAllowIn();\n    }\n\n    return this.finishNode(node, \"TSEnumMember\");\n  }\n\n  tsParseEnumDeclaration(node, isConst) {\n    if (isConst) node.const = true;\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, isConst ? BIND_TS_CONST_ENUM : BIND_TS_ENUM, undefined, \"typescript enum declaration\");\n    this.expect(types.braceL);\n    node.members = this.tsParseDelimitedList(\"EnumMembers\", this.tsParseEnumMember.bind(this));\n    this.expect(types.braceR);\n    return this.finishNode(node, \"TSEnumDeclaration\");\n  }\n\n  tsParseModuleBlock() {\n    const node = this.startNode();\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(types.braceL);\n    this.parseBlockOrModuleBlockBody(node.body = [], undefined, true, types.braceR);\n    this.scope.exit();\n    return this.finishNode(node, \"TSModuleBlock\");\n  }\n\n  tsParseModuleOrNamespaceDeclaration(node, nested = false) {\n    node.id = this.parseIdentifier();\n\n    if (!nested) {\n      this.checkLVal(node.id, BIND_TS_NAMESPACE, null, \"module or namespace declaration\");\n    }\n\n    if (this.eat(types.dot)) {\n      const inner = this.startNode();\n      this.tsParseModuleOrNamespaceDeclaration(inner, true);\n      node.body = inner;\n    } else {\n      this.scope.enter(SCOPE_TS_MODULE);\n      this.prodParam.enter(PARAM);\n      node.body = this.tsParseModuleBlock();\n      this.prodParam.exit();\n      this.scope.exit();\n    }\n\n    return this.finishNode(node, \"TSModuleDeclaration\");\n  }\n\n  tsParseAmbientExternalModuleDeclaration(node) {\n    if (this.isContextual(\"global\")) {\n      node.global = true;\n      node.id = this.parseIdentifier();\n    } else if (this.match(types.string)) {\n      node.id = this.parseExprAtom();\n    } else {\n      this.unexpected();\n    }\n\n    if (this.match(types.braceL)) {\n      this.scope.enter(SCOPE_TS_MODULE);\n      this.prodParam.enter(PARAM);\n      node.body = this.tsParseModuleBlock();\n      this.prodParam.exit();\n      this.scope.exit();\n    } else {\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"TSModuleDeclaration\");\n  }\n\n  tsParseImportEqualsDeclaration(node, isExport) {\n    node.isExport = isExport || false;\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, BIND_LEXICAL, undefined, \"import equals declaration\");\n    this.expect(types.eq);\n    node.moduleReference = this.tsParseModuleReference();\n    this.semicolon();\n    return this.finishNode(node, \"TSImportEqualsDeclaration\");\n  }\n\n  tsIsExternalModuleReference() {\n    return this.isContextual(\"require\") && this.lookaheadCharCode() === 40;\n  }\n\n  tsParseModuleReference() {\n    return this.tsIsExternalModuleReference() ? this.tsParseExternalModuleReference() : this.tsParseEntityName(false);\n  }\n\n  tsParseExternalModuleReference() {\n    const node = this.startNode();\n    this.expectContextual(\"require\");\n    this.expect(types.parenL);\n\n    if (!this.match(types.string)) {\n      throw this.unexpected();\n    }\n\n    node.expression = this.parseExprAtom();\n    this.expect(types.parenR);\n    return this.finishNode(node, \"TSExternalModuleReference\");\n  }\n\n  tsLookAhead(f) {\n    const state = this.state.clone();\n    const res = f();\n    this.state = state;\n    return res;\n  }\n\n  tsTryParseAndCatch(f) {\n    const result = this.tryParse(abort => f() || abort());\n    if (result.aborted || !result.node) return undefined;\n    if (result.error) this.state = result.failState;\n    return result.node;\n  }\n\n  tsTryParse(f) {\n    const state = this.state.clone();\n    const result = f();\n\n    if (result !== undefined && result !== false) {\n      return result;\n    } else {\n      this.state = state;\n      return undefined;\n    }\n  }\n\n  tsTryParseDeclare(nany) {\n    if (this.isLineTerminator()) {\n      return;\n    }\n\n    let starttype = this.state.type;\n    let kind;\n\n    if (this.isContextual(\"let\")) {\n      starttype = types._var;\n      kind = \"let\";\n    }\n\n    switch (starttype) {\n      case types._function:\n        return this.parseFunctionStatement(nany, false, true);\n\n      case types._class:\n        nany.declare = true;\n        return this.parseClass(nany, true, false);\n\n      case types._const:\n        if (this.match(types._const) && this.isLookaheadContextual(\"enum\")) {\n          this.expect(types._const);\n          this.expectContextual(\"enum\");\n          return this.tsParseEnumDeclaration(nany, true);\n        }\n\n      case types._var:\n        kind = kind || this.state.value;\n        return this.parseVarStatement(nany, kind);\n\n      case types.name:\n        {\n          const value = this.state.value;\n\n          if (value === \"global\") {\n            return this.tsParseAmbientExternalModuleDeclaration(nany);\n          } else {\n            return this.tsParseDeclaration(nany, value, true);\n          }\n        }\n    }\n  }\n\n  tsTryParseExportDeclaration() {\n    return this.tsParseDeclaration(this.startNode(), this.state.value, true);\n  }\n\n  tsParseExpressionStatement(node, expr) {\n    switch (expr.name) {\n      case \"declare\":\n        {\n          const declaration = this.tsTryParseDeclare(node);\n\n          if (declaration) {\n            declaration.declare = true;\n            return declaration;\n          }\n\n          break;\n        }\n\n      case \"global\":\n        if (this.match(types.braceL)) {\n          this.scope.enter(SCOPE_TS_MODULE);\n          this.prodParam.enter(PARAM);\n          const mod = node;\n          mod.global = true;\n          mod.id = expr;\n          mod.body = this.tsParseModuleBlock();\n          this.scope.exit();\n          this.prodParam.exit();\n          return this.finishNode(mod, \"TSModuleDeclaration\");\n        }\n\n        break;\n\n      default:\n        return this.tsParseDeclaration(node, expr.name, false);\n    }\n  }\n\n  tsParseDeclaration(node, value, next) {\n    switch (value) {\n      case \"abstract\":\n        if (this.tsCheckLineTerminatorAndMatch(types._class, next)) {\n          const cls = node;\n          cls.abstract = true;\n\n          if (next) {\n            this.next();\n\n            if (!this.match(types._class)) {\n              this.unexpected(null, types._class);\n            }\n          }\n\n          return this.parseClass(cls, true, false);\n        }\n\n        break;\n\n      case \"enum\":\n        if (next || this.match(types.name)) {\n          if (next) this.next();\n          return this.tsParseEnumDeclaration(node, false);\n        }\n\n        break;\n\n      case \"interface\":\n        if (this.tsCheckLineTerminatorAndMatch(types.name, next)) {\n          if (next) this.next();\n          return this.tsParseInterfaceDeclaration(node);\n        }\n\n        break;\n\n      case \"module\":\n        if (next) this.next();\n\n        if (this.match(types.string)) {\n          return this.tsParseAmbientExternalModuleDeclaration(node);\n        } else if (this.tsCheckLineTerminatorAndMatch(types.name, next)) {\n          return this.tsParseModuleOrNamespaceDeclaration(node);\n        }\n\n        break;\n\n      case \"namespace\":\n        if (this.tsCheckLineTerminatorAndMatch(types.name, next)) {\n          if (next) this.next();\n          return this.tsParseModuleOrNamespaceDeclaration(node);\n        }\n\n        break;\n\n      case \"type\":\n        if (this.tsCheckLineTerminatorAndMatch(types.name, next)) {\n          if (next) this.next();\n          return this.tsParseTypeAliasDeclaration(node);\n        }\n\n        break;\n    }\n  }\n\n  tsCheckLineTerminatorAndMatch(tokenType, next) {\n    return (next || this.match(tokenType)) && !this.isLineTerminator();\n  }\n\n  tsTryParseGenericAsyncArrowFunction(startPos, startLoc) {\n    if (!this.isRelational(\"<\")) {\n      return undefined;\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldYieldPos = this.state.yieldPos;\n    const oldAwaitPos = this.state.awaitPos;\n    this.state.maybeInArrowParameters = true;\n    this.state.yieldPos = -1;\n    this.state.awaitPos = -1;\n    const res = this.tsTryParseAndCatch(() => {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.typeParameters = this.tsParseTypeParameters();\n      super.parseFunctionParams(node);\n      node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n      this.expect(types.arrow);\n      return node;\n    });\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.yieldPos = oldYieldPos;\n    this.state.awaitPos = oldAwaitPos;\n\n    if (!res) {\n      return undefined;\n    }\n\n    return this.parseArrowExpression(res, null, true);\n  }\n\n  tsParseTypeArguments() {\n    const node = this.startNode();\n    node.params = this.tsInType(() => this.tsInNoContext(() => {\n      this.expectRelational(\"<\");\n      return this.tsParseDelimitedList(\"TypeParametersOrArguments\", this.tsParseType.bind(this));\n    }));\n    this.state.exprAllowed = false;\n    this.expectRelational(\">\");\n    return this.finishNode(node, \"TSTypeParameterInstantiation\");\n  }\n\n  tsIsDeclarationStart() {\n    if (this.match(types.name)) {\n      switch (this.state.value) {\n        case \"abstract\":\n        case \"declare\":\n        case \"enum\":\n        case \"interface\":\n        case \"module\":\n        case \"namespace\":\n        case \"type\":\n          return true;\n      }\n    }\n\n    return false;\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.tsIsDeclarationStart()) return false;\n    return super.isExportDefaultSpecifier();\n  }\n\n  parseAssignableListItem(allowModifiers, decorators) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let accessibility;\n    let readonly = false;\n\n    if (allowModifiers) {\n      accessibility = this.parseAccessModifier();\n      readonly = !!this.tsParseModifier([\"readonly\"]);\n    }\n\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n\n    if (accessibility || readonly) {\n      const pp = this.startNodeAt(startPos, startLoc);\n\n      if (decorators.length) {\n        pp.decorators = decorators;\n      }\n\n      if (accessibility) pp.accessibility = accessibility;\n      if (readonly) pp.readonly = readonly;\n\n      if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n        this.raise(pp.start, TSErrors.UnsupportedParameterPropertyKind);\n      }\n\n      pp.parameter = elt;\n      return this.finishNode(pp, \"TSParameterProperty\");\n    }\n\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n\n    return elt;\n  }\n\n  parseFunctionBodyAndFinish(node, type, isMethod = false) {\n    if (this.match(types.colon)) {\n      node.returnType = this.tsParseTypeOrTypePredicateAnnotation(types.colon);\n    }\n\n    const bodilessType = type === \"FunctionDeclaration\" ? \"TSDeclareFunction\" : type === \"ClassMethod\" ? \"TSDeclareMethod\" : undefined;\n\n    if (bodilessType && !this.match(types.braceL) && this.isLineTerminator()) {\n      this.finishNode(node, bodilessType);\n      return;\n    }\n\n    super.parseFunctionBodyAndFinish(node, type, isMethod);\n  }\n\n  registerFunctionStatementId(node) {\n    if (!node.body && node.id) {\n      this.checkLVal(node.id, BIND_TS_AMBIENT, null, \"function name\");\n    } else {\n      super.registerFunctionStatementId(...arguments);\n    }\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    if (!this.hasPrecedingLineBreak() && this.match(types.bang)) {\n      this.state.exprAllowed = false;\n      this.next();\n      const nonNullExpression = this.startNodeAt(startPos, startLoc);\n      nonNullExpression.expression = base;\n      return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n    }\n\n    if (this.isRelational(\"<\")) {\n      const result = this.tsTryParseAndCatch(() => {\n        if (!noCalls && this.atPossibleAsyncArrow(base)) {\n          const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(startPos, startLoc);\n\n          if (asyncArrowFn) {\n            return asyncArrowFn;\n          }\n        }\n\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n        const typeArguments = this.tsParseTypeArguments();\n\n        if (typeArguments) {\n          if (!noCalls && this.eat(types.parenL)) {\n            node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n            node.typeParameters = typeArguments;\n            return this.finishCallExpression(node, state.optionalChainMember);\n          } else if (this.match(types.backQuote)) {\n            const result = this.parseTaggedTemplateExpression(base, startPos, startLoc, state);\n            result.typeParameters = typeArguments;\n            return result;\n          }\n        }\n\n        this.unexpected();\n      });\n      if (result) return result;\n    }\n\n    return super.parseSubscript(base, startPos, startLoc, noCalls, state);\n  }\n\n  parseNewArguments(node) {\n    if (this.isRelational(\"<\")) {\n      const typeParameters = this.tsTryParseAndCatch(() => {\n        const args = this.tsParseTypeArguments();\n        if (!this.match(types.parenL)) this.unexpected();\n        return args;\n      });\n\n      if (typeParameters) {\n        node.typeParameters = typeParameters;\n      }\n    }\n\n    super.parseNewArguments(node);\n  }\n\n  parseExprOp(left, leftStartPos, leftStartLoc, minPrec) {\n    if (nonNull(types._in.binop) > minPrec && !this.hasPrecedingLineBreak() && this.isContextual(\"as\")) {\n      const node = this.startNodeAt(leftStartPos, leftStartLoc);\n      node.expression = left;\n\n      const _const = this.tsTryNextParseConstantContext();\n\n      if (_const) {\n        node.typeAnnotation = _const;\n      } else {\n        node.typeAnnotation = this.tsNextThenParseType();\n      }\n\n      this.finishNode(node, \"TSAsExpression\");\n      this.reScan_lt_gt();\n      return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n    }\n\n    return super.parseExprOp(left, leftStartPos, leftStartLoc, minPrec);\n  }\n\n  checkReservedWord(word, startLoc, checkKeywords, isBinding) {}\n\n  checkDuplicateExports() {}\n\n  parseImport(node) {\n    if (this.match(types.name) || this.match(types.star) || this.match(types.braceL)) {\n      const ahead = this.lookahead();\n\n      if (this.match(types.name) && ahead.type === types.eq) {\n        return this.tsParseImportEqualsDeclaration(node);\n      }\n\n      if (this.isContextual(\"type\") && ahead.type !== types.comma && !(ahead.type === types.name && ahead.value === \"from\")) {\n        node.importKind = \"type\";\n        this.next();\n      } else {\n        node.importKind = \"value\";\n      }\n    }\n\n    const importNode = super.parseImport(node);\n\n    if (importNode.importKind === \"type\" && importNode.specifiers.length > 1 && importNode.specifiers[0].type === \"ImportDefaultSpecifier\") {\n      this.raise(importNode.start, \"A type-only import can specify a default import or named bindings, but not both.\");\n    }\n\n    return importNode;\n  }\n\n  parseExport(node) {\n    if (this.match(types._import)) {\n      this.expect(types._import);\n      return this.tsParseImportEqualsDeclaration(node, true);\n    } else if (this.eat(types.eq)) {\n      const assign = node;\n      assign.expression = this.parseExpression();\n      this.semicolon();\n      return this.finishNode(assign, \"TSExportAssignment\");\n    } else if (this.eatContextual(\"as\")) {\n      const decl = node;\n      this.expectContextual(\"namespace\");\n      decl.id = this.parseIdentifier();\n      this.semicolon();\n      return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n    } else {\n      if (this.isContextual(\"type\") && this.lookahead().type === types.braceL) {\n        this.next();\n        node.exportKind = \"type\";\n      } else {\n        node.exportKind = \"value\";\n      }\n\n      return super.parseExport(node);\n    }\n  }\n\n  isAbstractClass() {\n    return this.isContextual(\"abstract\") && this.lookahead().type === types._class;\n  }\n\n  parseExportDefaultExpression() {\n    if (this.isAbstractClass()) {\n      const cls = this.startNode();\n      this.next();\n      this.parseClass(cls, true, true);\n      cls.abstract = true;\n      return cls;\n    }\n\n    if (this.state.value === \"interface\") {\n      const result = this.tsParseDeclaration(this.startNode(), this.state.value, true);\n      if (result) return result;\n    }\n\n    return super.parseExportDefaultExpression();\n  }\n\n  parseStatementContent(context, topLevel) {\n    if (this.state.type === types._const) {\n      const ahead = this.lookahead();\n\n      if (ahead.type === types.name && ahead.value === \"enum\") {\n        const node = this.startNode();\n        this.expect(types._const);\n        this.expectContextual(\"enum\");\n        return this.tsParseEnumDeclaration(node, true);\n      }\n    }\n\n    return super.parseStatementContent(context, topLevel);\n  }\n\n  parseAccessModifier() {\n    return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n  }\n\n  parseClassMember(classBody, member, state, constructorAllowsSuper) {\n    this.tsParseModifiers(member, [\"declare\"]);\n    const accessibility = this.parseAccessModifier();\n    if (accessibility) member.accessibility = accessibility;\n    this.tsParseModifiers(member, [\"declare\"]);\n    super.parseClassMember(classBody, member, state, constructorAllowsSuper);\n  }\n\n  parseClassMemberWithIsStatic(classBody, member, state, isStatic, constructorAllowsSuper) {\n    this.tsParseModifiers(member, [\"abstract\", \"readonly\", \"declare\"]);\n    const idx = this.tsTryParseIndexSignature(member);\n\n    if (idx) {\n      classBody.body.push(idx);\n\n      if (member.abstract) {\n        this.raise(member.start, TSErrors.IndexSignatureHasAbstract);\n      }\n\n      if (isStatic) {\n        this.raise(member.start, TSErrors.IndexSignatureHasStatic);\n      }\n\n      if (member.accessibility) {\n        this.raise(member.start, TSErrors.IndexSignatureHasAccessibility, member.accessibility);\n      }\n\n      return;\n    }\n\n    super.parseClassMemberWithIsStatic(classBody, member, state, isStatic, constructorAllowsSuper);\n  }\n\n  parsePostMemberNameModifiers(methodOrProp) {\n    const optional = this.eat(types.question);\n    if (optional) methodOrProp.optional = true;\n\n    if (methodOrProp.readonly && this.match(types.parenL)) {\n      this.raise(methodOrProp.start, TSErrors.ClassMethodHasReadonly);\n    }\n\n    if (methodOrProp.declare && this.match(types.parenL)) {\n      this.raise(methodOrProp.start, TSErrors.ClassMethodHasDeclare);\n    }\n  }\n\n  parseExpressionStatement(node, expr) {\n    const decl = expr.type === \"Identifier\" ? this.tsParseExpressionStatement(node, expr) : undefined;\n    return decl || super.parseExpressionStatement(node, expr);\n  }\n\n  shouldParseExportDeclaration() {\n    if (this.tsIsDeclarationStart()) return true;\n    return super.shouldParseExportDeclaration();\n  }\n\n  parseConditional(expr, startPos, startLoc, refNeedsArrowPos) {\n    if (!refNeedsArrowPos || !this.match(types.question)) {\n      return super.parseConditional(expr, startPos, startLoc, refNeedsArrowPos);\n    }\n\n    const result = this.tryParse(() => super.parseConditional(expr, startPos, startLoc));\n\n    if (!result.node) {\n      refNeedsArrowPos.start = result.error.pos || this.state.start;\n      return expr;\n    }\n\n    if (result.error) this.state = result.failState;\n    return result.node;\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    node = super.parseParenItem(node, startPos, startLoc);\n\n    if (this.eat(types.question)) {\n      node.optional = true;\n      this.resetEndLocation(node);\n    }\n\n    if (this.match(types.colon)) {\n      const typeCastNode = this.startNodeAt(startPos, startLoc);\n      typeCastNode.expression = node;\n      typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n      return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n    }\n\n    return node;\n  }\n\n  parseExportDeclaration(node) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const isDeclare = this.eatContextual(\"declare\");\n    let declaration;\n\n    if (this.match(types.name)) {\n      declaration = this.tsTryParseExportDeclaration();\n    }\n\n    if (!declaration) {\n      declaration = super.parseExportDeclaration(node);\n    }\n\n    if (declaration && (declaration.type === \"TSInterfaceDeclaration\" || declaration.type === \"TSTypeAliasDeclaration\" || isDeclare)) {\n      node.exportKind = \"type\";\n    }\n\n    if (declaration && isDeclare) {\n      this.resetStartLocation(declaration, startPos, startLoc);\n      declaration.declare = true;\n    }\n\n    return declaration;\n  }\n\n  parseClassId(node, isStatement, optionalId) {\n    if ((!isStatement || optionalId) && this.isContextual(\"implements\")) {\n      return;\n    }\n\n    super.parseClassId(node, isStatement, optionalId, node.declare ? BIND_TS_AMBIENT : BIND_CLASS);\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) node.typeParameters = typeParameters;\n  }\n\n  parseClassPropertyAnnotation(node) {\n    if (!node.optional && this.eat(types.bang)) {\n      node.definite = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) node.typeAnnotation = type;\n  }\n\n  parseClassProperty(node) {\n    this.parseClassPropertyAnnotation(node);\n\n    if (node.declare && this.match(types.equal)) {\n      this.raise(this.state.start, TSErrors.DeclareClassFieldHasInitializer);\n    }\n\n    return super.parseClassProperty(node);\n  }\n\n  parseClassPrivateProperty(node) {\n    if (node.abstract) {\n      this.raise(node.start, TSErrors.PrivateElementHasAbstract);\n    }\n\n    if (node.accessibility) {\n      this.raise(node.start, TSErrors.PrivateElementHasAccessibility, node.accessibility);\n    }\n\n    this.parseClassPropertyAnnotation(node);\n    return super.parseClassPrivateProperty(node);\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) method.typeParameters = typeParameters;\n    super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) method.typeParameters = typeParameters;\n    super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n  }\n\n  parseClassSuper(node) {\n    super.parseClassSuper(node);\n\n    if (node.superClass && this.isRelational(\"<\")) {\n      node.superTypeParameters = this.tsParseTypeArguments();\n    }\n\n    if (this.eatContextual(\"implements\")) {\n      node.implements = this.tsParseHeritageClause(\"implements\");\n    }\n  }\n\n  parseObjPropValue(prop, ...args) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) prop.typeParameters = typeParameters;\n    super.parseObjPropValue(prop, ...args);\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) node.typeParameters = typeParameters;\n    super.parseFunctionParams(node, allowModifiers);\n  }\n\n  parseVarId(decl, kind) {\n    super.parseVarId(decl, kind);\n\n    if (decl.id.type === \"Identifier\" && this.eat(types.bang)) {\n      decl.definite = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n\n    if (type) {\n      decl.id.typeAnnotation = type;\n      this.resetEndLocation(decl.id);\n    }\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    if (this.match(types.colon)) {\n      node.returnType = this.tsParseTypeAnnotation();\n    }\n\n    return super.parseAsyncArrowFromCallExpression(node, call);\n  }\n\n  parseMaybeAssign(...args) {\n    var _jsx, _jsx2, _typeCast, _jsx3, _typeCast2, _jsx4, _typeCast3;\n\n    let state;\n    let jsx;\n    let typeCast;\n\n    if (this.match(types.jsxTagStart)) {\n      state = this.state.clone();\n      jsx = this.tryParse(() => super.parseMaybeAssign(...args), state);\n      if (!jsx.error) return jsx.node;\n      const {\n        context\n      } = this.state;\n\n      if (context[context.length - 1] === types$1.j_oTag) {\n        context.length -= 2;\n      } else if (context[context.length - 1] === types$1.j_expr) {\n        context.length -= 1;\n      }\n    }\n\n    if (!((_jsx = jsx) == null ? void 0 : _jsx.error) && !this.isRelational(\"<\")) {\n      return super.parseMaybeAssign(...args);\n    }\n\n    let typeParameters;\n    state = state || this.state.clone();\n    const arrow = this.tryParse(abort => {\n      var _typeParameters;\n\n      typeParameters = this.tsParseTypeParameters();\n      const expr = super.parseMaybeAssign(...args);\n\n      if (expr.type !== \"ArrowFunctionExpression\" || expr.extra && expr.extra.parenthesized) {\n        abort();\n      }\n\n      if (((_typeParameters = typeParameters) == null ? void 0 : _typeParameters.params.length) !== 0) {\n        this.resetStartLocationFromNode(expr, typeParameters);\n      }\n\n      expr.typeParameters = typeParameters;\n      return expr;\n    }, state);\n    if (!arrow.error && !arrow.aborted) return arrow.node;\n\n    if (!jsx) {\n      assert(!this.hasPlugin(\"jsx\"));\n      typeCast = this.tryParse(() => super.parseMaybeAssign(...args), state);\n      if (!typeCast.error) return typeCast.node;\n    }\n\n    if ((_jsx2 = jsx) == null ? void 0 : _jsx2.node) {\n      this.state = jsx.failState;\n      return jsx.node;\n    }\n\n    if (arrow.node) {\n      this.state = arrow.failState;\n      return arrow.node;\n    }\n\n    if ((_typeCast = typeCast) == null ? void 0 : _typeCast.node) {\n      this.state = typeCast.failState;\n      return typeCast.node;\n    }\n\n    if ((_jsx3 = jsx) == null ? void 0 : _jsx3.thrown) throw jsx.error;\n    if (arrow.thrown) throw arrow.error;\n    if ((_typeCast2 = typeCast) == null ? void 0 : _typeCast2.thrown) throw typeCast.error;\n    throw ((_jsx4 = jsx) == null ? void 0 : _jsx4.error) || arrow.error || ((_typeCast3 = typeCast) == null ? void 0 : _typeCast3.error);\n  }\n\n  parseMaybeUnary(refExpressionErrors) {\n    if (!this.hasPlugin(\"jsx\") && this.isRelational(\"<\")) {\n      return this.tsParseTypeAssertion();\n    } else {\n      return super.parseMaybeUnary(refExpressionErrors);\n    }\n  }\n\n  parseArrow(node) {\n    if (this.match(types.colon)) {\n      const result = this.tryParse(abort => {\n        const returnType = this.tsParseTypeOrTypePredicateAnnotation(types.colon);\n        if (this.canInsertSemicolon() || !this.match(types.arrow)) abort();\n        return returnType;\n      });\n      if (result.aborted) return;\n\n      if (!result.thrown) {\n        if (result.error) this.state = result.failState;\n        node.returnType = result.node;\n      }\n    }\n\n    return super.parseArrow(node);\n  }\n\n  parseAssignableListItemTypes(param) {\n    if (this.eat(types.question)) {\n      if (param.type !== \"Identifier\") {\n        this.raise(param.start, TSErrors.PatternIsOptional);\n      }\n\n      param.optional = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) param.typeAnnotation = type;\n    this.resetEndLocation(param);\n    return param;\n  }\n\n  toAssignable(node) {\n    switch (node.type) {\n      case \"TSTypeCastExpression\":\n        return super.toAssignable(this.typeCastToParameter(node));\n\n      case \"TSParameterProperty\":\n        return super.toAssignable(node);\n\n      case \"TSAsExpression\":\n      case \"TSNonNullExpression\":\n      case \"TSTypeAssertion\":\n        node.expression = this.toAssignable(node.expression);\n        return node;\n\n      default:\n        return super.toAssignable(node);\n    }\n  }\n\n  checkLVal(expr, bindingType = BIND_NONE, checkClashes, contextDescription) {\n    switch (expr.type) {\n      case \"TSTypeCastExpression\":\n        return;\n\n      case \"TSParameterProperty\":\n        this.checkLVal(expr.parameter, bindingType, checkClashes, \"parameter property\");\n        return;\n\n      case \"TSAsExpression\":\n      case \"TSNonNullExpression\":\n      case \"TSTypeAssertion\":\n        this.checkLVal(expr.expression, bindingType, checkClashes, contextDescription);\n        return;\n\n      default:\n        super.checkLVal(expr, bindingType, checkClashes, contextDescription);\n        return;\n    }\n  }\n\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case types._this:\n        return this.parseIdentifier(true);\n\n      default:\n        return super.parseBindingAtom();\n    }\n  }\n\n  parseMaybeDecoratorArguments(expr) {\n    if (this.isRelational(\"<\")) {\n      const typeArguments = this.tsParseTypeArguments();\n\n      if (this.match(types.parenL)) {\n        const call = super.parseMaybeDecoratorArguments(expr);\n        call.typeParameters = typeArguments;\n        return call;\n      }\n\n      this.unexpected(this.state.start, types.parenL);\n    }\n\n    return super.parseMaybeDecoratorArguments(expr);\n  }\n\n  isClassMethod() {\n    return this.isRelational(\"<\") || super.isClassMethod();\n  }\n\n  isClassProperty() {\n    return this.match(types.bang) || this.match(types.colon) || super.isClassProperty();\n  }\n\n  parseMaybeDefault(...args) {\n    const node = super.parseMaybeDefault(...args);\n\n    if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n      this.raise(node.typeAnnotation.start, TSErrors.TypeAnnotationAfterAssign);\n    }\n\n    return node;\n  }\n\n  getTokenFromCode(code) {\n    if (this.state.inType && (code === 62 || code === 60)) {\n      return this.finishOp(types.relational, 1);\n    } else {\n      return super.getTokenFromCode(code);\n    }\n  }\n\n  reScan_lt_gt() {\n    if (this.match(types.relational)) {\n      const code = this.input.charCodeAt(this.state.start);\n\n      if (code === 60 || code === 62) {\n        this.state.pos -= 1;\n        this.readToken_lt_gt(code);\n      }\n    }\n  }\n\n  toAssignableList(exprList) {\n    for (let i = 0; i < exprList.length; i++) {\n      const expr = exprList[i];\n      if (!expr) continue;\n\n      switch (expr.type) {\n        case \"TSTypeCastExpression\":\n          exprList[i] = this.typeCastToParameter(expr);\n          break;\n\n        case \"TSAsExpression\":\n        case \"TSTypeAssertion\":\n          if (!this.state.maybeInArrowParameters) {\n            exprList[i] = this.typeCastToParameter(expr);\n          } else {\n            this.raise(expr.start, TSErrors.UnexpectedTypeCastInParameter);\n          }\n\n          break;\n      }\n    }\n\n    return super.toAssignableList(...arguments);\n  }\n\n  typeCastToParameter(node) {\n    node.expression.typeAnnotation = node.typeAnnotation;\n    this.resetEndLocation(node.expression, node.typeAnnotation.end, node.typeAnnotation.loc.end);\n    return node.expression;\n  }\n\n  toReferencedList(exprList, isInParens) {\n    for (let i = 0; i < exprList.length; i++) {\n      const expr = exprList[i];\n\n      if ((expr == null ? void 0 : expr.type) === \"TSTypeCastExpression\") {\n        this.raise(expr.start, TSErrors.UnexpectedTypeAnnotation);\n      }\n    }\n\n    return exprList;\n  }\n\n  shouldParseArrow() {\n    return this.match(types.colon) || super.shouldParseArrow();\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(types.colon) || super.shouldParseAsyncArrow();\n  }\n\n  canHaveLeadingDecorator() {\n    return super.canHaveLeadingDecorator() || this.isAbstractClass();\n  }\n\n  jsxParseOpeningElementAfterName(node) {\n    if (this.isRelational(\"<\")) {\n      const typeArguments = this.tsTryParseAndCatch(() => this.tsParseTypeArguments());\n      if (typeArguments) node.typeParameters = typeArguments;\n    }\n\n    return super.jsxParseOpeningElementAfterName(node);\n  }\n\n  getGetterSetterExpectedParamCount(method) {\n    const baseCount = super.getGetterSetterExpectedParamCount(method);\n    const firstParam = method.params[0];\n    const hasContextParam = firstParam && firstParam.type === \"Identifier\" && firstParam.name === \"this\";\n    return hasContextParam ? baseCount + 1 : baseCount;\n  }\n\n  parseCatchClauseParam() {\n    const param = super.parseCatchClauseParam();\n    const type = this.tsTryParseTypeAnnotation();\n\n    if (type) {\n      param.typeAnnotation = type;\n      this.resetEndLocation(param);\n    }\n\n    return param;\n  }\n\n});\n\ntypes.placeholder = new TokenType(\"%%\", {\n  startsExpr: true\n});\nvar placeholders = (superClass => class extends superClass {\n  parsePlaceholder(expectedNode) {\n    if (this.match(types.placeholder)) {\n      const node = this.startNode();\n      this.next();\n      this.assertNoSpace(\"Unexpected space in placeholder.\");\n      node.name = super.parseIdentifier(true);\n      this.assertNoSpace(\"Unexpected space in placeholder.\");\n      this.expect(types.placeholder);\n      return this.finishPlaceholder(node, expectedNode);\n    }\n  }\n\n  finishPlaceholder(node, expectedNode) {\n    const isFinished = !!(node.expectedNode && node.type === \"Placeholder\");\n    node.expectedNode = expectedNode;\n    return isFinished ? node : this.finishNode(node, \"Placeholder\");\n  }\n\n  getTokenFromCode(code) {\n    if (code === 37 && this.input.charCodeAt(this.state.pos + 1) === 37) {\n      return this.finishOp(types.placeholder, 2);\n    }\n\n    return super.getTokenFromCode(...arguments);\n  }\n\n  parseExprAtom() {\n    return this.parsePlaceholder(\"Expression\") || super.parseExprAtom(...arguments);\n  }\n\n  parseIdentifier() {\n    return this.parsePlaceholder(\"Identifier\") || super.parseIdentifier(...arguments);\n  }\n\n  checkReservedWord(word) {\n    if (word !== undefined) super.checkReservedWord(...arguments);\n  }\n\n  parseBindingAtom() {\n    return this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom(...arguments);\n  }\n\n  checkLVal(expr) {\n    if (expr.type !== \"Placeholder\") super.checkLVal(...arguments);\n  }\n\n  toAssignable(node) {\n    if (node && node.type === \"Placeholder\" && node.expectedNode === \"Expression\") {\n      node.expectedNode = \"Pattern\";\n      return node;\n    }\n\n    return super.toAssignable(...arguments);\n  }\n\n  verifyBreakContinue(node) {\n    if (node.label && node.label.type === \"Placeholder\") return;\n    super.verifyBreakContinue(...arguments);\n  }\n\n  parseExpressionStatement(node, expr) {\n    if (expr.type !== \"Placeholder\" || expr.extra && expr.extra.parenthesized) {\n      return super.parseExpressionStatement(...arguments);\n    }\n\n    if (this.match(types.colon)) {\n      const stmt = node;\n      stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n      this.next();\n      stmt.body = this.parseStatement(\"label\");\n      return this.finishNode(stmt, \"LabeledStatement\");\n    }\n\n    this.semicolon();\n    node.name = expr.name;\n    return this.finishPlaceholder(node, \"Statement\");\n  }\n\n  parseBlock() {\n    return this.parsePlaceholder(\"BlockStatement\") || super.parseBlock(...arguments);\n  }\n\n  parseFunctionId() {\n    return this.parsePlaceholder(\"Identifier\") || super.parseFunctionId(...arguments);\n  }\n\n  parseClass(node, isStatement, optionalId) {\n    const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n    this.next();\n    this.takeDecorators(node);\n    const oldStrict = this.state.strict;\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n\n    if (placeholder) {\n      if (this.match(types._extends) || this.match(types.placeholder) || this.match(types.braceL)) {\n        node.id = placeholder;\n      } else if (optionalId || !isStatement) {\n        node.id = null;\n        node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n        return this.finishNode(node, type);\n      } else {\n        this.unexpected(null, \"A class name is required\");\n      }\n    } else {\n      this.parseClassId(node, isStatement, optionalId);\n    }\n\n    this.parseClassSuper(node);\n    node.body = this.parsePlaceholder(\"ClassBody\") || this.parseClassBody(!!node.superClass, oldStrict);\n    return this.finishNode(node, type);\n  }\n\n  parseExport(node) {\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n    if (!placeholder) return super.parseExport(...arguments);\n\n    if (!this.isContextual(\"from\") && !this.match(types.comma)) {\n      node.specifiers = [];\n      node.source = null;\n      node.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    this.expectPlugin(\"exportDefaultFrom\");\n    const specifier = this.startNode();\n    specifier.exported = placeholder;\n    node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n    return super.parseExport(node);\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.match(types._default)) {\n      const next = this.nextTokenStart();\n\n      if (this.isUnparsedContextual(next, \"from\")) {\n        if (this.input.startsWith(types.placeholder.label, this.nextTokenStartSince(next + 4))) {\n          return true;\n        }\n      }\n    }\n\n    return super.isExportDefaultSpecifier();\n  }\n\n  maybeParseExportDefaultSpecifier(node) {\n    if (node.specifiers && node.specifiers.length > 0) {\n      return true;\n    }\n\n    return super.maybeParseExportDefaultSpecifier(...arguments);\n  }\n\n  checkExport(node) {\n    const {\n      specifiers\n    } = node;\n\n    if (specifiers == null ? void 0 : specifiers.length) {\n      node.specifiers = specifiers.filter(node => node.exported.type === \"Placeholder\");\n    }\n\n    super.checkExport(node);\n    node.specifiers = specifiers;\n  }\n\n  parseImport(node) {\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n    if (!placeholder) return super.parseImport(...arguments);\n    node.specifiers = [];\n\n    if (!this.isContextual(\"from\") && !this.match(types.comma)) {\n      node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n\n    const specifier = this.startNodeAtNode(placeholder);\n    specifier.local = placeholder;\n    this.finishNode(specifier, \"ImportDefaultSpecifier\");\n    node.specifiers.push(specifier);\n\n    if (this.eat(types.comma)) {\n      const hasStarImport = this.maybeParseStarImportSpecifier(node);\n      if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n    }\n\n    this.expectContextual(\"from\");\n    node.source = this.parseImportSource();\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource() {\n    return this.parsePlaceholder(\"StringLiteral\") || super.parseImportSource(...arguments);\n  }\n\n});\n\nvar v8intrinsic = (superClass => class extends superClass {\n  parseV8Intrinsic() {\n    if (this.match(types.modulo)) {\n      const v8IntrinsicStart = this.state.start;\n      const node = this.startNode();\n      this.eat(types.modulo);\n\n      if (this.match(types.name)) {\n        const name = this.parseIdentifierName(this.state.start);\n        const identifier = this.createIdentifier(node, name);\n        identifier.type = \"V8IntrinsicIdentifier\";\n\n        if (this.match(types.parenL)) {\n          return identifier;\n        }\n      }\n\n      this.unexpected(v8IntrinsicStart);\n    }\n  }\n\n  parseExprAtom() {\n    return this.parseV8Intrinsic() || super.parseExprAtom(...arguments);\n  }\n\n});\n\nfunction hasPlugin(plugins, name) {\n  return plugins.some(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n}\nfunction getPluginOption(plugins, name, option) {\n  const plugin = plugins.find(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n\n  if (plugin && Array.isArray(plugin)) {\n    return plugin[1][option];\n  }\n\n  return null;\n}\nconst PIPELINE_PROPOSALS = [\"minimal\", \"smart\", \"fsharp\"];\nconst RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\nfunction validatePlugins(plugins) {\n  if (hasPlugin(plugins, \"decorators\")) {\n    if (hasPlugin(plugins, \"decorators-legacy\")) {\n      throw new Error(\"Cannot use the decorators and decorators-legacy plugin together\");\n    }\n\n    const decoratorsBeforeExport = getPluginOption(plugins, \"decorators\", \"decoratorsBeforeExport\");\n\n    if (decoratorsBeforeExport == null) {\n      throw new Error(\"The 'decorators' plugin requires a 'decoratorsBeforeExport' option,\" + \" whose value must be a boolean. If you are migrating from\" + \" Babylon/Babel 6 or want to use the old decorators proposal, you\" + \" should use the 'decorators-legacy' plugin instead of 'decorators'.\");\n    } else if (typeof decoratorsBeforeExport !== \"boolean\") {\n      throw new Error(\"'decoratorsBeforeExport' must be a boolean.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"flow\") && hasPlugin(plugins, \"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"placeholders\") && hasPlugin(plugins, \"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"pipelineOperator\") && !PIPELINE_PROPOSALS.includes(getPluginOption(plugins, \"pipelineOperator\", \"proposal\"))) {\n    throw new Error(\"'pipelineOperator' requires 'proposal' option whose value should be one of: \" + PIPELINE_PROPOSALS.map(p => `'${p}'`).join(\", \"));\n  }\n\n  if (hasPlugin(plugins, \"moduleAttributes\")) {\n    const moduleAttributesVerionPluginOption = getPluginOption(plugins, \"moduleAttributes\", \"version\");\n\n    if (moduleAttributesVerionPluginOption !== \"may-2020\") {\n      throw new Error(\"The 'moduleAttributes' plugin requires a 'version' option,\" + \" representing the last proposal update. Currently, the\" + \" only supported value is 'may-2020'.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"recordAndTuple\") && !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\"))) {\n    throw new Error(\"'recordAndTuple' requires 'syntaxType' option whose value should be one of: \" + RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(\", \"));\n  }\n}\nconst mixinPlugins = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders\n};\nconst mixinPluginNames = Object.keys(mixinPlugins);\n\nconst defaultOptions = {\n  sourceType: \"script\",\n  sourceFilename: undefined,\n  startLine: 1,\n  allowAwaitOutsideFunction: false,\n  allowReturnOutsideFunction: false,\n  allowImportExportEverywhere: false,\n  allowSuperOutsideMethod: false,\n  allowUndeclaredExports: false,\n  plugins: [],\n  strictMode: null,\n  ranges: false,\n  tokens: false,\n  createParenthesizedExpressions: false,\n  errorRecovery: false\n};\nfunction getOptions(opts) {\n  const options = {};\n\n  for (let _i = 0, _Object$keys = Object.keys(defaultOptions); _i < _Object$keys.length; _i++) {\n    const key = _Object$keys[_i];\n    options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];\n  }\n\n  return options;\n}\n\nclass State {\n  constructor() {\n    this.errors = [];\n    this.potentialArrowAt = -1;\n    this.noArrowAt = [];\n    this.noArrowParamsConversionAt = [];\n    this.inParameters = false;\n    this.maybeInArrowParameters = false;\n    this.maybeInAsyncArrowHead = false;\n    this.inPipeline = false;\n    this.inType = false;\n    this.noAnonFunctionType = false;\n    this.inPropertyName = false;\n    this.hasFlowComment = false;\n    this.isIterator = false;\n    this.topicContext = {\n      maxNumOfResolvableTopics: 0,\n      maxTopicIndex: null\n    };\n    this.soloAwait = false;\n    this.inFSharpPipelineDirectBody = false;\n    this.labels = [];\n    this.decoratorStack = [[]];\n    this.yieldPos = -1;\n    this.awaitPos = -1;\n    this.comments = [];\n    this.trailingComments = [];\n    this.leadingComments = [];\n    this.commentStack = [];\n    this.commentPreviousNode = null;\n    this.pos = 0;\n    this.lineStart = 0;\n    this.type = types.eof;\n    this.value = null;\n    this.start = 0;\n    this.end = 0;\n    this.lastTokEndLoc = null;\n    this.lastTokStartLoc = null;\n    this.lastTokStart = 0;\n    this.lastTokEnd = 0;\n    this.context = [types$1.braceStatement];\n    this.exprAllowed = true;\n    this.containsEsc = false;\n    this.octalPositions = [];\n    this.exportedIdentifiers = [];\n    this.tokensLength = 0;\n  }\n\n  init(options) {\n    this.strict = options.strictMode === false ? false : options.sourceType === \"module\";\n    this.curLine = options.startLine;\n    this.startLoc = this.endLoc = this.curPosition();\n  }\n\n  curPosition() {\n    return new Position(this.curLine, this.pos - this.lineStart);\n  }\n\n  clone(skipArrays) {\n    const state = new State();\n    const keys = Object.keys(this);\n\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      let val = this[key];\n\n      if (!skipArrays && Array.isArray(val)) {\n        val = val.slice();\n      }\n\n      state[key] = val;\n    }\n\n    return state;\n  }\n\n}\n\nvar _isDigit = function isDigit(code) {\n  return code >= 48 && code <= 57;\n};\nconst VALID_REGEX_FLAGS = new Set([\"g\", \"m\", \"s\", \"i\", \"y\", \"u\"]);\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: [46, 66, 69, 79, 95, 98, 101, 111],\n  hex: [46, 88, 95, 120]\n};\nconst allowedNumericSeparatorSiblings = {};\nallowedNumericSeparatorSiblings.bin = [48, 49];\nallowedNumericSeparatorSiblings.oct = [...allowedNumericSeparatorSiblings.bin, 50, 51, 52, 53, 54, 55];\nallowedNumericSeparatorSiblings.dec = [...allowedNumericSeparatorSiblings.oct, 56, 57];\nallowedNumericSeparatorSiblings.hex = [...allowedNumericSeparatorSiblings.dec, 65, 66, 67, 68, 69, 70, 97, 98, 99, 100, 101, 102];\nclass Token {\n  constructor(state) {\n    this.type = state.type;\n    this.value = state.value;\n    this.start = state.start;\n    this.end = state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n\n}\nclass Tokenizer extends ParserError {\n  constructor(options, input) {\n    super();\n    this.tokens = [];\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.isLookahead = false;\n  }\n\n  pushToken(token) {\n    this.tokens.length = this.state.tokensLength;\n    this.tokens.push(token);\n    ++this.state.tokensLength;\n  }\n\n  next() {\n    if (!this.isLookahead) {\n      this.checkKeywordEscapes();\n\n      if (this.options.tokens) {\n        this.pushToken(new Token(this.state));\n      }\n    }\n\n    this.state.lastTokEnd = this.state.end;\n    this.state.lastTokStart = this.state.start;\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n\n  eat(type) {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  match(type) {\n    return this.state.type === type;\n  }\n\n  lookahead() {\n    const old = this.state;\n    this.state = old.clone(true);\n    this.isLookahead = true;\n    this.next();\n    this.isLookahead = false;\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n\n  nextTokenStart() {\n    return this.nextTokenStartSince(this.state.pos);\n  }\n\n  nextTokenStartSince(pos) {\n    skipWhiteSpace.lastIndex = pos;\n    const skip = skipWhiteSpace.exec(this.input);\n    return pos + skip[0].length;\n  }\n\n  lookaheadCharCode() {\n    return this.input.charCodeAt(this.nextTokenStart());\n  }\n\n  setStrict(strict) {\n    this.state.strict = strict;\n    if (!this.match(types.num) && !this.match(types.string)) return;\n    this.state.pos = this.state.start;\n\n    while (this.state.pos < this.state.lineStart) {\n      this.state.lineStart = this.input.lastIndexOf(\"\\n\", this.state.lineStart - 2) + 1;\n      --this.state.curLine;\n    }\n\n    this.nextToken();\n  }\n\n  curContext() {\n    return this.state.context[this.state.context.length - 1];\n  }\n\n  nextToken() {\n    const curContext = this.curContext();\n    if (!(curContext == null ? void 0 : curContext.preserveSpace)) this.skipSpace();\n    this.state.octalPositions = [];\n    this.state.start = this.state.pos;\n    this.state.startLoc = this.state.curPosition();\n\n    if (this.state.pos >= this.length) {\n      this.finishToken(types.eof);\n      return;\n    }\n\n    const override = curContext == null ? void 0 : curContext.override;\n\n    if (override) {\n      override(this);\n    } else {\n      this.getTokenFromCode(this.input.codePointAt(this.state.pos));\n    }\n  }\n\n  pushComment(block, text, start, end, startLoc, endLoc) {\n    const comment = {\n      type: block ? \"CommentBlock\" : \"CommentLine\",\n      value: text,\n      start: start,\n      end: end,\n      loc: new SourceLocation(startLoc, endLoc)\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    this.state.comments.push(comment);\n    this.addComment(comment);\n  }\n\n  skipBlockComment() {\n    const startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(\"*/\", this.state.pos + 2);\n    if (end === -1) throw this.raise(start, ErrorMessages.UnterminatedComment);\n    this.state.pos = end + 2;\n    lineBreakG.lastIndex = start;\n    let match;\n\n    while ((match = lineBreakG.exec(this.input)) && match.index < this.state.pos) {\n      ++this.state.curLine;\n      this.state.lineStart = match.index + match[0].length;\n    }\n\n    if (this.isLookahead) return;\n    this.pushComment(true, this.input.slice(start + 2, end), start, this.state.pos, startLoc, this.state.curPosition());\n  }\n\n  skipLineComment(startSkip) {\n    const start = this.state.pos;\n    const startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt(this.state.pos += startSkip);\n\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n\n    if (this.isLookahead) return;\n    this.pushComment(false, this.input.slice(start + startSkip, this.state.pos), start, this.state.pos, startLoc, this.state.curPosition());\n  }\n\n  skipSpace() {\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      switch (ch) {\n        case 32:\n        case 160:\n        case 9:\n          ++this.state.pos;\n          break;\n\n        case 13:\n          if (this.input.charCodeAt(this.state.pos + 1) === 10) {\n            ++this.state.pos;\n          }\n\n        case 10:\n        case 8232:\n        case 8233:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case 47:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case 42:\n              this.skipBlockComment();\n              break;\n\n            case 47:\n              this.skipLineComment(2);\n              break;\n\n            default:\n              break loop;\n          }\n\n          break;\n\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else {\n            break loop;\n          }\n\n      }\n    }\n  }\n\n  finishToken(type, val) {\n    this.state.end = this.state.pos;\n    this.state.endLoc = this.state.curPosition();\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n    if (!this.isLookahead) this.updateContext(prevType);\n  }\n\n  readToken_numberSign() {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n\n    const nextPos = this.state.pos + 1;\n    const next = this.input.charCodeAt(nextPos);\n\n    if (next >= 48 && next <= 57) {\n      throw this.raise(this.state.pos, ErrorMessages.UnexpectedDigitAfterHash);\n    }\n\n    if (next === 123 || next === 91 && this.hasPlugin(\"recordAndTuple\")) {\n      this.expectPlugin(\"recordAndTuple\");\n\n      if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"hash\") {\n        throw this.raise(this.state.pos, next === 123 ? ErrorMessages.RecordExpressionHashIncorrectStartSyntaxType : ErrorMessages.TupleExpressionHashIncorrectStartSyntaxType);\n      }\n\n      if (next === 123) {\n        this.finishToken(types.braceHashL);\n      } else {\n        this.finishToken(types.bracketHashL);\n      }\n\n      this.state.pos += 2;\n    } else {\n      this.finishOp(types.hash, 1);\n    }\n  }\n\n  readToken_dot() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next >= 48 && next <= 57) {\n      this.readNumber(true);\n      return;\n    }\n\n    if (next === 46 && this.input.charCodeAt(this.state.pos + 2) === 46) {\n      this.state.pos += 3;\n      this.finishToken(types.ellipsis);\n    } else {\n      ++this.state.pos;\n      this.finishToken(types.dot);\n    }\n  }\n\n  readToken_slash() {\n    if (this.state.exprAllowed && !this.state.inType) {\n      ++this.state.pos;\n      this.readRegexp();\n      return;\n    }\n\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(types.assign, 2);\n    } else {\n      this.finishOp(types.slash, 1);\n    }\n  }\n\n  readToken_interpreter() {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n    let ch = this.input.charCodeAt(this.state.pos + 1);\n    if (ch !== 33) return false;\n    const start = this.state.pos;\n    this.state.pos += 1;\n\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    const value = this.input.slice(start + 2, this.state.pos);\n    this.finishToken(types.interpreterDirective, value);\n    return true;\n  }\n\n  readToken_mult_modulo(code) {\n    let type = code === 42 ? types.star : types.modulo;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n    const exprAllowed = this.state.exprAllowed;\n\n    if (code === 42 && next === 42) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = types.exponent;\n    }\n\n    if (next === 61 && !exprAllowed) {\n      width++;\n      type = types.assign;\n    }\n\n    this.finishOp(type, width);\n  }\n\n  readToken_pipe_amp(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === 61) {\n        this.finishOp(types.assign, 3);\n      } else {\n        this.finishOp(code === 124 ? types.logicalOR : types.logicalAND, 2);\n      }\n\n      return;\n    }\n\n    if (code === 124) {\n      if (next === 62) {\n        this.finishOp(types.pipeline, 2);\n        return;\n      }\n\n      if (this.hasPlugin(\"recordAndTuple\") && next === 125) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(this.state.pos, ErrorMessages.RecordExpressionBarIncorrectEndSyntaxType);\n        }\n\n        this.finishOp(types.braceBarR, 2);\n        return;\n      }\n\n      if (this.hasPlugin(\"recordAndTuple\") && next === 93) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(this.state.pos, ErrorMessages.TupleExpressionBarIncorrectEndSyntaxType);\n        }\n\n        this.finishOp(types.bracketBarR, 2);\n        return;\n      }\n    }\n\n    if (next === 61) {\n      this.finishOp(types.assign, 2);\n      return;\n    }\n\n    this.finishOp(code === 124 ? types.bitwiseOR : types.bitwiseAND, 1);\n  }\n\n  readToken_caret() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(types.assign, 2);\n    } else {\n      this.finishOp(types.bitwiseXOR, 1);\n    }\n  }\n\n  readToken_plus_min(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (next === 45 && !this.inModule && this.input.charCodeAt(this.state.pos + 2) === 62 && (this.state.lastTokEnd === 0 || this.hasPrecedingLineBreak())) {\n        this.skipLineComment(3);\n        this.skipSpace();\n        this.nextToken();\n        return;\n      }\n\n      this.finishOp(types.incDec, 2);\n      return;\n    }\n\n    if (next === 61) {\n      this.finishOp(types.assign, 2);\n    } else {\n      this.finishOp(types.plusMin, 1);\n    }\n  }\n\n  readToken_lt_gt(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    let size = 1;\n\n    if (next === code) {\n      size = code === 62 && this.input.charCodeAt(this.state.pos + 2) === 62 ? 3 : 2;\n\n      if (this.input.charCodeAt(this.state.pos + size) === 61) {\n        this.finishOp(types.assign, size + 1);\n        return;\n      }\n\n      this.finishOp(types.bitShift, size);\n      return;\n    }\n\n    if (next === 33 && code === 60 && !this.inModule && this.input.charCodeAt(this.state.pos + 2) === 45 && this.input.charCodeAt(this.state.pos + 3) === 45) {\n      this.skipLineComment(4);\n      this.skipSpace();\n      this.nextToken();\n      return;\n    }\n\n    if (next === 61) {\n      size = 2;\n    }\n\n    this.finishOp(types.relational, size);\n  }\n\n  readToken_eq_excl(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(types.equality, this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2);\n      return;\n    }\n\n    if (code === 61 && next === 62) {\n      this.state.pos += 2;\n      this.finishToken(types.arrow);\n      return;\n    }\n\n    this.finishOp(code === 61 ? types.eq : types.bang, 1);\n  }\n\n  readToken_question() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n\n    if (next === 63) {\n      if (next2 === 61) {\n        this.finishOp(types.assign, 3);\n      } else {\n        this.finishOp(types.nullishCoalescing, 2);\n      }\n    } else if (next === 46 && !(next2 >= 48 && next2 <= 57)) {\n      this.state.pos += 2;\n      this.finishToken(types.questionDot);\n    } else {\n      ++this.state.pos;\n      this.finishToken(types.question);\n    }\n  }\n\n  getTokenFromCode(code) {\n    switch (code) {\n      case 46:\n        this.readToken_dot();\n        return;\n\n      case 40:\n        ++this.state.pos;\n        this.finishToken(types.parenL);\n        return;\n\n      case 41:\n        ++this.state.pos;\n        this.finishToken(types.parenR);\n        return;\n\n      case 59:\n        ++this.state.pos;\n        this.finishToken(types.semi);\n        return;\n\n      case 44:\n        ++this.state.pos;\n        this.finishToken(types.comma);\n        return;\n\n      case 91:\n        if (this.hasPlugin(\"recordAndTuple\") && this.input.charCodeAt(this.state.pos + 1) === 124) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(this.state.pos, ErrorMessages.TupleExpressionBarIncorrectStartSyntaxType);\n          }\n\n          this.finishToken(types.bracketBarL);\n          this.state.pos += 2;\n        } else {\n          ++this.state.pos;\n          this.finishToken(types.bracketL);\n        }\n\n        return;\n\n      case 93:\n        ++this.state.pos;\n        this.finishToken(types.bracketR);\n        return;\n\n      case 123:\n        if (this.hasPlugin(\"recordAndTuple\") && this.input.charCodeAt(this.state.pos + 1) === 124) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(this.state.pos, ErrorMessages.RecordExpressionBarIncorrectStartSyntaxType);\n          }\n\n          this.finishToken(types.braceBarL);\n          this.state.pos += 2;\n        } else {\n          ++this.state.pos;\n          this.finishToken(types.braceL);\n        }\n\n        return;\n\n      case 125:\n        ++this.state.pos;\n        this.finishToken(types.braceR);\n        return;\n\n      case 58:\n        if (this.hasPlugin(\"functionBind\") && this.input.charCodeAt(this.state.pos + 1) === 58) {\n          this.finishOp(types.doubleColon, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(types.colon);\n        }\n\n        return;\n\n      case 63:\n        this.readToken_question();\n        return;\n\n      case 96:\n        ++this.state.pos;\n        this.finishToken(types.backQuote);\n        return;\n\n      case 48:\n        {\n          const next = this.input.charCodeAt(this.state.pos + 1);\n\n          if (next === 120 || next === 88) {\n            this.readRadixNumber(16);\n            return;\n          }\n\n          if (next === 111 || next === 79) {\n            this.readRadixNumber(8);\n            return;\n          }\n\n          if (next === 98 || next === 66) {\n            this.readRadixNumber(2);\n            return;\n          }\n        }\n\n      case 49:\n      case 50:\n      case 51:\n      case 52:\n      case 53:\n      case 54:\n      case 55:\n      case 56:\n      case 57:\n        this.readNumber(false);\n        return;\n\n      case 34:\n      case 39:\n        this.readString(code);\n        return;\n\n      case 47:\n        this.readToken_slash();\n        return;\n\n      case 37:\n      case 42:\n        this.readToken_mult_modulo(code);\n        return;\n\n      case 124:\n      case 38:\n        this.readToken_pipe_amp(code);\n        return;\n\n      case 94:\n        this.readToken_caret();\n        return;\n\n      case 43:\n      case 45:\n        this.readToken_plus_min(code);\n        return;\n\n      case 60:\n      case 62:\n        this.readToken_lt_gt(code);\n        return;\n\n      case 61:\n      case 33:\n        this.readToken_eq_excl(code);\n        return;\n\n      case 126:\n        this.finishOp(types.tilde, 1);\n        return;\n\n      case 64:\n        ++this.state.pos;\n        this.finishToken(types.at);\n        return;\n\n      case 35:\n        this.readToken_numberSign();\n        return;\n\n      case 92:\n        this.readWord();\n        return;\n\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord();\n          return;\n        }\n\n    }\n\n    throw this.raise(this.state.pos, ErrorMessages.InvalidOrUnexpectedToken, String.fromCodePoint(code));\n  }\n\n  finishOp(type, size) {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n\n  readRegexp() {\n    const start = this.state.pos;\n    let escaped, inClass;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(start, ErrorMessages.UnterminatedRegExp);\n      }\n\n      const ch = this.input.charAt(this.state.pos);\n\n      if (lineBreak.test(ch)) {\n        throw this.raise(start, ErrorMessages.UnterminatedRegExp);\n      }\n\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === \"[\") {\n          inClass = true;\n        } else if (ch === \"]\" && inClass) {\n          inClass = false;\n        } else if (ch === \"/\" && !inClass) {\n          break;\n        }\n\n        escaped = ch === \"\\\\\";\n      }\n\n      ++this.state.pos;\n    }\n\n    const content = this.input.slice(start, this.state.pos);\n    ++this.state.pos;\n    let mods = \"\";\n\n    while (this.state.pos < this.length) {\n      const char = this.input[this.state.pos];\n      const charCode = this.input.codePointAt(this.state.pos);\n\n      if (VALID_REGEX_FLAGS.has(char)) {\n        if (mods.indexOf(char) > -1) {\n          this.raise(this.state.pos + 1, ErrorMessages.DuplicateRegExpFlags);\n        }\n      } else if (isIdentifierChar(charCode) || charCode === 92) {\n        this.raise(this.state.pos + 1, ErrorMessages.MalformedRegExpFlags);\n      } else {\n        break;\n      }\n\n      ++this.state.pos;\n      mods += char;\n    }\n\n    this.finishToken(types.regexp, {\n      pattern: content,\n      flags: mods\n    });\n  }\n\n  readInt(radix, len, forceLen, allowNumSeparator = true) {\n    const start = this.state.pos;\n    const forbiddenSiblings = radix === 16 ? forbiddenNumericSeparatorSiblings.hex : forbiddenNumericSeparatorSiblings.decBinOct;\n    const allowedSiblings = radix === 16 ? allowedNumericSeparatorSiblings.hex : radix === 10 ? allowedNumericSeparatorSiblings.dec : radix === 8 ? allowedNumericSeparatorSiblings.oct : allowedNumericSeparatorSiblings.bin;\n    let invalid = false;\n    let total = 0;\n\n    for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n      const code = this.input.charCodeAt(this.state.pos);\n      let val;\n\n      if (code === 95) {\n        const prev = this.input.charCodeAt(this.state.pos - 1);\n        const next = this.input.charCodeAt(this.state.pos + 1);\n\n        if (allowedSiblings.indexOf(next) === -1) {\n          this.raise(this.state.pos, ErrorMessages.UnexpectedNumericSeparator);\n        } else if (forbiddenSiblings.indexOf(prev) > -1 || forbiddenSiblings.indexOf(next) > -1 || Number.isNaN(next)) {\n          this.raise(this.state.pos, ErrorMessages.UnexpectedNumericSeparator);\n        }\n\n        if (!allowNumSeparator) {\n          this.raise(this.state.pos, ErrorMessages.NumericSeparatorInEscapeSequence);\n        }\n\n        ++this.state.pos;\n        continue;\n      }\n\n      if (code >= 97) {\n        val = code - 97 + 10;\n      } else if (code >= 65) {\n        val = code - 65 + 10;\n      } else if (_isDigit(code)) {\n        val = code - 48;\n      } else {\n        val = Infinity;\n      }\n\n      if (val >= radix) {\n        if (this.options.errorRecovery && val <= 9) {\n          val = 0;\n          this.raise(this.state.start + i + 2, ErrorMessages.InvalidDigit, radix);\n        } else if (forceLen) {\n          val = 0;\n          invalid = true;\n        } else {\n          break;\n        }\n      }\n\n      ++this.state.pos;\n      total = total * radix + val;\n    }\n\n    if (this.state.pos === start || len != null && this.state.pos - start !== len || invalid) {\n      return null;\n    }\n\n    return total;\n  }\n\n  readRadixNumber(radix) {\n    const start = this.state.pos;\n    let isBigInt = false;\n    this.state.pos += 2;\n    const val = this.readInt(radix);\n\n    if (val == null) {\n      this.raise(this.state.start + 2, ErrorMessages.InvalidDigit, radix);\n    }\n\n    const next = this.input.charCodeAt(this.state.pos);\n\n    if (next === 110) {\n      ++this.state.pos;\n      isBigInt = true;\n    } else if (next === 109) {\n      throw this.raise(start, ErrorMessages.InvalidDecimal);\n    }\n\n    if (isIdentifierStart(this.input.codePointAt(this.state.pos))) {\n      throw this.raise(this.state.pos, ErrorMessages.NumberIdentifier);\n    }\n\n    if (isBigInt) {\n      const str = this.input.slice(start, this.state.pos).replace(/[_n]/g, \"\");\n      this.finishToken(types.bigint, str);\n      return;\n    }\n\n    this.finishToken(types.num, val);\n  }\n\n  readNumber(startsWithDot) {\n    const start = this.state.pos;\n    let isFloat = false;\n    let isBigInt = false;\n    let isDecimal = false;\n    let hasExponent = false;\n    let isOctal = false;\n\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(start, ErrorMessages.InvalidNumber);\n    }\n\n    const hasLeadingZero = this.state.pos - start >= 2 && this.input.charCodeAt(start) === 48;\n\n    if (hasLeadingZero) {\n      const integer = this.input.slice(start, this.state.pos);\n\n      if (this.state.strict) {\n        this.raise(start, ErrorMessages.StrictOctalLiteral);\n      } else {\n        const underscorePos = integer.indexOf(\"_\");\n\n        if (underscorePos > 0) {\n          this.raise(underscorePos + start, ErrorMessages.ZeroDigitNumericSeparator);\n        }\n      }\n\n      isOctal = hasLeadingZero && !/[89]/.test(integer);\n    }\n\n    let next = this.input.charCodeAt(this.state.pos);\n\n    if (next === 46 && !isOctal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if ((next === 69 || next === 101) && !isOctal) {\n      next = this.input.charCodeAt(++this.state.pos);\n\n      if (next === 43 || next === 45) {\n        ++this.state.pos;\n      }\n\n      if (this.readInt(10) === null) this.raise(start, ErrorMessages.InvalidNumber);\n      isFloat = true;\n      hasExponent = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (next === 110) {\n      if (isFloat || hasLeadingZero) {\n        this.raise(start, ErrorMessages.InvalidBigIntLiteral);\n      }\n\n      ++this.state.pos;\n      isBigInt = true;\n    }\n\n    if (next === 109) {\n      this.expectPlugin(\"decimal\", this.state.pos);\n\n      if (hasExponent || hasLeadingZero) {\n        this.raise(start, ErrorMessages.InvalidDecimal);\n      }\n\n      ++this.state.pos;\n      isDecimal = true;\n    }\n\n    if (isIdentifierStart(this.input.codePointAt(this.state.pos))) {\n      throw this.raise(this.state.pos, ErrorMessages.NumberIdentifier);\n    }\n\n    const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, \"\");\n\n    if (isBigInt) {\n      this.finishToken(types.bigint, str);\n      return;\n    }\n\n    if (isDecimal) {\n      this.finishToken(types.decimal, str);\n      return;\n    }\n\n    const val = isOctal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(types.num, val);\n  }\n\n  readCodePoint(throwOnInvalid) {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let code;\n\n    if (ch === 123) {\n      const codePos = ++this.state.pos;\n      code = this.readHexChar(this.input.indexOf(\"}\", this.state.pos) - this.state.pos, true, throwOnInvalid);\n      ++this.state.pos;\n\n      if (code !== null && code > 0x10ffff) {\n        if (throwOnInvalid) {\n          this.raise(codePos, ErrorMessages.InvalidCodePoint);\n        } else {\n          return null;\n        }\n      }\n    } else {\n      code = this.readHexChar(4, false, throwOnInvalid);\n    }\n\n    return code;\n  }\n\n  readString(quote) {\n    let out = \"\",\n        chunkStart = ++this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedString);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n\n      if (ch === 92) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.readEscapedChar(false);\n        chunkStart = this.state.pos;\n      } else if (ch === 8232 || ch === 8233) {\n        ++this.state.pos;\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedString);\n      } else {\n        ++this.state.pos;\n      }\n    }\n\n    out += this.input.slice(chunkStart, this.state.pos++);\n    this.finishToken(types.string, out);\n  }\n\n  readTmplToken() {\n    let out = \"\",\n        chunkStart = this.state.pos,\n        containsInvalid = false;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedTemplate);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      if (ch === 96 || ch === 36 && this.input.charCodeAt(this.state.pos + 1) === 123) {\n        if (this.state.pos === this.state.start && this.match(types.template)) {\n          if (ch === 36) {\n            this.state.pos += 2;\n            this.finishToken(types.dollarBraceL);\n            return;\n          } else {\n            ++this.state.pos;\n            this.finishToken(types.backQuote);\n            return;\n          }\n        }\n\n        out += this.input.slice(chunkStart, this.state.pos);\n        this.finishToken(types.template, containsInvalid ? null : out);\n        return;\n      }\n\n      if (ch === 92) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        const escaped = this.readEscapedChar(true);\n\n        if (escaped === null) {\n          containsInvalid = true;\n        } else {\n          out += escaped;\n        }\n\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        ++this.state.pos;\n\n        switch (ch) {\n          case 13:\n            if (this.input.charCodeAt(this.state.pos) === 10) {\n              ++this.state.pos;\n            }\n\n          case 10:\n            out += \"\\n\";\n            break;\n\n          default:\n            out += String.fromCharCode(ch);\n            break;\n        }\n\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n  }\n\n  readEscapedChar(inTemplate) {\n    const throwOnInvalid = !inTemplate;\n    const ch = this.input.charCodeAt(++this.state.pos);\n    ++this.state.pos;\n\n    switch (ch) {\n      case 110:\n        return \"\\n\";\n\n      case 114:\n        return \"\\r\";\n\n      case 120:\n        {\n          const code = this.readHexChar(2, false, throwOnInvalid);\n          return code === null ? null : String.fromCharCode(code);\n        }\n\n      case 117:\n        {\n          const code = this.readCodePoint(throwOnInvalid);\n          return code === null ? null : String.fromCodePoint(code);\n        }\n\n      case 116:\n        return \"\\t\";\n\n      case 98:\n        return \"\\b\";\n\n      case 118:\n        return \"\\u000b\";\n\n      case 102:\n        return \"\\f\";\n\n      case 13:\n        if (this.input.charCodeAt(this.state.pos) === 10) {\n          ++this.state.pos;\n        }\n\n      case 10:\n        this.state.lineStart = this.state.pos;\n        ++this.state.curLine;\n\n      case 8232:\n      case 8233:\n        return \"\";\n\n      case 56:\n      case 57:\n        if (inTemplate) {\n          return null;\n        } else if (this.state.strict) {\n          this.raise(this.state.pos - 1, ErrorMessages.StrictNumericEscape);\n        }\n\n      default:\n        if (ch >= 48 && ch <= 55) {\n          const codePos = this.state.pos - 1;\n          const match = this.input.substr(this.state.pos - 1, 3).match(/^[0-7]+/);\n          let octalStr = match[0];\n          let octal = parseInt(octalStr, 8);\n\n          if (octal > 255) {\n            octalStr = octalStr.slice(0, -1);\n            octal = parseInt(octalStr, 8);\n          }\n\n          this.state.pos += octalStr.length - 1;\n          const next = this.input.charCodeAt(this.state.pos);\n\n          if (octalStr !== \"0\" || next === 56 || next === 57) {\n            if (inTemplate) {\n              return null;\n            } else if (this.state.strict) {\n              this.raise(codePos, ErrorMessages.StrictNumericEscape);\n            } else {\n              this.state.octalPositions.push(codePos);\n            }\n          }\n\n          return String.fromCharCode(octal);\n        }\n\n        return String.fromCharCode(ch);\n    }\n  }\n\n  readHexChar(len, forceLen, throwOnInvalid) {\n    const codePos = this.state.pos;\n    const n = this.readInt(16, len, forceLen, false);\n\n    if (n === null) {\n      if (throwOnInvalid) {\n        this.raise(codePos, ErrorMessages.InvalidEscapeSequence);\n      } else {\n        this.state.pos = codePos - 1;\n      }\n    }\n\n    return n;\n  }\n\n  readWord1() {\n    let word = \"\";\n    this.state.containsEsc = false;\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n\n    while (this.state.pos < this.length) {\n      const ch = this.input.codePointAt(this.state.pos);\n\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (this.state.isIterator && ch === 64) {\n        ++this.state.pos;\n      } else if (ch === 92) {\n        this.state.containsEsc = true;\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.pos;\n        const identifierCheck = this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n        if (this.input.charCodeAt(++this.state.pos) !== 117) {\n          this.raise(this.state.pos, ErrorMessages.MissingUnicodeEscape);\n          continue;\n        }\n\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(escStart, ErrorMessages.EscapedCharNotAnIdentifier);\n          }\n\n          word += String.fromCodePoint(esc);\n        }\n\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n\n  isIterator(word) {\n    return word === \"@@iterator\" || word === \"@@asyncIterator\";\n  }\n\n  readWord() {\n    const word = this.readWord1();\n    const type = keywords.get(word) || types.name;\n\n    if (this.state.isIterator && (!this.isIterator(word) || !this.state.inType)) {\n      this.raise(this.state.pos, ErrorMessages.InvalidIdentifier, word);\n    }\n\n    this.finishToken(type, word);\n  }\n\n  checkKeywordEscapes() {\n    const kw = this.state.type.keyword;\n\n    if (kw && this.state.containsEsc) {\n      this.raise(this.state.start, ErrorMessages.InvalidEscapedReservedWord, kw);\n    }\n  }\n\n  braceIsBlock(prevType) {\n    const parent = this.curContext();\n\n    if (parent === types$1.functionExpression || parent === types$1.functionStatement) {\n      return true;\n    }\n\n    if (prevType === types.colon && (parent === types$1.braceStatement || parent === types$1.braceExpression)) {\n      return !parent.isExpr;\n    }\n\n    if (prevType === types._return || prevType === types.name && this.state.exprAllowed) {\n      return this.hasPrecedingLineBreak();\n    }\n\n    if (prevType === types._else || prevType === types.semi || prevType === types.eof || prevType === types.parenR || prevType === types.arrow) {\n      return true;\n    }\n\n    if (prevType === types.braceL) {\n      return parent === types$1.braceStatement;\n    }\n\n    if (prevType === types._var || prevType === types._const || prevType === types.name) {\n      return false;\n    }\n\n    if (prevType === types.relational) {\n      return true;\n    }\n\n    return !this.state.exprAllowed;\n  }\n\n  updateContext(prevType) {\n    const type = this.state.type;\n    let update;\n\n    if (type.keyword && (prevType === types.dot || prevType === types.questionDot)) {\n      this.state.exprAllowed = false;\n    } else if (update = type.updateContext) {\n      update.call(this, prevType);\n    } else {\n      this.state.exprAllowed = type.beforeExpr;\n    }\n  }\n\n}\n\nclass UtilParser extends Tokenizer {\n  addExtra(node, key, val) {\n    if (!node) return;\n    const extra = node.extra = node.extra || {};\n    extra[key] = val;\n  }\n\n  isRelational(op) {\n    return this.match(types.relational) && this.state.value === op;\n  }\n\n  expectRelational(op) {\n    if (this.isRelational(op)) {\n      this.next();\n    } else {\n      this.unexpected(null, types.relational);\n    }\n  }\n\n  isContextual(name) {\n    return this.match(types.name) && this.state.value === name && !this.state.containsEsc;\n  }\n\n  isUnparsedContextual(nameStart, name) {\n    const nameEnd = nameStart + name.length;\n    return this.input.slice(nameStart, nameEnd) === name && (nameEnd === this.input.length || !isIdentifierChar(this.input.charCodeAt(nameEnd)));\n  }\n\n  isLookaheadContextual(name) {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n\n  eatContextual(name) {\n    return this.isContextual(name) && this.eat(types.name);\n  }\n\n  expectContextual(name, message) {\n    if (!this.eatContextual(name)) this.unexpected(null, message);\n  }\n\n  canInsertSemicolon() {\n    return this.match(types.eof) || this.match(types.braceR) || this.hasPrecedingLineBreak();\n  }\n\n  hasPrecedingLineBreak() {\n    return lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start));\n  }\n\n  isLineTerminator() {\n    return this.eat(types.semi) || this.canInsertSemicolon();\n  }\n\n  semicolon() {\n    if (!this.isLineTerminator()) this.unexpected(null, types.semi);\n  }\n\n  expect(type, pos) {\n    this.eat(type) || this.unexpected(pos, type);\n  }\n\n  assertNoSpace(message = \"Unexpected space.\") {\n    if (this.state.start > this.state.lastTokEnd) {\n      this.raise(this.state.lastTokEnd, message);\n    }\n  }\n\n  unexpected(pos, messageOrType = \"Unexpected token\") {\n    if (typeof messageOrType !== \"string\") {\n      messageOrType = `Unexpected token, expected \"${messageOrType.label}\"`;\n    }\n\n    throw this.raise(pos != null ? pos : this.state.start, messageOrType);\n  }\n\n  expectPlugin(name, pos) {\n    if (!this.hasPlugin(name)) {\n      throw this.raiseWithData(pos != null ? pos : this.state.start, {\n        missingPlugin: [name]\n      }, `This experimental syntax requires enabling the parser plugin: '${name}'`);\n    }\n\n    return true;\n  }\n\n  expectOnePlugin(names, pos) {\n    if (!names.some(n => this.hasPlugin(n))) {\n      throw this.raiseWithData(pos != null ? pos : this.state.start, {\n        missingPlugin: names\n      }, `This experimental syntax requires enabling one of the following parser plugin(s): '${names.join(\", \")}'`);\n    }\n  }\n\n  checkYieldAwaitInDefaultParams() {\n    if (this.state.yieldPos !== -1 && (this.state.awaitPos === -1 || this.state.yieldPos < this.state.awaitPos)) {\n      this.raise(this.state.yieldPos, ErrorMessages.YieldBindingIdentifier);\n    }\n\n    if (this.state.awaitPos !== -1) {\n      this.raise(this.state.awaitPos, ErrorMessages.AwaitBindingIdentifier);\n    }\n  }\n\n  tryParse(fn, oldState = this.state.clone()) {\n    const abortSignal = {\n      node: null\n    };\n\n    try {\n      const node = fn((node = null) => {\n        abortSignal.node = node;\n        throw abortSignal;\n      });\n\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        return {\n          node,\n          error: failState.errors[oldState.errors.length],\n          thrown: false,\n          aborted: false,\n          failState\n        };\n      }\n\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n\n      if (error instanceof SyntaxError) {\n        return {\n          node: null,\n          error,\n          thrown: true,\n          aborted: false,\n          failState\n        };\n      }\n\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState\n        };\n      }\n\n      throw error;\n    }\n  }\n\n  checkExpressionErrors(refExpressionErrors, andThrow) {\n    if (!refExpressionErrors) return false;\n    const {\n      shorthandAssign,\n      doubleProto\n    } = refExpressionErrors;\n    if (!andThrow) return shorthandAssign >= 0 || doubleProto >= 0;\n\n    if (shorthandAssign >= 0) {\n      this.unexpected(shorthandAssign);\n    }\n\n    if (doubleProto >= 0) {\n      this.raise(doubleProto, ErrorMessages.DuplicateProto);\n    }\n  }\n\n  isLiteralPropertyName() {\n    return this.match(types.name) || !!this.state.type.keyword || this.match(types.string) || this.match(types.num) || this.match(types.bigint) || this.match(types.decimal);\n  }\n\n}\nclass ExpressionErrors {\n  constructor() {\n    this.shorthandAssign = -1;\n    this.doubleProto = -1;\n  }\n\n}\n\nclass Node {\n  constructor(parser, pos, loc) {\n    this.type = \"\";\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser == null ? void 0 : parser.options.ranges) this.range = [pos, 0];\n    if (parser == null ? void 0 : parser.filename) this.loc.filename = parser.filename;\n  }\n\n  __clone() {\n    const newNode = new Node();\n    const keys = Object.keys(this);\n\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n\n      if (key !== \"leadingComments\" && key !== \"trailingComments\" && key !== \"innerComments\") {\n        newNode[key] = this[key];\n      }\n    }\n\n    return newNode;\n  }\n\n}\n\nclass NodeUtils extends UtilParser {\n  startNode() {\n    return new Node(this, this.state.start, this.state.startLoc);\n  }\n\n  startNodeAt(pos, loc) {\n    return new Node(this, pos, loc);\n  }\n\n  startNodeAtNode(type) {\n    return this.startNodeAt(type.start, type.loc.start);\n  }\n\n  finishNode(node, type) {\n    return this.finishNodeAt(node, type, this.state.lastTokEnd, this.state.lastTokEndLoc);\n  }\n\n  finishNodeAt(node, type, pos, loc) {\n\n    node.type = type;\n    node.end = pos;\n    node.loc.end = loc;\n    if (this.options.ranges) node.range[1] = pos;\n    this.processComment(node);\n    return node;\n  }\n\n  resetStartLocation(node, start, startLoc) {\n    node.start = start;\n    node.loc.start = startLoc;\n    if (this.options.ranges) node.range[0] = start;\n  }\n\n  resetEndLocation(node, end = this.state.lastTokEnd, endLoc = this.state.lastTokEndLoc) {\n    node.end = end;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = end;\n  }\n\n  resetStartLocationFromNode(node, locationNode) {\n    this.resetStartLocation(node, locationNode.start, locationNode.loc.start);\n  }\n\n}\n\nconst unwrapParenthesizedExpression = node => {\n  return node.type === \"ParenthesizedExpression\" ? unwrapParenthesizedExpression(node.expression) : node;\n};\n\nclass LValParser extends NodeUtils {\n  toAssignable(node) {\n    var _node$extra, _node$extra3;\n\n    let parenthesized = undefined;\n\n    if (node.type === \"ParenthesizedExpression\" || ((_node$extra = node.extra) == null ? void 0 : _node$extra.parenthesized)) {\n      parenthesized = unwrapParenthesizedExpression(node);\n\n      if (parenthesized.type !== \"Identifier\" && parenthesized.type !== \"MemberExpression\") {\n        this.raise(node.start, ErrorMessages.InvalidParenthesizedAssignment);\n      }\n    }\n\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n        break;\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n\n        for (let i = 0, length = node.properties.length, last = length - 1; i < length; i++) {\n          var _node$extra2;\n\n          const prop = node.properties[i];\n          const isLast = i === last;\n          this.toAssignableObjectExpressionProp(prop, isLast);\n\n          if (isLast && prop.type === \"RestElement\" && ((_node$extra2 = node.extra) == null ? void 0 : _node$extra2.trailingComma)) {\n            this.raiseRestNotLast(node.extra.trailingComma);\n          }\n        }\n\n        break;\n\n      case \"ObjectProperty\":\n        this.toAssignable(node.value);\n        break;\n\n      case \"SpreadElement\":\n        {\n          this.checkToRestConversion(node);\n          node.type = \"RestElement\";\n          const arg = node.argument;\n          this.toAssignable(arg);\n          break;\n        }\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        this.toAssignableList(node.elements, (_node$extra3 = node.extra) == null ? void 0 : _node$extra3.trailingComma);\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(node.left.end, ErrorMessages.MissingEqInAssignment);\n        }\n\n        node.type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left);\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.toAssignable(parenthesized);\n        break;\n    }\n\n    return node;\n  }\n\n  toAssignableObjectExpressionProp(prop, isLast) {\n    if (prop.type === \"ObjectMethod\") {\n      const error = prop.kind === \"get\" || prop.kind === \"set\" ? ErrorMessages.PatternHasAccessor : ErrorMessages.PatternHasMethod;\n      this.raise(prop.key.start, error);\n    } else if (prop.type === \"SpreadElement\" && !isLast) {\n      this.raiseRestNotLast(prop.start);\n    } else {\n      this.toAssignable(prop);\n    }\n  }\n\n  toAssignableList(exprList, trailingCommaPos) {\n    let end = exprList.length;\n\n    if (end) {\n      const last = exprList[end - 1];\n\n      if ((last == null ? void 0 : last.type) === \"RestElement\") {\n        --end;\n      } else if ((last == null ? void 0 : last.type) === \"SpreadElement\") {\n        last.type = \"RestElement\";\n        const arg = last.argument;\n        this.toAssignable(arg);\n\n        if (arg.type !== \"Identifier\" && arg.type !== \"MemberExpression\" && arg.type !== \"ArrayPattern\" && arg.type !== \"ObjectPattern\") {\n          this.unexpected(arg.start);\n        }\n\n        if (trailingCommaPos) {\n          this.raiseTrailingCommaAfterRest(trailingCommaPos);\n        }\n\n        --end;\n      }\n    }\n\n    for (let i = 0; i < end; i++) {\n      const elt = exprList[i];\n\n      if (elt) {\n        this.toAssignable(elt);\n\n        if (elt.type === \"RestElement\") {\n          this.raiseRestNotLast(elt.start);\n        }\n      }\n    }\n\n    return exprList;\n  }\n\n  toReferencedList(exprList, isParenthesizedExpr) {\n    return exprList;\n  }\n\n  toReferencedListDeep(exprList, isParenthesizedExpr) {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n\n    for (let _i = 0; _i < exprList.length; _i++) {\n      const expr = exprList[_i];\n\n      if ((expr == null ? void 0 : expr.type) === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n  }\n\n  parseSpread(refExpressionErrors, refNeedsArrowPos) {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseMaybeAssignAllowIn(refExpressionErrors, undefined, refNeedsArrowPos);\n    return this.finishNode(node, \"SpreadElement\");\n  }\n\n  parseRestBinding() {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case types.bracketL:\n        {\n          const node = this.startNode();\n          this.next();\n          node.elements = this.parseBindingList(types.bracketR, 93, true);\n          return this.finishNode(node, \"ArrayPattern\");\n        }\n\n      case types.braceL:\n        return this.parseObjectLike(types.braceR, true);\n    }\n\n    return this.parseIdentifier();\n  }\n\n  parseBindingList(close, closeCharCode, allowEmpty, allowModifiers) {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma);\n      }\n\n      if (allowEmpty && this.match(types.comma)) {\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(types.ellipsis)) {\n        elts.push(this.parseAssignableListItemTypes(this.parseRestBinding()));\n        this.checkCommaAfterRest(closeCharCode);\n        this.expect(close);\n        break;\n      } else {\n        const decorators = [];\n\n        if (this.match(types.at) && this.hasPlugin(\"decorators\")) {\n          this.raise(this.state.start, ErrorMessages.UnsupportedParameterDecorator);\n        }\n\n        while (this.match(types.at)) {\n          decorators.push(this.parseDecorator());\n        }\n\n        elts.push(this.parseAssignableListItem(allowModifiers, decorators));\n      }\n    }\n\n    return elts;\n  }\n\n  parseAssignableListItem(allowModifiers, decorators) {\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n\n    return elt;\n  }\n\n  parseAssignableListItemTypes(param) {\n    return param;\n  }\n\n  parseMaybeDefault(startPos, startLoc, left) {\n    var _startLoc, _startPos, _left;\n\n    startLoc = (_startLoc = startLoc) != null ? _startLoc : this.state.startLoc;\n    startPos = (_startPos = startPos) != null ? _startPos : this.state.start;\n    left = (_left = left) != null ? _left : this.parseBindingAtom();\n    if (!this.eat(types.eq)) return left;\n    const node = this.startNodeAt(startPos, startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssignAllowIn();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n\n  checkLVal(expr, bindingType = BIND_NONE, checkClashes, contextDescription, disallowLetBinding, strictModeChanged = false) {\n    switch (expr.type) {\n      case \"Identifier\":\n        if (this.state.strict && (strictModeChanged ? isStrictBindReservedWord(expr.name, this.inModule) : isStrictBindOnlyReservedWord(expr.name))) {\n          this.raise(expr.start, bindingType === BIND_NONE ? ErrorMessages.StrictEvalArguments : ErrorMessages.StrictEvalArgumentsBinding, expr.name);\n        }\n\n        if (checkClashes) {\n          const key = `_${expr.name}`;\n\n          if (checkClashes[key]) {\n            this.raise(expr.start, ErrorMessages.ParamDupe);\n          } else {\n            checkClashes[key] = true;\n          }\n        }\n\n        if (disallowLetBinding && expr.name === \"let\") {\n          this.raise(expr.start, ErrorMessages.LetInLexicalBinding);\n        }\n\n        if (!(bindingType & BIND_NONE)) {\n          this.scope.declareName(expr.name, bindingType, expr.start);\n        }\n\n        break;\n\n      case \"MemberExpression\":\n        if (bindingType !== BIND_NONE) {\n          this.raise(expr.start, ErrorMessages.InvalidPropertyBindingPattern);\n        }\n\n        break;\n\n      case \"ObjectPattern\":\n        for (let _i2 = 0, _expr$properties = expr.properties; _i2 < _expr$properties.length; _i2++) {\n          let prop = _expr$properties[_i2];\n          if (prop.type === \"ObjectProperty\") prop = prop.value;else if (prop.type === \"ObjectMethod\") continue;\n          this.checkLVal(prop, bindingType, checkClashes, \"object destructuring pattern\", disallowLetBinding);\n        }\n\n        break;\n\n      case \"ArrayPattern\":\n        for (let _i3 = 0, _expr$elements = expr.elements; _i3 < _expr$elements.length; _i3++) {\n          const elem = _expr$elements[_i3];\n\n          if (elem) {\n            this.checkLVal(elem, bindingType, checkClashes, \"array destructuring pattern\", disallowLetBinding);\n          }\n        }\n\n        break;\n\n      case \"AssignmentPattern\":\n        this.checkLVal(expr.left, bindingType, checkClashes, \"assignment pattern\");\n        break;\n\n      case \"RestElement\":\n        this.checkLVal(expr.argument, bindingType, checkClashes, \"rest element\");\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.checkLVal(expr.expression, bindingType, checkClashes, \"parenthesized expression\");\n        break;\n\n      default:\n        {\n          this.raise(expr.start, bindingType === BIND_NONE ? ErrorMessages.InvalidLhs : ErrorMessages.InvalidLhsBinding, contextDescription);\n        }\n    }\n  }\n\n  checkToRestConversion(node) {\n    if (node.argument.type !== \"Identifier\" && node.argument.type !== \"MemberExpression\") {\n      this.raise(node.argument.start, ErrorMessages.InvalidRestAssignmentPattern);\n    }\n  }\n\n  checkCommaAfterRest(close) {\n    if (this.match(types.comma)) {\n      if (this.lookaheadCharCode() === close) {\n        this.raiseTrailingCommaAfterRest(this.state.start);\n      } else {\n        this.raiseRestNotLast(this.state.start);\n      }\n    }\n  }\n\n  raiseRestNotLast(pos) {\n    throw this.raise(pos, ErrorMessages.ElementAfterRest);\n  }\n\n  raiseTrailingCommaAfterRest(pos) {\n    this.raise(pos, ErrorMessages.RestTrailingComma);\n  }\n\n}\n\nclass ExpressionParser extends LValParser {\n  checkProto(prop, isRecord, protoRef, refExpressionErrors) {\n    if (prop.type === \"SpreadElement\" || prop.type === \"ObjectMethod\" || prop.computed || prop.shorthand) {\n      return;\n    }\n\n    const key = prop.key;\n    const name = key.type === \"Identifier\" ? key.name : key.value;\n\n    if (name === \"__proto__\") {\n      if (isRecord) {\n        this.raise(key.start, ErrorMessages.RecordNoProto);\n        return;\n      }\n\n      if (protoRef.used) {\n        if (refExpressionErrors) {\n          if (refExpressionErrors.doubleProto === -1) {\n            refExpressionErrors.doubleProto = key.start;\n          }\n        } else {\n          this.raise(key.start, ErrorMessages.DuplicateProto);\n        }\n      }\n\n      protoRef.used = true;\n    }\n  }\n\n  shouldExitDescending(expr, potentialArrowAt) {\n    return expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt;\n  }\n\n  getExpression() {\n    let paramFlags = PARAM;\n\n    if (this.hasPlugin(\"topLevelAwait\") && this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n    this.nextToken();\n    const expr = this.parseExpression();\n\n    if (!this.match(types.eof)) {\n      this.unexpected();\n    }\n\n    expr.comments = this.state.comments;\n    expr.errors = this.state.errors;\n    return expr;\n  }\n\n  parseExpression(disallowIn, refExpressionErrors) {\n    if (disallowIn) {\n      return this.disallowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n    }\n\n    return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n  }\n\n  parseExpressionBase(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(refExpressionErrors);\n\n    if (this.match(types.comma)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.expressions = [expr];\n\n      while (this.eat(types.comma)) {\n        node.expressions.push(this.parseMaybeAssign(refExpressionErrors));\n      }\n\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n\n    return expr;\n  }\n\n  parseMaybeAssignDisallowIn(refExpressionErrors, afterLeftParse, refNeedsArrowPos) {\n    return this.disallowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos));\n  }\n\n  parseMaybeAssignAllowIn(refExpressionErrors, afterLeftParse, refNeedsArrowPos) {\n    return this.allowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos));\n  }\n\n  parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    if (this.isContextual(\"yield\")) {\n      if (this.prodParam.hasYield) {\n        let left = this.parseYield();\n\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startPos, startLoc);\n        }\n\n        return left;\n      } else {\n        this.state.exprAllowed = false;\n      }\n    }\n\n    let ownExpressionErrors;\n\n    if (refExpressionErrors) {\n      ownExpressionErrors = false;\n    } else {\n      refExpressionErrors = new ExpressionErrors();\n      ownExpressionErrors = true;\n    }\n\n    if (this.match(types.parenL) || this.match(types.name)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n\n    let left = this.parseMaybeConditional(refExpressionErrors, refNeedsArrowPos);\n\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startPos, startLoc);\n    }\n\n    if (this.state.type.isAssign) {\n      const node = this.startNodeAt(startPos, startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n\n      if (this.match(types.eq)) {\n        node.left = this.toAssignable(left);\n        refExpressionErrors.doubleProto = -1;\n      } else {\n        node.left = left;\n      }\n\n      if (refExpressionErrors.shorthandAssign >= node.left.start) {\n        refExpressionErrors.shorthandAssign = -1;\n      }\n\n      this.checkLVal(left, undefined, undefined, \"assignment expression\");\n      this.next();\n      node.right = this.parseMaybeAssign();\n      return this.finishNode(node, \"AssignmentExpression\");\n    } else if (ownExpressionErrors) {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    return left;\n  }\n\n  parseMaybeConditional(refExpressionErrors, refNeedsArrowPos) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseConditional(expr, startPos, startLoc, refNeedsArrowPos);\n  }\n\n  parseConditional(expr, startPos, startLoc, refNeedsArrowPos) {\n    if (this.eat(types.question)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssignAllowIn();\n      this.expect(types.colon);\n      node.alternate = this.parseMaybeAssign();\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    return expr;\n  }\n\n  parseExprOps(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnary(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseExprOp(expr, startPos, startLoc, -1);\n  }\n\n  parseExprOp(left, leftStartPos, leftStartLoc, minPrec) {\n    let prec = this.state.type.binop;\n\n    if (prec != null && (this.prodParam.hasIn || !this.match(types._in))) {\n      if (prec > minPrec) {\n        const op = this.state.type;\n\n        if (op === types.pipeline) {\n          this.expectPlugin(\"pipelineOperator\");\n\n          if (this.state.inFSharpPipelineDirectBody) {\n            return left;\n          }\n\n          this.state.inPipeline = true;\n          this.checkPipelineAtInfixOperator(left, leftStartPos);\n        }\n\n        const node = this.startNodeAt(leftStartPos, leftStartLoc);\n        node.left = left;\n        node.operator = this.state.value;\n\n        if (op === types.exponent && left.type === \"UnaryExpression\" && (this.options.createParenthesizedExpressions || !(left.extra && left.extra.parenthesized))) {\n          this.raise(left.argument.start, ErrorMessages.UnexpectedTokenUnaryExponentiation);\n        }\n\n        const logical = op === types.logicalOR || op === types.logicalAND;\n        const coalesce = op === types.nullishCoalescing;\n\n        if (coalesce) {\n          prec = types.logicalAND.binop;\n        }\n\n        this.next();\n\n        if (op === types.pipeline && this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"minimal\") {\n          if (this.match(types.name) && this.state.value === \"await\" && this.prodParam.hasAwait) {\n            throw this.raise(this.state.start, ErrorMessages.UnexpectedAwaitAfterPipelineBody);\n          }\n        }\n\n        node.right = this.parseExprOpRightExpr(op, prec);\n        this.finishNode(node, logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\");\n        const nextOp = this.state.type;\n\n        if (coalesce && (nextOp === types.logicalOR || nextOp === types.logicalAND) || logical && nextOp === types.nullishCoalescing) {\n          throw this.raise(this.state.start, ErrorMessages.MixingCoalesceWithLogical);\n        }\n\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n      }\n    }\n\n    return left;\n  }\n\n  parseExprOpRightExpr(op, prec) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    switch (op) {\n      case types.pipeline:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"smart\":\n            return this.withTopicPermittingContext(() => {\n              return this.parseSmartPipelineBody(this.parseExprOpBaseRightExpr(op, prec), startPos, startLoc);\n            });\n\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec);\n            });\n        }\n\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec);\n    }\n  }\n\n  parseExprOpBaseRightExpr(op, prec) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseExprOp(this.parseMaybeUnary(), startPos, startLoc, op.rightAssociative ? prec - 1 : prec);\n  }\n\n  parseMaybeUnary(refExpressionErrors) {\n    if (this.isContextual(\"await\") && this.isAwaitAllowed()) {\n      return this.parseAwait();\n    }\n\n    const update = this.match(types.incDec);\n    const node = this.startNode();\n\n    if (this.state.type.prefix) {\n      node.operator = this.state.value;\n      node.prefix = true;\n\n      if (this.match(types._throw)) {\n        this.expectPlugin(\"throwExpressions\");\n      }\n\n      const isDelete = this.match(types._delete);\n      this.next();\n      node.argument = this.parseMaybeUnary();\n      this.checkExpressionErrors(refExpressionErrors, true);\n\n      if (this.state.strict && isDelete) {\n        const arg = node.argument;\n\n        if (arg.type === \"Identifier\") {\n          this.raise(node.start, ErrorMessages.StrictDelete);\n        } else if ((arg.type === \"MemberExpression\" || arg.type === \"OptionalMemberExpression\") && arg.property.type === \"PrivateName\") {\n          this.raise(node.start, ErrorMessages.DeletePrivateField);\n        }\n      }\n\n      if (!update) {\n        return this.finishNode(node, \"UnaryExpression\");\n      }\n    }\n\n    return this.parseUpdate(node, update, refExpressionErrors);\n  }\n\n  parseUpdate(node, update, refExpressionErrors) {\n    if (update) {\n      this.checkLVal(node.argument, undefined, undefined, \"prefix operation\");\n      return this.finishNode(node, \"UpdateExpression\");\n    }\n\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refExpressionErrors);\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n\n    while (this.state.type.postfix && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.checkLVal(expr, undefined, undefined, \"postfix operation\");\n      this.next();\n      expr = this.finishNode(node, \"UpdateExpression\");\n    }\n\n    return expr;\n  }\n\n  parseExprSubscripts(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseSubscripts(expr, startPos, startLoc);\n  }\n\n  parseSubscripts(base, startPos, startLoc, noCalls) {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n      stop: false\n    };\n\n    do {\n      const oldMaybeInAsyncArrowHead = this.state.maybeInAsyncArrowHead;\n\n      if (state.maybeAsyncArrow) {\n        this.state.maybeInAsyncArrowHead = true;\n      }\n\n      base = this.parseSubscript(base, startPos, startLoc, noCalls, state);\n      state.maybeAsyncArrow = false;\n      this.state.maybeInAsyncArrowHead = oldMaybeInAsyncArrowHead;\n    } while (!state.stop);\n\n    return base;\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    if (!noCalls && this.eat(types.doubleColon)) {\n      return this.parseBind(base, startPos, startLoc, noCalls, state);\n    } else if (this.match(types.backQuote)) {\n      return this.parseTaggedTemplateExpression(base, startPos, startLoc, state);\n    }\n\n    let optional = false;\n\n    if (this.match(types.questionDot)) {\n      state.optionalChainMember = optional = true;\n\n      if (noCalls && this.lookaheadCharCode() === 40) {\n        state.stop = true;\n        return base;\n      }\n\n      this.next();\n    }\n\n    if (!noCalls && this.match(types.parenL)) {\n      return this.parseCoverCallAndAsyncArrowHead(base, startPos, startLoc, state, optional);\n    } else if (optional || this.match(types.bracketL) || this.eat(types.dot)) {\n      return this.parseMember(base, startPos, startLoc, state, optional);\n    } else {\n      state.stop = true;\n      return base;\n    }\n  }\n\n  parseMember(base, startPos, startLoc, state, optional) {\n    const node = this.startNodeAt(startPos, startLoc);\n    const computed = this.eat(types.bracketL);\n    node.object = base;\n    node.computed = computed;\n    const property = computed ? this.parseExpression() : this.parseMaybePrivateName(true);\n\n    if (property.type === \"PrivateName\") {\n      if (node.object.type === \"Super\") {\n        this.raise(startPos, ErrorMessages.SuperPrivateField);\n      }\n\n      this.classScope.usePrivateName(property.id.name, property.start);\n    }\n\n    node.property = property;\n\n    if (computed) {\n      this.expect(types.bracketR);\n    }\n\n    if (state.optionalChainMember) {\n      node.optional = optional;\n      return this.finishNode(node, \"OptionalMemberExpression\");\n    } else {\n      return this.finishNode(node, \"MemberExpression\");\n    }\n  }\n\n  parseBind(base, startPos, startLoc, noCalls, state) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    node.callee = this.parseNoCallExpr();\n    state.stop = true;\n    return this.parseSubscripts(this.finishNode(node, \"BindExpression\"), startPos, startLoc, noCalls);\n  }\n\n  parseCoverCallAndAsyncArrowHead(base, startPos, startLoc, state, optional) {\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldYieldPos = this.state.yieldPos;\n    const oldAwaitPos = this.state.awaitPos;\n    this.state.maybeInArrowParameters = true;\n    this.state.yieldPos = -1;\n    this.state.awaitPos = -1;\n    this.next();\n    let node = this.startNodeAt(startPos, startLoc);\n    node.callee = base;\n\n    if (state.optionalChainMember) {\n      node.optional = optional;\n    }\n\n    if (optional) {\n      node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n    } else {\n      node.arguments = this.parseCallExpressionArguments(types.parenR, state.maybeAsyncArrow, base.type === \"Import\", base.type !== \"Super\", node);\n    }\n\n    this.finishCallExpression(node, state.optionalChainMember);\n\n    if (state.maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n      state.stop = true;\n      node = this.parseAsyncArrowFromCallExpression(this.startNodeAt(startPos, startLoc), node);\n      this.checkYieldAwaitInDefaultParams();\n      this.state.yieldPos = oldYieldPos;\n      this.state.awaitPos = oldAwaitPos;\n    } else {\n      this.toReferencedListDeep(node.arguments);\n      if (oldYieldPos !== -1) this.state.yieldPos = oldYieldPos;\n\n      if (!this.isAwaitAllowed() && !oldMaybeInArrowParameters || oldAwaitPos !== -1) {\n        this.state.awaitPos = oldAwaitPos;\n      }\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node;\n  }\n\n  parseTaggedTemplateExpression(base, startPos, startLoc, state) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n\n    if (state.optionalChainMember) {\n      this.raise(startPos, ErrorMessages.OptionalChainingNoTemplate);\n    }\n\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n\n  atPossibleAsyncArrow(base) {\n    return base.type === \"Identifier\" && base.name === \"async\" && this.state.lastTokEnd === base.end && !this.canInsertSemicolon() && base.end - base.start === 5 && base.start === this.state.potentialArrowAt;\n  }\n\n  finishCallExpression(node, optional) {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length === 2) {\n        this.expectPlugin(\"moduleAttributes\");\n      }\n\n      if (node.arguments.length === 0 || node.arguments.length > 2) {\n        this.raise(node.start, ErrorMessages.ImportCallArity, this.hasPlugin(\"moduleAttributes\") ? \"one or two arguments\" : \"one argument\");\n      } else {\n        for (let _i = 0, _node$arguments = node.arguments; _i < _node$arguments.length; _i++) {\n          const arg = _node$arguments[_i];\n\n          if (arg.type === \"SpreadElement\") {\n            this.raise(arg.start, ErrorMessages.ImportCallSpreadArgument);\n          }\n        }\n      }\n    }\n\n    return this.finishNode(node, optional ? \"OptionalCallExpression\" : \"CallExpression\");\n  }\n\n  parseCallExpressionArguments(close, possibleAsyncArrow, dynamicImport, allowPlaceholder, nodeForExtra) {\n    const elts = [];\n    let innerParenStart;\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma);\n\n        if (this.match(close)) {\n          if (dynamicImport && !this.hasPlugin(\"moduleAttributes\")) {\n            this.raise(this.state.lastTokStart, ErrorMessages.ImportCallArgumentTrailingComma);\n          }\n\n          if (nodeForExtra) {\n            this.addExtra(nodeForExtra, \"trailingComma\", this.state.lastTokStart);\n          }\n\n          this.next();\n          break;\n        }\n      }\n\n      if (this.match(types.parenL) && !innerParenStart) {\n        innerParenStart = this.state.start;\n      }\n\n      elts.push(this.parseExprListItem(false, possibleAsyncArrow ? new ExpressionErrors() : undefined, possibleAsyncArrow ? {\n        start: 0\n      } : undefined, allowPlaceholder));\n    }\n\n    if (possibleAsyncArrow && innerParenStart && this.shouldParseAsyncArrow()) {\n      this.unexpected();\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return elts;\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(types.arrow) && !this.canInsertSemicolon();\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    var _call$extra;\n\n    this.expect(types.arrow);\n    this.parseArrowExpression(node, call.arguments, true, (_call$extra = call.extra) == null ? void 0 : _call$extra.trailingComma);\n    return node;\n  }\n\n  parseNoCallExpr() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n  }\n\n  parseExprAtom(refExpressionErrors) {\n    if (this.state.type === types.slash) this.readRegexp();\n    const canBeArrow = this.state.potentialArrowAt === this.state.start;\n    let node;\n\n    switch (this.state.type) {\n      case types._super:\n        return this.parseSuper();\n\n      case types._import:\n        node = this.startNode();\n        this.next();\n\n        if (this.match(types.dot)) {\n          return this.parseImportMetaProperty(node);\n        }\n\n        if (!this.match(types.parenL)) {\n          this.raise(this.state.lastTokStart, ErrorMessages.UnsupportedImport);\n        }\n\n        return this.finishNode(node, \"Import\");\n\n      case types._this:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n\n      case types.name:\n        {\n          const containsEsc = this.state.containsEsc;\n          const id = this.parseIdentifier();\n\n          if (!containsEsc && id.name === \"async\" && !this.canInsertSemicolon()) {\n            if (this.match(types._function)) {\n              const last = this.state.context.length - 1;\n\n              if (this.state.context[last] !== types$1.functionStatement) {\n                throw new Error(\"Internal error\");\n              }\n\n              this.state.context[last] = types$1.functionExpression;\n              this.next();\n              return this.parseFunction(this.startNodeAtNode(id), undefined, true);\n            } else if (this.match(types.name)) {\n              return this.parseAsyncArrowUnaryFunction(id);\n            }\n          }\n\n          if (canBeArrow && this.match(types.arrow) && !this.canInsertSemicolon()) {\n            this.next();\n            return this.parseArrowExpression(this.startNodeAtNode(id), [id], false);\n          }\n\n          return id;\n        }\n\n      case types._do:\n        {\n          return this.parseDo();\n        }\n\n      case types.regexp:\n        {\n          const value = this.state.value;\n          node = this.parseLiteral(value.value, \"RegExpLiteral\");\n          node.pattern = value.pattern;\n          node.flags = value.flags;\n          return node;\n        }\n\n      case types.num:\n        return this.parseLiteral(this.state.value, \"NumericLiteral\");\n\n      case types.bigint:\n        return this.parseLiteral(this.state.value, \"BigIntLiteral\");\n\n      case types.decimal:\n        return this.parseLiteral(this.state.value, \"DecimalLiteral\");\n\n      case types.string:\n        return this.parseLiteral(this.state.value, \"StringLiteral\");\n\n      case types._null:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"NullLiteral\");\n\n      case types._true:\n      case types._false:\n        return this.parseBooleanLiteral();\n\n      case types.parenL:\n        return this.parseParenAndDistinguishExpression(canBeArrow);\n\n      case types.bracketBarL:\n      case types.bracketHashL:\n        {\n          return this.parseArrayLike(this.state.type === types.bracketBarL ? types.bracketBarR : types.bracketR, false, true, refExpressionErrors);\n        }\n\n      case types.bracketL:\n        {\n          return this.parseArrayLike(types.bracketR, true, false, refExpressionErrors);\n        }\n\n      case types.braceBarL:\n      case types.braceHashL:\n        {\n          return this.parseObjectLike(this.state.type === types.braceBarL ? types.braceBarR : types.braceR, false, true, refExpressionErrors);\n        }\n\n      case types.braceL:\n        {\n          return this.parseObjectLike(types.braceR, false, false, refExpressionErrors);\n        }\n\n      case types._function:\n        return this.parseFunctionOrFunctionSent();\n\n      case types.at:\n        this.parseDecorators();\n\n      case types._class:\n        node = this.startNode();\n        this.takeDecorators(node);\n        return this.parseClass(node, false);\n\n      case types._new:\n        return this.parseNewOrNewTarget();\n\n      case types.backQuote:\n        return this.parseTemplate(false);\n\n      case types.doubleColon:\n        {\n          node = this.startNode();\n          this.next();\n          node.object = null;\n          const callee = node.callee = this.parseNoCallExpr();\n\n          if (callee.type === \"MemberExpression\") {\n            return this.finishNode(node, \"BindExpression\");\n          } else {\n            throw this.raise(callee.start, ErrorMessages.UnsupportedBind);\n          }\n        }\n\n      case types.hash:\n        {\n          if (this.state.inPipeline) {\n            node = this.startNode();\n\n            if (this.getPluginOption(\"pipelineOperator\", \"proposal\") !== \"smart\") {\n              this.raise(node.start, ErrorMessages.PrimaryTopicRequiresSmartPipeline);\n            }\n\n            this.next();\n\n            if (!this.primaryTopicReferenceIsAllowedInCurrentTopicContext()) {\n              this.raise(node.start, ErrorMessages.PrimaryTopicNotAllowed);\n            }\n\n            this.registerTopicReference();\n            return this.finishNode(node, \"PipelinePrimaryTopicReference\");\n          }\n\n          const nextCh = this.input.codePointAt(this.state.end);\n\n          if (isIdentifierStart(nextCh) || nextCh === 92) {\n            const start = this.state.start;\n            node = this.parseMaybePrivateName(true);\n\n            if (this.match(types._in)) {\n              this.expectPlugin(\"privateIn\");\n              this.classScope.usePrivateName(node.id.name, node.start);\n            } else if (this.hasPlugin(\"privateIn\")) {\n              this.raise(this.state.start, ErrorMessages.PrivateInExpectedIn, node.id.name);\n            } else {\n              throw this.unexpected(start);\n            }\n\n            return node;\n          }\n        }\n\n      case types.relational:\n        {\n          if (this.state.value === \"<\") {\n            const lookaheadCh = this.input.codePointAt(this.nextTokenStart());\n\n            if (isIdentifierStart(lookaheadCh) || lookaheadCh === 62) {\n                this.expectOnePlugin([\"jsx\", \"flow\", \"typescript\"]);\n              }\n          }\n        }\n\n      default:\n        throw this.unexpected();\n    }\n  }\n\n  parseAsyncArrowUnaryFunction(id) {\n    const node = this.startNodeAtNode(id);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldMaybeInAsyncArrowHead = this.state.maybeInAsyncArrowHead;\n    const oldYieldPos = this.state.yieldPos;\n    const oldAwaitPos = this.state.awaitPos;\n    this.state.maybeInArrowParameters = true;\n    this.state.maybeInAsyncArrowHead = true;\n    this.state.yieldPos = -1;\n    this.state.awaitPos = -1;\n    const params = [this.parseIdentifier()];\n\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(this.state.pos, ErrorMessages.LineTerminatorBeforeArrow);\n    }\n\n    this.expect(types.arrow);\n    this.checkYieldAwaitInDefaultParams();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.maybeInAsyncArrowHead = oldMaybeInAsyncArrowHead;\n    this.state.yieldPos = oldYieldPos;\n    this.state.awaitPos = oldAwaitPos;\n    this.parseArrowExpression(node, params, true);\n    return node;\n  }\n\n  parseDo() {\n    this.expectPlugin(\"doExpressions\");\n    const node = this.startNode();\n    this.next();\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    node.body = this.parseBlock();\n    this.state.labels = oldLabels;\n    return this.finishNode(node, \"DoExpression\");\n  }\n\n  parseSuper() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.match(types.parenL) && !this.scope.allowDirectSuper && !this.options.allowSuperOutsideMethod) {\n      this.raise(node.start, ErrorMessages.SuperNotAllowed);\n    } else if (!this.scope.allowSuper && !this.options.allowSuperOutsideMethod) {\n      this.raise(node.start, ErrorMessages.UnexpectedSuper);\n    }\n\n    if (!this.match(types.parenL) && !this.match(types.bracketL) && !this.match(types.dot)) {\n      this.raise(node.start, ErrorMessages.UnsupportedSuper);\n    }\n\n    return this.finishNode(node, \"Super\");\n  }\n\n  parseBooleanLiteral() {\n    const node = this.startNode();\n    node.value = this.match(types._true);\n    this.next();\n    return this.finishNode(node, \"BooleanLiteral\");\n  }\n\n  parseMaybePrivateName(isPrivateNameAllowed) {\n    const isPrivate = this.match(types.hash);\n\n    if (isPrivate) {\n      this.expectOnePlugin([\"classPrivateProperties\", \"classPrivateMethods\"]);\n\n      if (!isPrivateNameAllowed) {\n        this.raise(this.state.pos, ErrorMessages.UnexpectedPrivateField);\n      }\n\n      const node = this.startNode();\n      this.next();\n      this.assertNoSpace(\"Unexpected space between # and identifier\");\n      node.id = this.parseIdentifier(true);\n      return this.finishNode(node, \"PrivateName\");\n    } else {\n      return this.parseIdentifier(true);\n    }\n  }\n\n  parseFunctionOrFunctionSent() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.prodParam.hasYield && this.match(types.dot)) {\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"function\");\n      this.next();\n      return this.parseMetaProperty(node, meta, \"sent\");\n    }\n\n    return this.parseFunction(node);\n  }\n\n  parseMetaProperty(node, meta, propertyName) {\n    node.meta = meta;\n\n    if (meta.name === \"function\" && propertyName === \"sent\") {\n      if (this.isContextual(propertyName)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        this.unexpected();\n      }\n    }\n\n    const containsEsc = this.state.containsEsc;\n    node.property = this.parseIdentifier(true);\n\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(node.property.start, ErrorMessages.UnsupportedMetaProperty, meta.name, propertyName);\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  parseImportMetaProperty(node) {\n    const id = this.createIdentifier(this.startNodeAtNode(node), \"import\");\n    this.next();\n\n    if (this.isContextual(\"meta\")) {\n      if (!this.inModule) {\n        this.raiseWithData(id.start, {\n          code: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\"\n        }, ErrorMessages.ImportMetaOutsideModule);\n      }\n\n      this.sawUnambiguousESM = true;\n    }\n\n    return this.parseMetaProperty(node, id, \"meta\");\n  }\n\n  parseLiteral(value, type, startPos, startLoc) {\n    startPos = startPos || this.state.start;\n    startLoc = startLoc || this.state.startLoc;\n    const node = this.startNodeAt(startPos, startLoc);\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(node, \"raw\", this.input.slice(startPos, this.state.end));\n    node.value = value;\n    this.next();\n    return this.finishNode(node, type);\n  }\n\n  parseParenAndDistinguishExpression(canBeArrow) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let val;\n    this.next();\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldYieldPos = this.state.yieldPos;\n    const oldAwaitPos = this.state.awaitPos;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.yieldPos = -1;\n    this.state.awaitPos = -1;\n    this.state.inFSharpPipelineDirectBody = false;\n    const innerStartPos = this.state.start;\n    const innerStartLoc = this.state.startLoc;\n    const exprList = [];\n    const refExpressionErrors = new ExpressionErrors();\n    const refNeedsArrowPos = {\n      start: 0\n    };\n    let first = true;\n    let spreadStart;\n    let optionalCommaStart;\n\n    while (!this.match(types.parenR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma, refNeedsArrowPos.start || null);\n\n        if (this.match(types.parenR)) {\n          optionalCommaStart = this.state.start;\n          break;\n        }\n      }\n\n      if (this.match(types.ellipsis)) {\n        const spreadNodeStartPos = this.state.start;\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStart = this.state.start;\n        exprList.push(this.parseParenItem(this.parseRestBinding(), spreadNodeStartPos, spreadNodeStartLoc));\n        this.checkCommaAfterRest(41);\n        break;\n      } else {\n        exprList.push(this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem, refNeedsArrowPos));\n      }\n    }\n\n    const innerEndPos = this.state.lastTokEnd;\n    const innerEndLoc = this.state.lastTokEndLoc;\n    this.expect(types.parenR);\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let arrowNode = this.startNodeAt(startPos, startLoc);\n\n    if (canBeArrow && this.shouldParseArrow() && (arrowNode = this.parseArrow(arrowNode))) {\n      if (!this.isAwaitAllowed() && !this.state.maybeInAsyncArrowHead) {\n        this.state.awaitPos = oldAwaitPos;\n      }\n\n      this.checkYieldAwaitInDefaultParams();\n      this.state.yieldPos = oldYieldPos;\n      this.state.awaitPos = oldAwaitPos;\n\n      for (let _i2 = 0; _i2 < exprList.length; _i2++) {\n        const param = exprList[_i2];\n\n        if (param.extra && param.extra.parenthesized) {\n          this.unexpected(param.extra.parenStart);\n        }\n      }\n\n      this.parseArrowExpression(arrowNode, exprList, false);\n      return arrowNode;\n    }\n\n    if (oldYieldPos !== -1) this.state.yieldPos = oldYieldPos;\n    if (oldAwaitPos !== -1) this.state.awaitPos = oldAwaitPos;\n\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStart);\n    }\n\n    if (optionalCommaStart) this.unexpected(optionalCommaStart);\n    if (spreadStart) this.unexpected(spreadStart);\n    this.checkExpressionErrors(refExpressionErrors, true);\n    if (refNeedsArrowPos.start) this.unexpected(refNeedsArrowPos.start);\n    this.toReferencedListDeep(exprList, true);\n\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartPos, innerStartLoc);\n      val.expressions = exprList;\n      this.finishNodeAt(val, \"SequenceExpression\", innerEndPos, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n\n    if (!this.options.createParenthesizedExpressions) {\n      this.addExtra(val, \"parenthesized\", true);\n      this.addExtra(val, \"parenStart\", startPos);\n      return val;\n    }\n\n    const parenExpression = this.startNodeAt(startPos, startLoc);\n    parenExpression.expression = val;\n    this.finishNode(parenExpression, \"ParenthesizedExpression\");\n    return parenExpression;\n  }\n\n  shouldParseArrow() {\n    return !this.canInsertSemicolon();\n  }\n\n  parseArrow(node) {\n    if (this.eat(types.arrow)) {\n      return node;\n    }\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    return node;\n  }\n\n  parseNewOrNewTarget() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.match(types.dot)) {\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"new\");\n      this.next();\n      const metaProp = this.parseMetaProperty(node, meta, \"target\");\n\n      if (!this.scope.inNonArrowFunction && !this.scope.inClass) {\n        let error = ErrorMessages.UnexpectedNewTarget;\n\n        if (this.hasPlugin(\"classProperties\")) {\n          error += \" or class properties\";\n        }\n\n        this.raise(metaProp.start, error);\n      }\n\n      return metaProp;\n    }\n\n    return this.parseNew(node);\n  }\n\n  parseNew(node) {\n    node.callee = this.parseNoCallExpr();\n\n    if (node.callee.type === \"Import\") {\n      this.raise(node.callee.start, ErrorMessages.ImportCallNotNewExpression);\n    } else if (node.callee.type === \"OptionalMemberExpression\" || node.callee.type === \"OptionalCallExpression\") {\n      this.raise(this.state.lastTokEnd, ErrorMessages.OptionalChainingNoNew);\n    } else if (this.eat(types.questionDot)) {\n      this.raise(this.state.start, ErrorMessages.OptionalChainingNoNew);\n    }\n\n    this.parseNewArguments(node);\n    return this.finishNode(node, \"NewExpression\");\n  }\n\n  parseNewArguments(node) {\n    if (this.eat(types.parenL)) {\n      const args = this.parseExprList(types.parenR);\n      this.toReferencedList(args);\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n  }\n\n  parseTemplateElement(isTagged) {\n    const elem = this.startNode();\n\n    if (this.state.value === null) {\n      if (!isTagged) {\n        this.raise(this.state.start + 1, ErrorMessages.InvalidEscapeSequenceTemplate);\n      }\n    }\n\n    elem.value = {\n      raw: this.input.slice(this.state.start, this.state.end).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: this.state.value\n    };\n    this.next();\n    elem.tail = this.match(types.backQuote);\n    return this.finishNode(elem, \"TemplateElement\");\n  }\n\n  parseTemplate(isTagged) {\n    const node = this.startNode();\n    this.next();\n    node.expressions = [];\n    let curElt = this.parseTemplateElement(isTagged);\n    node.quasis = [curElt];\n\n    while (!curElt.tail) {\n      this.expect(types.dollarBraceL);\n      node.expressions.push(this.parseExpression());\n      this.expect(types.braceR);\n      node.quasis.push(curElt = this.parseTemplateElement(isTagged));\n    }\n\n    this.next();\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n\n  parseObjectLike(close, isPattern, isRecord, refExpressionErrors) {\n    if (isRecord) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const propHash = Object.create(null);\n    let first = true;\n    const node = this.startNode();\n    node.properties = [];\n    this.next();\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma);\n\n        if (this.match(close)) {\n          this.addExtra(node, \"trailingComma\", this.state.lastTokStart);\n          this.next();\n          break;\n        }\n      }\n\n      const prop = this.parsePropertyDefinition(isPattern, refExpressionErrors);\n\n      if (!isPattern) {\n        this.checkProto(prop, isRecord, propHash, refExpressionErrors);\n      }\n\n      if (isRecord && prop.type !== \"ObjectProperty\" && prop.type !== \"SpreadElement\") {\n        this.raise(prop.start, ErrorMessages.InvalidRecordProperty);\n      }\n\n      if (prop.shorthand) {\n        this.addExtra(prop, \"shorthand\", true);\n      }\n\n      node.properties.push(prop);\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let type = \"ObjectExpression\";\n\n    if (isPattern) {\n      type = \"ObjectPattern\";\n    } else if (isRecord) {\n      type = \"RecordExpression\";\n    }\n\n    return this.finishNode(node, type);\n  }\n\n  maybeAsyncOrAccessorProp(prop) {\n    return !prop.computed && prop.key.type === \"Identifier\" && (this.isLiteralPropertyName() || this.match(types.bracketL) || this.match(types.star));\n  }\n\n  parsePropertyDefinition(isPattern, refExpressionErrors) {\n    let decorators = [];\n\n    if (this.match(types.at)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(this.state.start, ErrorMessages.UnsupportedPropertyDecorator);\n      }\n\n      while (this.match(types.at)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n\n    const prop = this.startNode();\n    let isGenerator = false;\n    let isAsync = false;\n    let isAccessor = false;\n    let startPos;\n    let startLoc;\n\n    if (this.match(types.ellipsis)) {\n      if (decorators.length) this.unexpected();\n\n      if (isPattern) {\n        this.next();\n        prop.argument = this.parseIdentifier();\n        this.checkCommaAfterRest(125);\n        return this.finishNode(prop, \"RestElement\");\n      }\n\n      return this.parseSpread();\n    }\n\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    prop.method = false;\n\n    if (isPattern || refExpressionErrors) {\n      startPos = this.state.start;\n      startLoc = this.state.startLoc;\n    }\n\n    if (!isPattern) {\n      isGenerator = this.eat(types.star);\n    }\n\n    const containsEsc = this.state.containsEsc;\n    const key = this.parsePropertyName(prop, false);\n\n    if (!isPattern && !isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {\n      const keyName = key.name;\n\n      if (keyName === \"async\" && !this.hasPrecedingLineBreak()) {\n        isAsync = true;\n        isGenerator = this.eat(types.star);\n        this.parsePropertyName(prop, false);\n      }\n\n      if (keyName === \"get\" || keyName === \"set\") {\n        isAccessor = true;\n        prop.kind = keyName;\n\n        if (this.match(types.star)) {\n          isGenerator = true;\n          this.raise(this.state.pos, ErrorMessages.AccessorIsGenerator, keyName);\n          this.next();\n        }\n\n        this.parsePropertyName(prop, false);\n      }\n    }\n\n    this.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);\n    return prop;\n  }\n\n  getGetterSetterExpectedParamCount(method) {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n\n  checkGetterSetterParams(method) {\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const start = method.start;\n\n    if (method.params.length !== paramCount) {\n      if (method.kind === \"get\") {\n        this.raise(start, ErrorMessages.BadGetterArity);\n      } else {\n        this.raise(start, ErrorMessages.BadSetterArity);\n      }\n    }\n\n    if (method.kind === \"set\" && method.params[method.params.length - 1].type === \"RestElement\") {\n      this.raise(start, ErrorMessages.BadSetterRestParameter);\n    }\n  }\n\n  parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {\n    if (isAccessor) {\n      this.parseMethod(prop, isGenerator, false, false, false, \"ObjectMethod\");\n      this.checkGetterSetterParams(prop);\n      return prop;\n    }\n\n    if (isAsync || isGenerator || this.match(types.parenL)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(prop, isGenerator, isAsync, false, false, \"ObjectMethod\");\n    }\n  }\n\n  parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {\n    prop.shorthand = false;\n\n    if (this.eat(types.colon)) {\n      prop.value = isPattern ? this.parseMaybeDefault(this.state.start, this.state.startLoc) : this.parseMaybeAssignAllowIn(refExpressionErrors);\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      this.checkReservedWord(prop.key.name, prop.key.start, true, false);\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key.__clone());\n      } else if (this.match(types.eq) && refExpressionErrors) {\n        if (refExpressionErrors.shorthandAssign === -1) {\n          refExpressionErrors.shorthandAssign = this.state.start;\n        }\n\n        prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key.__clone());\n      } else {\n        prop.value = prop.key.__clone();\n      }\n\n      prop.shorthand = true;\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n  }\n\n  parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {\n    const node = this.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) || this.parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors);\n    if (!node) this.unexpected();\n    return node;\n  }\n\n  parsePropertyName(prop, isPrivateNameAllowed) {\n    if (this.eat(types.bracketL)) {\n      prop.computed = true;\n      prop.key = this.parseMaybeAssignAllowIn();\n      this.expect(types.bracketR);\n    } else {\n      const oldInPropertyName = this.state.inPropertyName;\n      this.state.inPropertyName = true;\n      prop.key = this.match(types.num) || this.match(types.string) || this.match(types.bigint) || this.match(types.decimal) ? this.parseExprAtom() : this.parseMaybePrivateName(isPrivateNameAllowed);\n\n      if (prop.key.type !== \"PrivateName\") {\n        prop.computed = false;\n      }\n\n      this.state.inPropertyName = oldInPropertyName;\n    }\n\n    return prop.key;\n  }\n\n  initFunction(node, isAsync) {\n    node.id = null;\n    node.generator = false;\n    node.async = !!isAsync;\n  }\n\n  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {\n    const oldYieldPos = this.state.yieldPos;\n    const oldAwaitPos = this.state.awaitPos;\n    this.state.yieldPos = -1;\n    this.state.awaitPos = -1;\n    this.initFunction(node, isAsync);\n    node.generator = !!isGenerator;\n    const allowModifiers = isConstructor;\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_SUPER | (inClassScope ? SCOPE_CLASS : 0) | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    this.parseFunctionParams(node, allowModifiers);\n    this.parseFunctionBodyAndFinish(node, type, true);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.yieldPos = oldYieldPos;\n    this.state.awaitPos = oldAwaitPos;\n    return node;\n  }\n\n  parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {\n    if (isTuple) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const node = this.startNode();\n    this.next();\n    node.elements = this.parseExprList(close, !isTuple, refExpressionErrors, node);\n\n    if (canBePattern && !this.state.maybeInArrowParameters) {\n      this.toReferencedList(node.elements);\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return this.finishNode(node, isTuple ? \"TupleExpression\" : \"ArrayExpression\");\n  }\n\n  parseArrowExpression(node, params, isAsync, trailingCommaPos) {\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    let flags = functionFlags(isAsync, false);\n\n    if (!this.match(types.bracketL) && this.prodParam.hasIn) {\n      flags |= PARAM_IN;\n    }\n\n    this.prodParam.enter(flags);\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldYieldPos = this.state.yieldPos;\n    const oldAwaitPos = this.state.awaitPos;\n\n    if (params) {\n      this.state.maybeInArrowParameters = true;\n      this.setArrowFunctionParameters(node, params, trailingCommaPos);\n    }\n\n    this.state.maybeInArrowParameters = false;\n    this.state.yieldPos = -1;\n    this.state.awaitPos = -1;\n    this.parseFunctionBody(node, true);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.yieldPos = oldYieldPos;\n    this.state.awaitPos = oldAwaitPos;\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n\n  setArrowFunctionParameters(node, params, trailingCommaPos) {\n    node.params = this.toAssignableList(params, trailingCommaPos);\n  }\n\n  parseFunctionBodyAndFinish(node, type, isMethod = false) {\n    this.parseFunctionBody(node, false, isMethod);\n    this.finishNode(node, type);\n  }\n\n  parseFunctionBody(node, allowExpression, isMethod = false) {\n    const isExpression = allowExpression && !this.match(types.braceL);\n    const oldInParameters = this.state.inParameters;\n    this.state.inParameters = false;\n\n    if (isExpression) {\n      node.body = this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const oldStrict = this.state.strict;\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n      this.prodParam.enter(this.prodParam.currentFlags() | PARAM_RETURN);\n      node.body = this.parseBlock(true, false, hasStrictModeDirective => {\n        const nonSimple = !this.isSimpleParamList(node.params);\n\n        if (hasStrictModeDirective && nonSimple) {\n          const errorPos = (node.kind === \"method\" || node.kind === \"constructor\") && !!node.key ? node.key.end : node.start;\n          this.raise(errorPos, ErrorMessages.IllegalLanguageModeDirective);\n        }\n\n        const strictModeChanged = !oldStrict && this.state.strict;\n        this.checkParams(node, !this.state.strict && !allowExpression && !isMethod && !nonSimple, allowExpression, strictModeChanged);\n\n        if (this.state.strict && node.id) {\n          this.checkLVal(node.id, BIND_OUTSIDE, undefined, \"function name\", undefined, strictModeChanged);\n        }\n      });\n      this.prodParam.exit();\n      this.state.labels = oldLabels;\n    }\n\n    this.state.inParameters = oldInParameters;\n  }\n\n  isSimpleParamList(params) {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (params[i].type !== \"Identifier\") return false;\n    }\n\n    return true;\n  }\n\n  checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged = true) {\n    const nameHash = Object.create(null);\n\n    for (let i = 0; i < node.params.length; i++) {\n      this.checkLVal(node.params[i], BIND_VAR, allowDuplicates ? null : nameHash, \"function parameter list\", undefined, strictModeChanged);\n    }\n  }\n\n  parseExprList(close, allowEmpty, refExpressionErrors, nodeForExtra) {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma);\n\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addExtra(nodeForExtra, \"trailingComma\", this.state.lastTokStart);\n          }\n\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n    }\n\n    return elts;\n  }\n\n  parseExprListItem(allowEmpty, refExpressionErrors, refNeedsArrowPos, allowPlaceholder) {\n    let elt;\n\n    if (this.match(types.comma)) {\n      if (!allowEmpty) {\n        this.raise(this.state.pos, ErrorMessages.UnexpectedToken, \",\");\n      }\n\n      elt = null;\n    } else if (this.match(types.ellipsis)) {\n      const spreadNodeStartPos = this.state.start;\n      const spreadNodeStartLoc = this.state.startLoc;\n      elt = this.parseParenItem(this.parseSpread(refExpressionErrors, refNeedsArrowPos), spreadNodeStartPos, spreadNodeStartLoc);\n    } else if (this.match(types.question)) {\n      this.expectPlugin(\"partialApplication\");\n\n      if (!allowPlaceholder) {\n        this.raise(this.state.start, ErrorMessages.UnexpectedArgumentPlaceholder);\n      }\n\n      const node = this.startNode();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem, refNeedsArrowPos);\n    }\n\n    return elt;\n  }\n\n  parseIdentifier(liberal) {\n    const node = this.startNode();\n    const name = this.parseIdentifierName(node.start, liberal);\n    return this.createIdentifier(node, name);\n  }\n\n  createIdentifier(node, name) {\n    node.name = name;\n    node.loc.identifierName = name;\n    return this.finishNode(node, \"Identifier\");\n  }\n\n  parseIdentifierName(pos, liberal) {\n    let name;\n    const {\n      start,\n      type\n    } = this.state;\n\n    if (type === types.name) {\n      name = this.state.value;\n    } else if (type.keyword) {\n      name = type.keyword;\n      const curContext = this.curContext();\n\n      if ((type === types._class || type === types._function) && (curContext === types$1.functionStatement || curContext === types$1.functionExpression)) {\n        this.state.context.pop();\n      }\n    } else {\n      throw this.unexpected();\n    }\n\n    if (liberal) {\n      this.state.type = types.name;\n    } else {\n      this.checkReservedWord(name, start, !!type.keyword, false);\n    }\n\n    this.next();\n    return name;\n  }\n\n  checkReservedWord(word, startLoc, checkKeywords, isBinding) {\n    if (this.prodParam.hasYield && word === \"yield\") {\n      this.raise(startLoc, ErrorMessages.YieldBindingIdentifier);\n      return;\n    }\n\n    if (word === \"await\") {\n      if (this.prodParam.hasAwait) {\n        this.raise(startLoc, ErrorMessages.AwaitBindingIdentifier);\n        return;\n      }\n\n      if (this.state.awaitPos === -1 && (this.state.maybeInAsyncArrowHead || this.isAwaitAllowed())) {\n        this.state.awaitPos = this.state.start;\n      }\n    }\n\n    if (this.scope.inClass && !this.scope.inNonArrowFunction && word === \"arguments\") {\n      this.raise(startLoc, ErrorMessages.ArgumentsDisallowedInInitializer);\n      return;\n    }\n\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(startLoc, ErrorMessages.UnexpectedKeyword, word);\n      return;\n    }\n\n    const reservedTest = !this.state.strict ? isReservedWord : isBinding ? isStrictBindReservedWord : isStrictReservedWord;\n\n    if (reservedTest(word, this.inModule)) {\n      if (!this.prodParam.hasAwait && word === \"await\") {\n        this.raise(startLoc, ErrorMessages.AwaitNotInAsyncFunction);\n      } else {\n        this.raise(startLoc, ErrorMessages.UnexpectedReservedWord, word);\n      }\n    }\n  }\n\n  isAwaitAllowed() {\n    if (this.scope.inFunction) return this.prodParam.hasAwait;\n    if (this.options.allowAwaitOutsideFunction) return true;\n\n    if (this.hasPlugin(\"topLevelAwait\")) {\n      return this.inModule && this.prodParam.hasAwait;\n    }\n\n    return false;\n  }\n\n  parseAwait() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.state.inParameters) {\n      this.raise(node.start, ErrorMessages.AwaitExpressionFormalParameter);\n    } else if (this.state.awaitPos === -1) {\n      this.state.awaitPos = node.start;\n    }\n\n    if (this.eat(types.star)) {\n      this.raise(node.start, ErrorMessages.ObsoleteAwaitStar);\n    }\n\n    if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n      if (this.hasPrecedingLineBreak() || this.match(types.plusMin) || this.match(types.parenL) || this.match(types.bracketL) || this.match(types.backQuote) || this.match(types.regexp) || this.match(types.slash) || this.hasPlugin(\"v8intrinsic\") && this.match(types.modulo)) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary();\n    }\n\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n\n  parseYield() {\n    const node = this.startNode();\n\n    if (this.state.inParameters) {\n      this.raise(node.start, ErrorMessages.YieldInParameter);\n    } else if (this.state.yieldPos === -1) {\n      this.state.yieldPos = node.start;\n    }\n\n    this.next();\n\n    if (this.match(types.semi) || !this.match(types.star) && !this.state.type.startsExpr || this.hasPrecedingLineBreak()) {\n      node.delegate = false;\n      node.argument = null;\n    } else {\n      node.delegate = this.eat(types.star);\n      node.argument = this.parseMaybeAssign();\n    }\n\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  checkPipelineAtInfixOperator(left, leftStartPos) {\n    if (this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"smart\") {\n      if (left.type === \"SequenceExpression\") {\n        this.raise(leftStartPos, ErrorMessages.PipelineHeadSequenceExpression);\n      }\n    }\n  }\n\n  parseSmartPipelineBody(childExpression, startPos, startLoc) {\n    this.checkSmartPipelineBodyEarlyErrors(childExpression, startPos);\n    return this.parseSmartPipelineBodyInStyle(childExpression, startPos, startLoc);\n  }\n\n  checkSmartPipelineBodyEarlyErrors(childExpression, startPos) {\n    if (this.match(types.arrow)) {\n      throw this.raise(this.state.start, ErrorMessages.PipelineBodyNoArrow);\n    } else if (childExpression.type === \"SequenceExpression\") {\n      this.raise(startPos, ErrorMessages.PipelineBodySequenceExpression);\n    }\n  }\n\n  parseSmartPipelineBodyInStyle(childExpression, startPos, startLoc) {\n    const bodyNode = this.startNodeAt(startPos, startLoc);\n    const isSimpleReference = this.isSimpleReference(childExpression);\n\n    if (isSimpleReference) {\n      bodyNode.callee = childExpression;\n    } else {\n      if (!this.topicReferenceWasUsedInCurrentTopicContext()) {\n        this.raise(startPos, ErrorMessages.PipelineTopicUnused);\n      }\n\n      bodyNode.expression = childExpression;\n    }\n\n    return this.finishNode(bodyNode, isSimpleReference ? \"PipelineBareFunction\" : \"PipelineTopicExpression\");\n  }\n\n  isSimpleReference(expression) {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return !expression.computed && this.isSimpleReference(expression.object);\n\n      case \"Identifier\":\n        return true;\n\n      default:\n        return false;\n    }\n  }\n\n  withTopicPermittingContext(callback) {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      maxNumOfResolvableTopics: 1,\n      maxTopicIndex: null\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  withTopicForbiddingContext(callback) {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      maxNumOfResolvableTopics: 0,\n      maxTopicIndex: null\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  withSoloAwaitPermittingContext(callback) {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n\n  allowInAnd(callback) {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToSet = PARAM_IN & ~flags;\n\n    if (prodParamToSet) {\n      this.prodParam.enter(flags | PARAM_IN);\n\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n\n    return callback();\n  }\n\n  disallowInAnd(callback) {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToClear = PARAM_IN & flags;\n\n    if (prodParamToClear) {\n      this.prodParam.enter(flags & ~PARAM_IN);\n\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n\n    return callback();\n  }\n\n  registerTopicReference() {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n\n  primaryTopicReferenceIsAllowedInCurrentTopicContext() {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n\n  topicReferenceWasUsedInCurrentTopicContext() {\n    return this.state.topicContext.maxTopicIndex != null && this.state.topicContext.maxTopicIndex >= 0;\n  }\n\n  parseFSharpPipelineBody(prec) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n    const ret = this.parseExprOp(this.parseMaybeUnary(), startPos, startLoc, prec);\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return ret;\n  }\n\n}\n\nconst loopLabel = {\n  kind: \"loop\"\n},\n      switchLabel = {\n  kind: \"switch\"\n};\nconst FUNC_NO_FLAGS = 0b000,\n      FUNC_STATEMENT = 0b001,\n      FUNC_HANGING_STATEMENT = 0b010,\n      FUNC_NULLABLE_ID = 0b100;\nclass StatementParser extends ExpressionParser {\n  parseTopLevel(file, program) {\n    program.sourceType = this.options.sourceType;\n    program.interpreter = this.parseInterpreterDirective();\n    this.parseBlockBody(program, true, true, types.eof);\n\n    if (this.inModule && !this.options.allowUndeclaredExports && this.scope.undefinedExports.size > 0) {\n      for (let _i = 0, _Array$from = Array.from(this.scope.undefinedExports); _i < _Array$from.length; _i++) {\n        const [name] = _Array$from[_i];\n        const pos = this.scope.undefinedExports.get(name);\n        this.raise(pos, ErrorMessages.ModuleExportUndefined, name);\n      }\n    }\n\n    file.program = this.finishNode(program, \"Program\");\n    file.comments = this.state.comments;\n    if (this.options.tokens) file.tokens = this.tokens;\n    return this.finishNode(file, \"File\");\n  }\n\n  stmtToDirective(stmt) {\n    const expr = stmt.expression;\n    const directiveLiteral = this.startNodeAt(expr.start, expr.loc.start);\n    const directive = this.startNodeAt(stmt.start, stmt.loc.start);\n    const raw = this.input.slice(expr.start, expr.end);\n    const val = directiveLiteral.value = raw.slice(1, -1);\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n    directive.value = this.finishNodeAt(directiveLiteral, \"DirectiveLiteral\", expr.end, expr.loc.end);\n    return this.finishNodeAt(directive, \"Directive\", stmt.end, stmt.loc.end);\n  }\n\n  parseInterpreterDirective() {\n    if (!this.match(types.interpreterDirective)) {\n      return null;\n    }\n\n    const node = this.startNode();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n\n  isLet(context) {\n    if (!this.isContextual(\"let\")) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const nextCh = this.input.charCodeAt(next);\n    if (nextCh === 91) return true;\n    if (context) return false;\n    if (nextCh === 123) return true;\n\n    if (isIdentifierStart(nextCh)) {\n      let pos = next + 1;\n\n      while (isIdentifierChar(this.input.charCodeAt(pos))) {\n        ++pos;\n      }\n\n      const ident = this.input.slice(next, pos);\n      if (!keywordRelationalOperator.test(ident)) return true;\n    }\n\n    return false;\n  }\n\n  parseStatement(context, topLevel) {\n    if (this.match(types.at)) {\n      this.parseDecorators(true);\n    }\n\n    return this.parseStatementContent(context, topLevel);\n  }\n\n  parseStatementContent(context, topLevel) {\n    let starttype = this.state.type;\n    const node = this.startNode();\n    let kind;\n\n    if (this.isLet(context)) {\n      starttype = types._var;\n      kind = \"let\";\n    }\n\n    switch (starttype) {\n      case types._break:\n      case types._continue:\n        return this.parseBreakContinueStatement(node, starttype.keyword);\n\n      case types._debugger:\n        return this.parseDebuggerStatement(node);\n\n      case types._do:\n        return this.parseDoStatement(node);\n\n      case types._for:\n        return this.parseForStatement(node);\n\n      case types._function:\n        if (this.lookaheadCharCode() === 46) break;\n\n        if (context) {\n          if (this.state.strict) {\n            this.raise(this.state.start, ErrorMessages.StrictFunction);\n          } else if (context !== \"if\" && context !== \"label\") {\n            this.raise(this.state.start, ErrorMessages.SloppyFunction);\n          }\n        }\n\n        return this.parseFunctionStatement(node, false, !context);\n\n      case types._class:\n        if (context) this.unexpected();\n        return this.parseClass(node, true);\n\n      case types._if:\n        return this.parseIfStatement(node);\n\n      case types._return:\n        return this.parseReturnStatement(node);\n\n      case types._switch:\n        return this.parseSwitchStatement(node);\n\n      case types._throw:\n        return this.parseThrowStatement(node);\n\n      case types._try:\n        return this.parseTryStatement(node);\n\n      case types._const:\n      case types._var:\n        kind = kind || this.state.value;\n\n        if (context && kind !== \"var\") {\n          this.raise(this.state.start, ErrorMessages.UnexpectedLexicalDeclaration);\n        }\n\n        return this.parseVarStatement(node, kind);\n\n      case types._while:\n        return this.parseWhileStatement(node);\n\n      case types._with:\n        return this.parseWithStatement(node);\n\n      case types.braceL:\n        return this.parseBlock();\n\n      case types.semi:\n        return this.parseEmptyStatement(node);\n\n      case types._import:\n        {\n          const nextTokenCharCode = this.lookaheadCharCode();\n\n          if (nextTokenCharCode === 40 || nextTokenCharCode === 46) {\n              break;\n            }\n        }\n\n      case types._export:\n        {\n          if (!this.options.allowImportExportEverywhere && !topLevel) {\n            this.raise(this.state.start, ErrorMessages.UnexpectedImportExport);\n          }\n\n          this.next();\n          let result;\n\n          if (starttype === types._import) {\n            result = this.parseImport(node);\n\n            if (result.type === \"ImportDeclaration\" && (!result.importKind || result.importKind === \"value\")) {\n              this.sawUnambiguousESM = true;\n            }\n          } else {\n            result = this.parseExport(node);\n\n            if (result.type === \"ExportNamedDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportAllDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportDefaultDeclaration\") {\n              this.sawUnambiguousESM = true;\n            }\n          }\n\n          this.assertModuleNodeAllowed(node);\n          return result;\n        }\n\n      default:\n        {\n          if (this.isAsyncFunction()) {\n            if (context) {\n              this.raise(this.state.start, ErrorMessages.AsyncFunctionInSingleStatementContext);\n            }\n\n            this.next();\n            return this.parseFunctionStatement(node, true, !context);\n          }\n        }\n    }\n\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n\n    if (starttype === types.name && expr.type === \"Identifier\" && this.eat(types.colon)) {\n      return this.parseLabeledStatement(node, maybeName, expr, context);\n    } else {\n      return this.parseExpressionStatement(node, expr);\n    }\n  }\n\n  assertModuleNodeAllowed(node) {\n    if (!this.options.allowImportExportEverywhere && !this.inModule) {\n      this.raiseWithData(node.start, {\n        code: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\"\n      }, ErrorMessages.ImportOutsideModule);\n    }\n  }\n\n  takeDecorators(node) {\n    const decorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    if (decorators.length) {\n      node.decorators = decorators;\n      this.resetStartLocationFromNode(node, decorators[0]);\n      this.state.decoratorStack[this.state.decoratorStack.length - 1] = [];\n    }\n  }\n\n  canHaveLeadingDecorator() {\n    return this.match(types._class);\n  }\n\n  parseDecorators(allowExport) {\n    const currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    while (this.match(types.at)) {\n      const decorator = this.parseDecorator();\n      currentContextDecorators.push(decorator);\n    }\n\n    if (this.match(types._export)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n\n      if (this.hasPlugin(\"decorators\") && !this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n        this.raise(this.state.start, ErrorMessages.DecoratorExportClass);\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(this.state.start, ErrorMessages.UnexpectedLeadingDecorator);\n    }\n  }\n\n  parseDecorator() {\n    this.expectOnePlugin([\"decorators-legacy\", \"decorators\"]);\n    const node = this.startNode();\n    this.next();\n\n    if (this.hasPlugin(\"decorators\")) {\n      this.state.decoratorStack.push([]);\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let expr;\n\n      if (this.eat(types.parenL)) {\n        expr = this.parseExpression();\n        this.expect(types.parenR);\n      } else {\n        expr = this.parseIdentifier(false);\n\n        while (this.eat(types.dot)) {\n          const node = this.startNodeAt(startPos, startLoc);\n          node.object = expr;\n          node.property = this.parseIdentifier(true);\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n      }\n\n      node.expression = this.parseMaybeDecoratorArguments(expr);\n      this.state.decoratorStack.pop();\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n\n    return this.finishNode(node, \"Decorator\");\n  }\n\n  parseMaybeDecoratorArguments(expr) {\n    if (this.eat(types.parenL)) {\n      const node = this.startNodeAtNode(expr);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n\n    return expr;\n  }\n\n  parseBreakContinueStatement(node, keyword) {\n    const isBreak = keyword === \"break\";\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n\n    this.verifyBreakContinue(node, keyword);\n    return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\");\n  }\n\n  verifyBreakContinue(node, keyword) {\n    const isBreak = keyword === \"break\";\n    let i;\n\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n        if (node.label && isBreak) break;\n      }\n    }\n\n    if (i === this.state.labels.length) {\n      this.raise(node.start, ErrorMessages.IllegalBreakContinue, keyword);\n    }\n  }\n\n  parseDebuggerStatement(node) {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n\n  parseHeaderExpression() {\n    this.expect(types.parenL);\n    const val = this.parseExpression();\n    this.expect(types.parenR);\n    return val;\n  }\n\n  parseDoStatement(node) {\n    this.next();\n    this.state.labels.push(loopLabel);\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"do\"));\n    this.state.labels.pop();\n    this.expect(types._while);\n    node.test = this.parseHeaderExpression();\n    this.eat(types.semi);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n\n  parseForStatement(node) {\n    this.next();\n    this.state.labels.push(loopLabel);\n    let awaitAt = -1;\n\n    if (this.isAwaitAllowed() && this.eatContextual(\"await\")) {\n      awaitAt = this.state.lastTokStart;\n    }\n\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(types.parenL);\n\n    if (this.match(types.semi)) {\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n\n      return this.parseFor(node, null);\n    }\n\n    const isLet = this.isLet();\n\n    if (this.match(types._var) || this.match(types._const) || isLet) {\n      const init = this.startNode();\n      const kind = isLet ? \"let\" : this.state.value;\n      this.next();\n      this.parseVar(init, true, kind);\n      this.finishNode(init, \"VariableDeclaration\");\n\n      if ((this.match(types._in) || this.isContextual(\"of\")) && init.declarations.length === 1) {\n        return this.parseForIn(node, init, awaitAt);\n      }\n\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n\n      return this.parseFor(node, init);\n    }\n\n    const refExpressionErrors = new ExpressionErrors();\n    const init = this.parseExpression(true, refExpressionErrors);\n\n    if (this.match(types._in) || this.isContextual(\"of\")) {\n      this.toAssignable(init);\n      const description = this.isContextual(\"of\") ? \"for-of statement\" : \"for-in statement\";\n      this.checkLVal(init, undefined, undefined, description);\n      return this.parseForIn(node, init, awaitAt);\n    } else {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    if (awaitAt > -1) {\n      this.unexpected(awaitAt);\n    }\n\n    return this.parseFor(node, init);\n  }\n\n  parseFunctionStatement(node, isAsync, declarationPosition) {\n    this.next();\n    return this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), isAsync);\n  }\n\n  parseIfStatement(node) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    node.consequent = this.parseStatement(\"if\");\n    node.alternate = this.eat(types._else) ? this.parseStatement(\"if\") : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n\n  parseReturnStatement(node) {\n    if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {\n      this.raise(this.state.start, ErrorMessages.IllegalReturn);\n    }\n\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n\n  parseSwitchStatement(node) {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases = node.cases = [];\n    this.expect(types.braceL);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(SCOPE_OTHER);\n    let cur;\n\n    for (let sawDefault; !this.match(types.braceR);) {\n      if (this.match(types._case) || this.match(types._default)) {\n        const isCase = this.match(types._case);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        cases.push(cur = this.startNode());\n        cur.consequent = [];\n        this.next();\n\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(this.state.lastTokStart, ErrorMessages.MultipleDefaultsInSwitch);\n          }\n\n          sawDefault = true;\n          cur.test = null;\n        }\n\n        this.expect(types.colon);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatement(null));\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next();\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n\n  parseThrowStatement(node) {\n    this.next();\n\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(this.state.lastTokEnd, ErrorMessages.NewlineAfterThrow);\n    }\n\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n\n  parseCatchClauseParam() {\n    const param = this.parseBindingAtom();\n    const simple = param.type === \"Identifier\";\n    this.scope.enter(simple ? SCOPE_SIMPLE_CATCH : 0);\n    this.checkLVal(param, BIND_LEXICAL, null, \"catch clause\");\n    return param;\n  }\n\n  parseTryStatement(node) {\n    this.next();\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.match(types._catch)) {\n      const clause = this.startNode();\n      this.next();\n\n      if (this.match(types.parenL)) {\n        this.expect(types.parenL);\n        clause.param = this.parseCatchClauseParam();\n        this.expect(types.parenR);\n      } else {\n        clause.param = null;\n        this.scope.enter(SCOPE_OTHER);\n      }\n\n      clause.body = this.withTopicForbiddingContext(() => this.parseBlock(false, false));\n      this.scope.exit();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.finalizer = this.eat(types._finally) ? this.parseBlock() : null;\n\n    if (!node.handler && !node.finalizer) {\n      this.raise(node.start, ErrorMessages.NoCatchOrFinally);\n    }\n\n    return this.finishNode(node, \"TryStatement\");\n  }\n\n  parseVarStatement(node, kind) {\n    this.next();\n    this.parseVar(node, false, kind);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n\n  parseWhileStatement(node) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"while\"));\n    this.state.labels.pop();\n    return this.finishNode(node, \"WhileStatement\");\n  }\n\n  parseWithStatement(node) {\n    if (this.state.strict) {\n      this.raise(this.state.start, ErrorMessages.StrictWith);\n    }\n\n    this.next();\n    node.object = this.parseHeaderExpression();\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"with\"));\n    return this.finishNode(node, \"WithStatement\");\n  }\n\n  parseEmptyStatement(node) {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n\n  parseLabeledStatement(node, maybeName, expr, context) {\n    for (let _i2 = 0, _this$state$labels = this.state.labels; _i2 < _this$state$labels.length; _i2++) {\n      const label = _this$state$labels[_i2];\n\n      if (label.name === maybeName) {\n        this.raise(expr.start, ErrorMessages.LabelRedeclaration, maybeName);\n      }\n    }\n\n    const kind = this.state.type.isLoop ? \"loop\" : this.match(types._switch) ? \"switch\" : null;\n\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n\n      if (label.statementStart === node.start) {\n        label.statementStart = this.state.start;\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.state.start\n    });\n    node.body = this.parseStatement(context ? context.indexOf(\"label\") === -1 ? context + \"label\" : context : \"label\");\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n\n  parseExpressionStatement(node, expr) {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n\n  parseBlock(allowDirectives = false, createNewLexicalScope = true, afterBlockParse) {\n    const node = this.startNode();\n    this.expect(types.braceL);\n\n    if (createNewLexicalScope) {\n      this.scope.enter(SCOPE_OTHER);\n    }\n\n    this.parseBlockBody(node, allowDirectives, false, types.braceR, afterBlockParse);\n\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n\n    return this.finishNode(node, \"BlockStatement\");\n  }\n\n  isValidDirective(stmt) {\n    return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"StringLiteral\" && !stmt.expression.extra.parenthesized;\n  }\n\n  parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse) {\n    const body = node.body = [];\n    const directives = node.directives = [];\n    this.parseBlockOrModuleBlockBody(body, allowDirectives ? directives : undefined, topLevel, end, afterBlockParse);\n  }\n\n  parseBlockOrModuleBlockBody(body, directives, topLevel, end, afterBlockParse) {\n    const octalPositions = [];\n    const oldStrict = this.state.strict;\n    let hasStrictModeDirective = false;\n    let parsedNonDirective = false;\n\n    while (!this.match(end)) {\n      if (!parsedNonDirective && this.state.octalPositions.length) {\n        octalPositions.push(...this.state.octalPositions);\n      }\n\n      const stmt = this.parseStatement(null, topLevel);\n\n      if (directives && !parsedNonDirective && this.isValidDirective(stmt)) {\n        const directive = this.stmtToDirective(stmt);\n        directives.push(directive);\n\n        if (!hasStrictModeDirective && directive.value.value === \"use strict\") {\n          hasStrictModeDirective = true;\n          this.setStrict(true);\n        }\n\n        continue;\n      }\n\n      parsedNonDirective = true;\n      body.push(stmt);\n    }\n\n    if (this.state.strict && octalPositions.length) {\n      for (let _i3 = 0; _i3 < octalPositions.length; _i3++) {\n        const pos = octalPositions[_i3];\n        this.raise(pos, ErrorMessages.StrictOctalLiteral);\n      }\n    }\n\n    if (afterBlockParse) {\n      afterBlockParse.call(this, hasStrictModeDirective);\n    }\n\n    if (!oldStrict) {\n      this.setStrict(false);\n    }\n\n    this.next();\n  }\n\n  parseFor(node, init) {\n    node.init = init;\n    this.expect(types.semi);\n    node.test = this.match(types.semi) ? null : this.parseExpression();\n    this.expect(types.semi);\n    node.update = this.match(types.parenR) ? null : this.parseExpression();\n    this.expect(types.parenR);\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"for\"));\n    this.scope.exit();\n    this.state.labels.pop();\n    return this.finishNode(node, \"ForStatement\");\n  }\n\n  parseForIn(node, init, awaitAt) {\n    const isForIn = this.match(types._in);\n    this.next();\n\n    if (isForIn) {\n      if (awaitAt > -1) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt > -1;\n    }\n\n    if (init.type === \"VariableDeclaration\" && init.declarations[0].init != null && (!isForIn || this.state.strict || init.kind !== \"var\" || init.declarations[0].id.type !== \"Identifier\")) {\n      this.raise(init.start, ErrorMessages.ForInOfLoopInitializer, isForIn ? \"for-in\" : \"for-of\");\n    } else if (init.type === \"AssignmentPattern\") {\n      this.raise(init.start, ErrorMessages.InvalidLhs, \"for-loop\");\n    }\n\n    node.left = init;\n    node.right = isForIn ? this.parseExpression() : this.parseMaybeAssignAllowIn();\n    this.expect(types.parenR);\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"for\"));\n    this.scope.exit();\n    this.state.labels.pop();\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n\n  parseVar(node, isFor, kind) {\n    const declarations = node.declarations = [];\n    const isTypescript = this.hasPlugin(\"typescript\");\n    node.kind = kind;\n\n    for (;;) {\n      const decl = this.startNode();\n      this.parseVarId(decl, kind);\n\n      if (this.eat(types.eq)) {\n        decl.init = isFor ? this.parseMaybeAssignDisallowIn() : this.parseMaybeAssignAllowIn();\n      } else {\n        if (kind === \"const\" && !(this.match(types._in) || this.isContextual(\"of\"))) {\n          if (!isTypescript) {\n            this.unexpected();\n          }\n        } else if (decl.id.type !== \"Identifier\" && !(isFor && (this.match(types._in) || this.isContextual(\"of\")))) {\n          this.raise(this.state.lastTokEnd, ErrorMessages.DeclarationMissingInitializer, \"Complex binding patterns\");\n        }\n\n        decl.init = null;\n      }\n\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(types.comma)) break;\n    }\n\n    return node;\n  }\n\n  parseVarId(decl, kind) {\n    decl.id = this.parseBindingAtom();\n    this.checkLVal(decl.id, kind === \"var\" ? BIND_VAR : BIND_LEXICAL, undefined, \"variable declaration\", kind !== \"var\");\n  }\n\n  parseFunction(node, statement = FUNC_NO_FLAGS, isAsync = false) {\n    const isStatement = statement & FUNC_STATEMENT;\n    const isHangingStatement = statement & FUNC_HANGING_STATEMENT;\n    const requireId = !!isStatement && !(statement & FUNC_NULLABLE_ID);\n    this.initFunction(node, isAsync);\n\n    if (this.match(types.star) && isHangingStatement) {\n      this.raise(this.state.start, ErrorMessages.GeneratorInSingleStatementContext);\n    }\n\n    node.generator = this.eat(types.star);\n\n    if (isStatement) {\n      node.id = this.parseFunctionId(requireId);\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldYieldPos = this.state.yieldPos;\n    const oldAwaitPos = this.state.awaitPos;\n    this.state.maybeInArrowParameters = false;\n    this.state.yieldPos = -1;\n    this.state.awaitPos = -1;\n    this.scope.enter(SCOPE_FUNCTION);\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n\n    if (!isStatement) {\n      node.id = this.parseFunctionId();\n    }\n\n    this.parseFunctionParams(node);\n    this.withTopicForbiddingContext(() => {\n      this.parseFunctionBodyAndFinish(node, isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\");\n    });\n    this.prodParam.exit();\n    this.scope.exit();\n\n    if (isStatement && !isHangingStatement) {\n      this.registerFunctionStatementId(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.yieldPos = oldYieldPos;\n    this.state.awaitPos = oldAwaitPos;\n    return node;\n  }\n\n  parseFunctionId(requireId) {\n    return requireId || this.match(types.name) ? this.parseIdentifier() : null;\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    const oldInParameters = this.state.inParameters;\n    this.state.inParameters = true;\n    this.expect(types.parenL);\n    node.params = this.parseBindingList(types.parenR, 41, false, allowModifiers);\n    this.state.inParameters = oldInParameters;\n    this.checkYieldAwaitInDefaultParams();\n  }\n\n  registerFunctionStatementId(node) {\n    if (!node.id) return;\n    this.scope.declareName(node.id.name, this.state.strict || node.generator || node.async ? this.scope.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION, node.id.start);\n  }\n\n  parseClass(node, isStatement, optionalId) {\n    this.next();\n    this.takeDecorators(node);\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    node.body = this.parseClassBody(!!node.superClass, oldStrict);\n    return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\");\n  }\n\n  isClassProperty() {\n    return this.match(types.eq) || this.match(types.semi) || this.match(types.braceR);\n  }\n\n  isClassMethod() {\n    return this.match(types.parenL);\n  }\n\n  isNonstaticConstructor(method) {\n    return !method.computed && !method.static && (method.key.name === \"constructor\" || method.key.value === \"constructor\");\n  }\n\n  parseClassBody(constructorAllowsSuper, oldStrict) {\n    this.classScope.enter();\n    const state = {\n      hadConstructor: false\n    };\n    let decorators = [];\n    const classBody = this.startNode();\n    classBody.body = [];\n    this.expect(types.braceL);\n    this.withTopicForbiddingContext(() => {\n      while (!this.match(types.braceR)) {\n        if (this.eat(types.semi)) {\n          if (decorators.length > 0) {\n            throw this.raise(this.state.lastTokEnd, ErrorMessages.DecoratorSemicolon);\n          }\n\n          continue;\n        }\n\n        if (this.match(types.at)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n\n        const member = this.startNode();\n\n        if (decorators.length) {\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n\n        this.parseClassMember(classBody, member, state, constructorAllowsSuper);\n\n        if (member.kind === \"constructor\" && member.decorators && member.decorators.length > 0) {\n          this.raise(member.start, ErrorMessages.DecoratorConstructor);\n        }\n      }\n    });\n    this.state.strict = oldStrict;\n    this.next();\n\n    if (decorators.length) {\n      throw this.raise(this.state.start, ErrorMessages.TrailingDecorator);\n    }\n\n    this.classScope.exit();\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n\n  parseClassMemberFromModifier(classBody, member) {\n    const key = this.parseIdentifier(true);\n\n    if (this.isClassMethod()) {\n      const method = member;\n      method.kind = \"method\";\n      method.computed = false;\n      method.key = key;\n      method.static = false;\n      this.pushClassMethod(classBody, method, false, false, false, false);\n      return true;\n    } else if (this.isClassProperty()) {\n      const prop = member;\n      prop.computed = false;\n      prop.key = key;\n      prop.static = false;\n      classBody.body.push(this.parseClassProperty(prop));\n      return true;\n    }\n\n    return false;\n  }\n\n  parseClassMember(classBody, member, state, constructorAllowsSuper) {\n    const isStatic = this.isContextual(\"static\");\n\n    if (isStatic && this.parseClassMemberFromModifier(classBody, member)) {\n      return;\n    }\n\n    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic, constructorAllowsSuper);\n  }\n\n  parseClassMemberWithIsStatic(classBody, member, state, isStatic, constructorAllowsSuper) {\n    const publicMethod = member;\n    const privateMethod = member;\n    const publicProp = member;\n    const privateProp = member;\n    const method = publicMethod;\n    const publicMember = publicMethod;\n    member.static = isStatic;\n\n    if (this.eat(types.star)) {\n      method.kind = \"method\";\n      this.parseClassElementName(method);\n\n      if (method.key.type === \"PrivateName\") {\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsGenerator);\n      }\n\n      this.pushClassMethod(classBody, publicMethod, true, false, false, false);\n      return;\n    }\n\n    const containsEsc = this.state.containsEsc;\n    const key = this.parseClassElementName(member);\n    const isPrivate = key.type === \"PrivateName\";\n    const isSimple = key.type === \"Identifier\";\n    const maybeQuestionTokenStart = this.state.start;\n    this.parsePostMemberNameModifiers(publicMember);\n\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(key.start, ErrorMessages.DuplicateConstructor);\n        }\n\n        state.hadConstructor = true;\n        allowsDirectSuper = constructorAllowsSuper;\n      }\n\n      this.pushClassMethod(classBody, publicMethod, false, false, isConstructor, allowsDirectSuper);\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (isSimple && key.name === \"async\" && !containsEsc && !this.isLineTerminator()) {\n      const isGenerator = this.eat(types.star);\n\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStart);\n      }\n\n      method.kind = \"method\";\n      this.parseClassElementName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (method.key.type === \"PrivateName\") {\n        this.pushClassPrivateMethod(classBody, privateMethod, isGenerator, true);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsAsync);\n        }\n\n        this.pushClassMethod(classBody, publicMethod, isGenerator, true, false, false);\n      }\n    } else if (isSimple && (key.name === \"get\" || key.name === \"set\") && !containsEsc && !(this.match(types.star) && this.isLineTerminator())) {\n      method.kind = key.name;\n      this.parseClassElementName(publicMethod);\n\n      if (method.key.type === \"PrivateName\") {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsAccessor);\n        }\n\n        this.pushClassMethod(classBody, publicMethod, false, false, false, false);\n      }\n\n      this.checkGetterSetterParams(publicMethod);\n    } else if (this.isLineTerminator()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n\n  parseClassElementName(member) {\n    const key = this.parsePropertyName(member, true);\n\n    if (!member.computed && member.static && (key.name === \"prototype\" || key.value === \"prototype\")) {\n      this.raise(key.start, ErrorMessages.StaticPrototype);\n    }\n\n    if (key.type === \"PrivateName\" && key.id.name === \"constructor\") {\n      this.raise(key.start, ErrorMessages.ConstructorClassPrivateField);\n    }\n\n    return key;\n  }\n\n  pushClassProperty(classBody, prop) {\n    if (!prop.computed && (prop.key.name === \"constructor\" || prop.key.value === \"constructor\")) {\n      this.raise(prop.key.start, ErrorMessages.ConstructorClassField);\n    }\n\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n\n  pushClassPrivateProperty(classBody, prop) {\n    this.expectPlugin(\"classPrivateProperties\", prop.key.start);\n    const node = this.parseClassPrivateProperty(prop);\n    classBody.body.push(node);\n    this.classScope.declarePrivateName(node.key.id.name, CLASS_ELEMENT_OTHER, node.key.start);\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    classBody.body.push(this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true));\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    this.expectPlugin(\"classPrivateMethods\", method.key.start);\n    const node = this.parseMethod(method, isGenerator, isAsync, false, false, \"ClassPrivateMethod\", true);\n    classBody.body.push(node);\n    const kind = node.kind === \"get\" ? node.static ? CLASS_ELEMENT_STATIC_GETTER : CLASS_ELEMENT_INSTANCE_GETTER : node.kind === \"set\" ? node.static ? CLASS_ELEMENT_STATIC_SETTER : CLASS_ELEMENT_INSTANCE_SETTER : CLASS_ELEMENT_OTHER;\n    this.classScope.declarePrivateName(node.key.id.name, kind, node.key.start);\n  }\n\n  parsePostMemberNameModifiers(methodOrProp) {}\n\n  parseClassPrivateProperty(node) {\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    this.prodParam.enter(PARAM);\n    node.value = this.eat(types.eq) ? this.parseMaybeAssignAllowIn() : null;\n    this.semicolon();\n    this.prodParam.exit();\n    this.scope.exit();\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n\n  parseClassProperty(node) {\n    if (!node.typeAnnotation) {\n      this.expectPlugin(\"classProperties\");\n    }\n\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    this.prodParam.enter(PARAM);\n\n    if (this.match(types.eq)) {\n      this.expectPlugin(\"classProperties\");\n      this.next();\n      node.value = this.parseMaybeAssignAllowIn();\n    } else {\n      node.value = null;\n    }\n\n    this.semicolon();\n    this.prodParam.exit();\n    this.scope.exit();\n    return this.finishNode(node, \"ClassProperty\");\n  }\n\n  parseClassId(node, isStatement, optionalId, bindingType = BIND_CLASS) {\n    if (this.match(types.name)) {\n      node.id = this.parseIdentifier();\n\n      if (isStatement) {\n        this.checkLVal(node.id, bindingType, undefined, \"class name\");\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        this.unexpected(null, ErrorMessages.MissingClassName);\n      }\n    }\n  }\n\n  parseClassSuper(node) {\n    node.superClass = this.eat(types._extends) ? this.parseExprSubscripts() : null;\n  }\n\n  parseExport(node) {\n    const hasDefault = this.maybeParseExportDefaultSpecifier(node);\n    const parseAfterDefault = !hasDefault || this.eat(types.comma);\n    const hasStar = parseAfterDefault && this.eatExportStar(node);\n    const hasNamespace = hasStar && this.maybeParseExportNamespaceSpecifier(node);\n    const parseAfterNamespace = parseAfterDefault && (!hasNamespace || this.eat(types.comma));\n    const isFromRequired = hasDefault || hasStar;\n\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      this.parseExportFrom(node, true);\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);\n\n    if (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers || hasNamespace && parseAfterNamespace && !hasSpecifiers) {\n      throw this.unexpected(null, types.braceL);\n    }\n\n    let hasDeclaration;\n\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      this.parseExportFrom(node, isFromRequired);\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(node);\n    }\n\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      this.checkExport(node, true, false, !!node.source);\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    if (this.eat(types._default)) {\n      node.declaration = this.parseExportDefaultExpression();\n      this.checkExport(node, true, true);\n      return this.finishNode(node, \"ExportDefaultDeclaration\");\n    }\n\n    throw this.unexpected(null, types.braceL);\n  }\n\n  eatExportStar(node) {\n    return this.eat(types.star);\n  }\n\n  maybeParseExportDefaultSpecifier(node) {\n    if (this.isExportDefaultSpecifier()) {\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node) {\n    if (this.isContextual(\"as\")) {\n      if (!node.specifiers) node.specifiers = [];\n      const specifier = this.startNodeAt(this.state.lastTokStart, this.state.lastTokStartLoc);\n      this.next();\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers.push(this.finishNode(specifier, \"ExportNamespaceSpecifier\"));\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamedSpecifiers(node) {\n    if (this.match(types.braceL)) {\n      if (!node.specifiers) node.specifiers = [];\n      node.specifiers.push(...this.parseExportSpecifiers());\n      node.source = null;\n      node.declaration = null;\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportDeclaration(node) {\n    if (this.shouldParseExportDeclaration()) {\n      node.specifiers = [];\n      node.source = null;\n      node.declaration = this.parseExportDeclaration(node);\n      return true;\n    }\n\n    return false;\n  }\n\n  isAsyncFunction() {\n    if (!this.isContextual(\"async\")) return false;\n    const next = this.nextTokenStart();\n    return !lineBreak.test(this.input.slice(this.state.pos, next)) && this.isUnparsedContextual(next, \"function\");\n  }\n\n  parseExportDefaultExpression() {\n    const expr = this.startNode();\n    const isAsync = this.isAsyncFunction();\n\n    if (this.match(types._function) || isAsync) {\n      this.next();\n\n      if (isAsync) {\n        this.next();\n      }\n\n      return this.parseFunction(expr, FUNC_STATEMENT | FUNC_NULLABLE_ID, isAsync);\n    } else if (this.match(types._class)) {\n      return this.parseClass(expr, true, true);\n    } else if (this.match(types.at)) {\n      if (this.hasPlugin(\"decorators\") && this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n        this.raise(this.state.start, ErrorMessages.DecoratorBeforeExport);\n      }\n\n      this.parseDecorators(false);\n      return this.parseClass(expr, true, true);\n    } else if (this.match(types._const) || this.match(types._var) || this.isLet()) {\n      throw this.raise(this.state.start, ErrorMessages.UnsupportedDefaultExport);\n    } else {\n      const res = this.parseMaybeAssignAllowIn();\n      this.semicolon();\n      return res;\n    }\n  }\n\n  parseExportDeclaration(node) {\n    return this.parseStatement(null);\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.match(types.name)) {\n      const value = this.state.value;\n\n      if (value === \"async\" && !this.state.containsEsc || value === \"let\") {\n        return false;\n      }\n\n      if ((value === \"type\" || value === \"interface\") && !this.state.containsEsc) {\n        const l = this.lookahead();\n\n        if (l.type === types.name && l.value !== \"from\" || l.type === types.braceL) {\n          this.expectOnePlugin([\"flow\", \"typescript\"]);\n          return false;\n        }\n      }\n    } else if (!this.match(types._default)) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const hasFrom = this.isUnparsedContextual(next, \"from\");\n\n    if (this.input.charCodeAt(next) === 44 || this.match(types.name) && hasFrom) {\n      return true;\n    }\n\n    if (this.match(types._default) && hasFrom) {\n      const nextAfterFrom = this.input.charCodeAt(this.nextTokenStartSince(next + 4));\n      return nextAfterFrom === 34 || nextAfterFrom === 39;\n    }\n\n    return false;\n  }\n\n  parseExportFrom(node, expect) {\n    if (this.eatContextual(\"from\")) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n    } else {\n      if (expect) {\n        this.unexpected();\n      } else {\n        node.source = null;\n      }\n    }\n\n    this.semicolon();\n  }\n\n  shouldParseExportDeclaration() {\n    if (this.match(types.at)) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n\n      if (this.hasPlugin(\"decorators\")) {\n        if (this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n          this.unexpected(this.state.start, ErrorMessages.DecoratorBeforeExport);\n        } else {\n          return true;\n        }\n      }\n    }\n\n    return this.state.type.keyword === \"var\" || this.state.type.keyword === \"const\" || this.state.type.keyword === \"function\" || this.state.type.keyword === \"class\" || this.isLet() || this.isAsyncFunction();\n  }\n\n  checkExport(node, checkNames, isDefault, isFrom) {\n    if (checkNames) {\n      if (isDefault) {\n        this.checkDuplicateExports(node, \"default\");\n\n        if (this.hasPlugin(\"exportDefaultFrom\")) {\n          var _declaration$extra;\n\n          const declaration = node.declaration;\n\n          if (declaration.type === \"Identifier\" && declaration.name === \"from\" && declaration.end - declaration.start === 4 && !((_declaration$extra = declaration.extra) == null ? void 0 : _declaration$extra.parenthesized)) {\n            this.raise(declaration.start, ErrorMessages.ExportDefaultFromAsIdentifier);\n          }\n        }\n      } else if (node.specifiers && node.specifiers.length) {\n        for (let _i4 = 0, _node$specifiers = node.specifiers; _i4 < _node$specifiers.length; _i4++) {\n          const specifier = _node$specifiers[_i4];\n          this.checkDuplicateExports(specifier, specifier.exported.name);\n\n          if (!isFrom && specifier.local) {\n            this.checkReservedWord(specifier.local.name, specifier.local.start, true, false);\n            this.scope.checkLocalExport(specifier.local);\n          }\n        }\n      } else if (node.declaration) {\n        if (node.declaration.type === \"FunctionDeclaration\" || node.declaration.type === \"ClassDeclaration\") {\n          const id = node.declaration.id;\n          if (!id) throw new Error(\"Assertion failure\");\n          this.checkDuplicateExports(node, id.name);\n        } else if (node.declaration.type === \"VariableDeclaration\") {\n          for (let _i5 = 0, _node$declaration$dec = node.declaration.declarations; _i5 < _node$declaration$dec.length; _i5++) {\n            const declaration = _node$declaration$dec[_i5];\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n\n    const currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    if (currentContextDecorators.length) {\n      throw this.raise(node.start, ErrorMessages.UnsupportedDecoratorExport);\n    }\n  }\n\n  checkDeclaration(node) {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (let _i6 = 0, _node$properties = node.properties; _i6 < _node$properties.length; _i6++) {\n        const prop = _node$properties[_i6];\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (let _i7 = 0, _node$elements = node.elements; _i7 < _node$elements.length; _i7++) {\n        const elem = _node$elements[_i7];\n\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n\n  checkDuplicateExports(node, name) {\n    if (this.state.exportedIdentifiers.indexOf(name) > -1) {\n      this.raise(node.start, name === \"default\" ? ErrorMessages.DuplicateDefaultExport : ErrorMessages.DuplicateExport, name);\n    }\n\n    this.state.exportedIdentifiers.push(name);\n  }\n\n  parseExportSpecifiers() {\n    const nodes = [];\n    let first = true;\n    this.expect(types.braceL);\n\n    while (!this.eat(types.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma);\n        if (this.eat(types.braceR)) break;\n      }\n\n      const node = this.startNode();\n      node.local = this.parseIdentifier(true);\n      node.exported = this.eatContextual(\"as\") ? this.parseIdentifier(true) : node.local.__clone();\n      nodes.push(this.finishNode(node, \"ExportSpecifier\"));\n    }\n\n    return nodes;\n  }\n\n  parseImport(node) {\n    node.specifiers = [];\n\n    if (!this.match(types.string)) {\n      const hasDefault = this.maybeParseDefaultImportSpecifier(node);\n      const parseNext = !hasDefault || this.eat(types.comma);\n      const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n      if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n      this.expectContextual(\"from\");\n    }\n\n    node.source = this.parseImportSource();\n    const attributes = this.maybeParseModuleAttributes();\n\n    if (attributes) {\n      node.attributes = attributes;\n    }\n\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource() {\n    if (!this.match(types.string)) this.unexpected();\n    return this.parseExprAtom();\n  }\n\n  shouldParseDefaultImport(node) {\n    return this.match(types.name);\n  }\n\n  parseImportSpecifierLocal(node, specifier, type, contextDescription) {\n    specifier.local = this.parseIdentifier();\n    this.checkLVal(specifier.local, BIND_LEXICAL, undefined, contextDescription);\n    node.specifiers.push(this.finishNode(specifier, type));\n  }\n\n  maybeParseModuleAttributes() {\n    if (this.match(types._with) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"moduleAttributes\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"moduleAttributes\")) return [];\n      return null;\n    }\n\n    const attrs = [];\n    const attributes = new Set();\n\n    do {\n      const node = this.startNode();\n      node.key = this.parseIdentifier(true);\n\n      if (node.key.name !== \"type\") {\n        this.raise(node.key.start, ErrorMessages.ModuleAttributeDifferentFromType, node.key.name);\n      }\n\n      if (attributes.has(node.key.name)) {\n        this.raise(node.key.start, ErrorMessages.ModuleAttributesWithDuplicateKeys, node.key.name);\n      }\n\n      attributes.add(node.key.name);\n      this.expect(types.colon);\n\n      if (!this.match(types.string)) {\n        throw this.unexpected(this.state.start, ErrorMessages.ModuleAttributeInvalidValue);\n      }\n\n      node.value = this.parseLiteral(this.state.value, \"StringLiteral\");\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(types.comma));\n\n    return attrs;\n  }\n\n  maybeParseDefaultImportSpecifier(node) {\n    if (this.shouldParseDefaultImport(node)) {\n      this.parseImportSpecifierLocal(node, this.startNode(), \"ImportDefaultSpecifier\", \"default import specifier\");\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseStarImportSpecifier(node) {\n    if (this.match(types.star)) {\n      const specifier = this.startNode();\n      this.next();\n      this.expectContextual(\"as\");\n      this.parseImportSpecifierLocal(node, specifier, \"ImportNamespaceSpecifier\", \"import namespace specifier\");\n      return true;\n    }\n\n    return false;\n  }\n\n  parseNamedImportSpecifiers(node) {\n    let first = true;\n    this.expect(types.braceL);\n\n    while (!this.eat(types.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        if (this.eat(types.colon)) {\n          throw this.raise(this.state.start, ErrorMessages.DestructureNamedImport);\n        }\n\n        this.expect(types.comma);\n        if (this.eat(types.braceR)) break;\n      }\n\n      this.parseImportSpecifier(node);\n    }\n  }\n\n  parseImportSpecifier(node) {\n    const specifier = this.startNode();\n    specifier.imported = this.parseIdentifier(true);\n\n    if (this.eatContextual(\"as\")) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      this.checkReservedWord(specifier.imported.name, specifier.start, true, true);\n      specifier.local = specifier.imported.__clone();\n    }\n\n    this.checkLVal(specifier.local, BIND_LEXICAL, undefined, \"import specifier\");\n    node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n  }\n\n}\n\nclass ClassScope {\n  constructor() {\n    this.privateNames = new Set();\n    this.loneAccessors = new Map();\n    this.undefinedPrivateNames = new Map();\n  }\n\n}\nclass ClassScopeHandler {\n  constructor(raise) {\n    this.stack = [];\n    this.undefinedPrivateNames = new Map();\n    this.raise = raise;\n  }\n\n  current() {\n    return this.stack[this.stack.length - 1];\n  }\n\n  enter() {\n    this.stack.push(new ClassScope());\n  }\n\n  exit() {\n    const oldClassScope = this.stack.pop();\n    const current = this.current();\n\n    for (let _i = 0, _Array$from = Array.from(oldClassScope.undefinedPrivateNames); _i < _Array$from.length; _i++) {\n      const [name, pos] = _Array$from[_i];\n\n      if (current) {\n        if (!current.undefinedPrivateNames.has(name)) {\n          current.undefinedPrivateNames.set(name, pos);\n        }\n      } else {\n        this.raise(pos, ErrorMessages.InvalidPrivateFieldResolution, name);\n      }\n    }\n  }\n\n  declarePrivateName(name, elementType, pos) {\n    const classScope = this.current();\n    let redefined = classScope.privateNames.has(name);\n\n    if (elementType & CLASS_ELEMENT_KIND_ACCESSOR) {\n      const accessor = redefined && classScope.loneAccessors.get(name);\n\n      if (accessor) {\n        const oldStatic = accessor & CLASS_ELEMENT_FLAG_STATIC;\n        const newStatic = elementType & CLASS_ELEMENT_FLAG_STATIC;\n        const oldKind = accessor & CLASS_ELEMENT_KIND_ACCESSOR;\n        const newKind = elementType & CLASS_ELEMENT_KIND_ACCESSOR;\n        redefined = oldKind === newKind || oldStatic !== newStatic;\n        if (!redefined) classScope.loneAccessors.delete(name);\n      } else if (!redefined) {\n        classScope.loneAccessors.set(name, elementType);\n      }\n    }\n\n    if (redefined) {\n      this.raise(pos, ErrorMessages.PrivateNameRedeclaration, name);\n    }\n\n    classScope.privateNames.add(name);\n    classScope.undefinedPrivateNames.delete(name);\n  }\n\n  usePrivateName(name, pos) {\n    let classScope;\n\n    for (let _i2 = 0, _this$stack = this.stack; _i2 < _this$stack.length; _i2++) {\n      classScope = _this$stack[_i2];\n      if (classScope.privateNames.has(name)) return;\n    }\n\n    if (classScope) {\n      classScope.undefinedPrivateNames.set(name, pos);\n    } else {\n      this.raise(pos, ErrorMessages.InvalidPrivateFieldResolution, name);\n    }\n  }\n\n}\n\nclass Parser extends StatementParser {\n  constructor(options, input) {\n    options = getOptions(options);\n    super(options, input);\n    const ScopeHandler = this.getScopeHandler();\n    this.options = options;\n    this.inModule = this.options.sourceType === \"module\";\n    this.scope = new ScopeHandler(this.raise.bind(this), this.inModule);\n    this.prodParam = new ProductionParameterHandler();\n    this.classScope = new ClassScopeHandler(this.raise.bind(this));\n    this.plugins = pluginsMap(this.options.plugins);\n    this.filename = options.sourceFilename;\n  }\n\n  getScopeHandler() {\n    return ScopeHandler;\n  }\n\n  parse() {\n    let paramFlags = PARAM;\n\n    if (this.hasPlugin(\"topLevelAwait\") && this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n    const file = this.startNode();\n    const program = this.startNode();\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    return file;\n  }\n\n}\n\nfunction pluginsMap(plugins) {\n  const pluginMap = new Map();\n\n  for (let _i = 0; _i < plugins.length; _i++) {\n    const plugin = plugins[_i];\n    const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];\n    if (!pluginMap.has(name)) pluginMap.set(name, options || {});\n  }\n\n  return pluginMap;\n}\n\nfunction parse(input, options) {\n  var _options;\n\n  if (((_options = options) == null ? void 0 : _options.sourceType) === \"unambiguous\") {\n    options = Object.assign({}, options);\n\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch (_unused) {}\n      } else {\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch (_unused2) {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\nfunction parseExpression(input, options) {\n  const parser = getParser(options, input);\n\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n\n  return parser.getExpression();\n}\n\nfunction getParser(options, input) {\n  let cls = Parser;\n\n  if (options == null ? void 0 : options.plugins) {\n    validatePlugins(options.plugins);\n    cls = getParserClass(options.plugins);\n  }\n\n  return new cls(options, input);\n}\n\nconst parserClassCache = {};\n\nfunction getParserClass(pluginsFromOptions) {\n  const pluginList = mixinPluginNames.filter(name => hasPlugin(pluginsFromOptions, name));\n  const key = pluginList.join(\"/\");\n  let cls = parserClassCache[key];\n\n  if (!cls) {\n    cls = Parser;\n\n    for (let _i = 0; _i < pluginList.length; _i++) {\n      const plugin = pluginList[_i];\n      cls = mixinPlugins[plugin](cls);\n    }\n\n    parserClassCache[key] = cls;\n  }\n\n  return cls;\n}\n\nexports.parse = parse;\nexports.parseExpression = parseExpression;\nexports.tokTypes = types;\n//# sourceMappingURL=index.js.map\n"]},"metadata":{},"sourceType":"script"}