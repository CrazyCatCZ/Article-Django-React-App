{"ast":null,"code":"import { gqlPluckFromCodeString, gqlPluckFromCodeStringSync } from '@graphql-tools/graphql-tag-pluck';\nimport { exec, execSync } from 'child_process';\nimport { parseGraphQLSDL, parseGraphQLJSON } from '@graphql-tools/utils';\n\nconst createLoadError = error => new Error('Unable to load file from git: ' + error);\n\nconst createCommand = ({\n  ref,\n  path\n}) => {\n  return `git show ${ref}:${path}`;\n};\n/**\n * @internal\n */\n\n\nasync function loadFromGit(input) {\n  try {\n    return await new Promise((resolve, reject) => {\n      exec(createCommand(input), {\n        encoding: 'utf-8',\n        maxBuffer: 1024 * 1024 * 1024\n      }, (error, stdout) => {\n        if (error) {\n          reject(error);\n        } else {\n          resolve(stdout);\n        }\n      });\n    });\n  } catch (error) {\n    throw createLoadError(error);\n  }\n}\n/**\n * @internal\n */\n\n\nfunction loadFromGitSync(input) {\n  try {\n    return execSync(createCommand(input), {\n      encoding: 'utf-8'\n    });\n  } catch (error) {\n    throw createLoadError(error);\n  }\n}\n/**\n * @internal\n */\n\n\nfunction parse({\n  path,\n  pointer,\n  content,\n  options\n}) {\n  if (/\\.(gql|graphql)s?$/i.test(path)) {\n    return parseGraphQLSDL(pointer, content, options);\n  }\n\n  if (/\\.json$/i.test(path)) {\n    return parseGraphQLJSON(pointer, content, options);\n  }\n} // git:branch:path/to/file\n\n\nfunction extractData(pointer) {\n  const parts = pointer.replace(/^git\\:/i, '').split(':');\n\n  if (!parts || parts.length !== 2) {\n    throw new Error('Schema pointer should match \"git:branchName:path/to/file\"');\n  }\n\n  return {\n    ref: parts[0],\n    path: parts[1]\n  };\n}\n/**\n * This loader loads a file from git.\n *\n * ```js\n * const typeDefs = await loadTypedefs('git:someBranch:some/path/to/file.js', {\n *   loaders: [new GitLoader()],\n * })\n * ```\n */\n\n\nclass GitLoader {\n  loaderId() {\n    return 'git-loader';\n  }\n\n  async canLoad(pointer) {\n    return this.canLoadSync(pointer);\n  }\n\n  canLoadSync(pointer) {\n    return typeof pointer === 'string' && pointer.toLowerCase().startsWith('git:');\n  }\n\n  async load(pointer, options) {\n    const {\n      ref,\n      path\n    } = extractData(pointer);\n    const content = await loadFromGit({\n      ref,\n      path\n    });\n    const parsed = parse({\n      path,\n      options,\n      pointer,\n      content\n    });\n\n    if (parsed) {\n      return parsed;\n    }\n\n    const rawSDL = await gqlPluckFromCodeString(pointer, content, options.pluckConfig);\n    return {\n      location: pointer,\n      rawSDL\n    };\n  }\n\n  loadSync(pointer, options) {\n    const {\n      ref,\n      path\n    } = extractData(pointer);\n    const content = loadFromGitSync({\n      ref,\n      path\n    });\n    const parsed = parse({\n      path,\n      options,\n      pointer,\n      content\n    });\n\n    if (parsed) {\n      return parsed;\n    }\n\n    const rawSDL = gqlPluckFromCodeStringSync(pointer, content, options.pluckConfig);\n    return {\n      location: pointer,\n      rawSDL\n    };\n  }\n\n}\n\nexport { GitLoader };","map":{"version":3,"sources":["../../../dist/loaders/git/src/load-git.js","../../../dist/loaders/git/src/parse.js","../../../dist/loaders/git/src/index.js"],"names":[],"mappings":"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","sourcesContent":["import { exec, execSync } from 'child_process';\nconst createLoadError = (error) => new Error('Unable to load file from git: ' + error);\nconst createCommand = ({ ref, path }) => {\n    return `git show ${ref}:${path}`;\n};\n/**\n * @internal\n */\nexport async function loadFromGit(input) {\n    try {\n        return await new Promise((resolve, reject) => {\n            exec(createCommand(input), { encoding: 'utf-8', maxBuffer: 1024 * 1024 * 1024 }, (error, stdout) => {\n                if (error) {\n                    reject(error);\n                }\n                else {\n                    resolve(stdout);\n                }\n            });\n        });\n    }\n    catch (error) {\n        throw createLoadError(error);\n    }\n}\n/**\n * @internal\n */\nexport function loadFromGitSync(input) {\n    try {\n        return execSync(createCommand(input), { encoding: 'utf-8' });\n    }\n    catch (error) {\n        throw createLoadError(error);\n    }\n}\n//# sourceMappingURL=load-git.js.map","import { parseGraphQLSDL, parseGraphQLJSON } from '@graphql-tools/utils';\n/**\n * @internal\n */\nexport function parse({ path, pointer, content, options, }) {\n    if (/\\.(gql|graphql)s?$/i.test(path)) {\n        return parseGraphQLSDL(pointer, content, options);\n    }\n    if (/\\.json$/i.test(path)) {\n        return parseGraphQLJSON(pointer, content, options);\n    }\n}\n//# sourceMappingURL=parse.js.map","import { gqlPluckFromCodeString, gqlPluckFromCodeStringSync, } from '@graphql-tools/graphql-tag-pluck';\nimport { loadFromGit, loadFromGitSync } from './load-git';\nimport { parse } from './parse';\n// git:branch:path/to/file\nfunction extractData(pointer) {\n    const parts = pointer.replace(/^git\\:/i, '').split(':');\n    if (!parts || parts.length !== 2) {\n        throw new Error('Schema pointer should match \"git:branchName:path/to/file\"');\n    }\n    return {\n        ref: parts[0],\n        path: parts[1],\n    };\n}\n/**\n * This loader loads a file from git.\n *\n * ```js\n * const typeDefs = await loadTypedefs('git:someBranch:some/path/to/file.js', {\n *   loaders: [new GitLoader()],\n * })\n * ```\n */\nexport class GitLoader {\n    loaderId() {\n        return 'git-loader';\n    }\n    async canLoad(pointer) {\n        return this.canLoadSync(pointer);\n    }\n    canLoadSync(pointer) {\n        return typeof pointer === 'string' && pointer.toLowerCase().startsWith('git:');\n    }\n    async load(pointer, options) {\n        const { ref, path } = extractData(pointer);\n        const content = await loadFromGit({ ref, path });\n        const parsed = parse({ path, options, pointer, content });\n        if (parsed) {\n            return parsed;\n        }\n        const rawSDL = await gqlPluckFromCodeString(pointer, content, options.pluckConfig);\n        return {\n            location: pointer,\n            rawSDL,\n        };\n    }\n    loadSync(pointer, options) {\n        const { ref, path } = extractData(pointer);\n        const content = loadFromGitSync({ ref, path });\n        const parsed = parse({ path, options, pointer, content });\n        if (parsed) {\n            return parsed;\n        }\n        const rawSDL = gqlPluckFromCodeStringSync(pointer, content, options.pluckConfig);\n        return {\n            location: pointer,\n            rawSDL,\n        };\n    }\n}\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}