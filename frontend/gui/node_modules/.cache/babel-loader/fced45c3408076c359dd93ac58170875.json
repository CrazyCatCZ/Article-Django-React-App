{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar IRTransformer = require('../core/IRTransformer');\n\nvar invariant = require(\"fbjs/lib/invariant\");\n/**\n * A transform that inlines all fragments and removes them.\n */\n\n\nfunction inlineFragmentsTransform(context) {\n  var visitFragmentSpread = fragmentSpreadVisitor(new Map());\n  return IRTransformer.transform(context, {\n    Fragment: visitFragment,\n    FragmentSpread: visitFragmentSpread\n  });\n}\n\nfunction visitFragment(fragment) {\n  return null;\n}\n\nfunction fragmentSpreadVisitor(cache) {\n  return function visitFragmentSpread(fragmentSpread) {\n    var traverseResult = cache.get(fragmentSpread);\n\n    if (traverseResult != null) {\n      return traverseResult;\n    }\n\n    !(fragmentSpread.args.length === 0) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'InlineFragmentsTransform: Cannot flatten fragment spread `%s` with ' + 'arguments. Use the `ApplyFragmentArgumentTransform` before flattening', fragmentSpread.name) : invariant(false) : void 0;\n    var fragment = this.getContext().getFragment(fragmentSpread.name, fragmentSpread.loc);\n    var result = {\n      kind: 'InlineFragment',\n      directives: fragmentSpread.directives,\n      loc: {\n        kind: 'Derived',\n        source: fragmentSpread.loc\n      },\n      metadata: fragmentSpread.metadata,\n      selections: fragment.selections,\n      typeCondition: fragment.type\n    };\n    traverseResult = this.traverse(result);\n    cache.set(fragmentSpread, traverseResult);\n    return traverseResult;\n  };\n}\n\nmodule.exports = {\n  transform: inlineFragmentsTransform\n};","map":{"version":3,"sources":["C:/Users/Admin/programs/django+react/tutorials/graphql_django/frontend/gui/node_modules/relay-compiler/lib/transforms/InlineFragmentsTransform.js"],"names":["IRTransformer","require","invariant","inlineFragmentsTransform","context","visitFragmentSpread","fragmentSpreadVisitor","Map","transform","Fragment","visitFragment","FragmentSpread","fragment","cache","fragmentSpread","traverseResult","get","args","length","process","env","NODE_ENV","name","getContext","getFragment","loc","result","kind","directives","source","metadata","selections","typeCondition","type","traverse","set","module","exports"],"mappings":"AAAA;;;;;;;;;AASA;AACA;;AAEA,IAAIA,aAAa,GAAGC,OAAO,CAAC,uBAAD,CAA3B;;AAEA,IAAIC,SAAS,GAAGD,OAAO,CAAC,oBAAD,CAAvB;AAEA;;;;;AAGA,SAASE,wBAAT,CAAkCC,OAAlC,EAA2C;AACzC,MAAIC,mBAAmB,GAAGC,qBAAqB,CAAC,IAAIC,GAAJ,EAAD,CAA/C;AACA,SAAOP,aAAa,CAACQ,SAAd,CAAwBJ,OAAxB,EAAiC;AACtCK,IAAAA,QAAQ,EAAEC,aAD4B;AAEtCC,IAAAA,cAAc,EAAEN;AAFsB,GAAjC,CAAP;AAID;;AAED,SAASK,aAAT,CAAuBE,QAAvB,EAAiC;AAC/B,SAAO,IAAP;AACD;;AAED,SAASN,qBAAT,CAA+BO,KAA/B,EAAsC;AACpC,SAAO,SAASR,mBAAT,CAA6BS,cAA7B,EAA6C;AAClD,QAAIC,cAAc,GAAGF,KAAK,CAACG,GAAN,CAAUF,cAAV,CAArB;;AAEA,QAAIC,cAAc,IAAI,IAAtB,EAA4B;AAC1B,aAAOA,cAAP;AACD;;AAED,MAAED,cAAc,CAACG,IAAf,CAAoBC,MAApB,KAA+B,CAAjC,IAAsCC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCnB,SAAS,CAAC,KAAD,EAAQ,wEAAwE,uEAAhF,EAAyJY,cAAc,CAACQ,IAAxK,CAAjD,GAAiOpB,SAAS,CAAC,KAAD,CAAhR,GAA0R,KAAK,CAA/R;AACA,QAAIU,QAAQ,GAAG,KAAKW,UAAL,GAAkBC,WAAlB,CAA8BV,cAAc,CAACQ,IAA7C,EAAmDR,cAAc,CAACW,GAAlE,CAAf;AACA,QAAIC,MAAM,GAAG;AACXC,MAAAA,IAAI,EAAE,gBADK;AAEXC,MAAAA,UAAU,EAAEd,cAAc,CAACc,UAFhB;AAGXH,MAAAA,GAAG,EAAE;AACHE,QAAAA,IAAI,EAAE,SADH;AAEHE,QAAAA,MAAM,EAAEf,cAAc,CAACW;AAFpB,OAHM;AAOXK,MAAAA,QAAQ,EAAEhB,cAAc,CAACgB,QAPd;AAQXC,MAAAA,UAAU,EAAEnB,QAAQ,CAACmB,UARV;AASXC,MAAAA,aAAa,EAAEpB,QAAQ,CAACqB;AATb,KAAb;AAWAlB,IAAAA,cAAc,GAAG,KAAKmB,QAAL,CAAcR,MAAd,CAAjB;AACAb,IAAAA,KAAK,CAACsB,GAAN,CAAUrB,cAAV,EAA0BC,cAA1B;AACA,WAAOA,cAAP;AACD,GAvBD;AAwBD;;AAEDqB,MAAM,CAACC,OAAP,GAAiB;AACf7B,EAAAA,SAAS,EAAEL;AADI,CAAjB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar IRTransformer = require('../core/IRTransformer');\n\nvar invariant = require(\"fbjs/lib/invariant\");\n\n/**\n * A transform that inlines all fragments and removes them.\n */\nfunction inlineFragmentsTransform(context) {\n  var visitFragmentSpread = fragmentSpreadVisitor(new Map());\n  return IRTransformer.transform(context, {\n    Fragment: visitFragment,\n    FragmentSpread: visitFragmentSpread\n  });\n}\n\nfunction visitFragment(fragment) {\n  return null;\n}\n\nfunction fragmentSpreadVisitor(cache) {\n  return function visitFragmentSpread(fragmentSpread) {\n    var traverseResult = cache.get(fragmentSpread);\n\n    if (traverseResult != null) {\n      return traverseResult;\n    }\n\n    !(fragmentSpread.args.length === 0) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'InlineFragmentsTransform: Cannot flatten fragment spread `%s` with ' + 'arguments. Use the `ApplyFragmentArgumentTransform` before flattening', fragmentSpread.name) : invariant(false) : void 0;\n    var fragment = this.getContext().getFragment(fragmentSpread.name, fragmentSpread.loc);\n    var result = {\n      kind: 'InlineFragment',\n      directives: fragmentSpread.directives,\n      loc: {\n        kind: 'Derived',\n        source: fragmentSpread.loc\n      },\n      metadata: fragmentSpread.metadata,\n      selections: fragment.selections,\n      typeCondition: fragment.type\n    };\n    traverseResult = this.traverse(result);\n    cache.set(fragmentSpread, traverseResult);\n    return traverseResult;\n  };\n}\n\nmodule.exports = {\n  transform: inlineFragmentsTransform\n};"]},"metadata":{},"sourceType":"script"}