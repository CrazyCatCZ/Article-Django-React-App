{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\programs\\\\django+react\\\\tutorials\\\\graphql_django\\\\frontend\\\\gui\\\\src\\\\components\\\\Authentication\\\\Register\\\\Register.js\";\nimport React, { useState, useRef, useEffect } from 'react';\nimport { useMutation } from '@apollo/react-hooks';\nimport { useHistory } from 'react-router-dom';\nimport { Button, Form, Message } from 'semantic-ui-react';\nimport { USER_REGISTER_MUTATION } from '../../Api/user'; //const authenticationList = ['username', 'email', 'password', 'passwordConfirm']\n\nconst Register = () => {\n  const [usernameInput, setUsernameInput] = useState('');\n  const [emailInput, setEmailInput] = useState('');\n  const [passwordInput, setPasswordInput] = useState('');\n  const [passwordConfirmInput, setPasswordConfirmInput] = useState('');\n  const history = useHistory();\n  const [allowButton, setAllowButton] = useState(false);\n  const [message, setMessage] = useState({\n    type: '',\n    text: []\n  });\n  const [registerUser, {\n    data\n  }] = useMutation(USER_REGISTER_MUTATION);\n  useEffect(() => {\n    //Set default message\n    setMessage({\n      type: '',\n      text: []\n    }); //Reset previous state\n\n    if (data) {\n      //set message to var\n      const messageBoolean = data.register.success;\n\n      if (messageBoolean === false) {\n        //set the errors messages to var\n        const errors = Object.entries(data.register.errors); //loop all error messages\n\n        errors.map(error => {\n          //get the error message\n          const messageError = error[1][0].message; //set the message with previous message\n\n          return setMessage(prevState => ({\n            type: 'error',\n            text: [...prevState.text, messageError]\n          }));\n        });\n      } else {\n        history.push('/login');\n      }\n    }\n  }, [data]);\n\n  const handleOnClick = () => {\n    registerUser({\n      variables: {\n        username: usernameInput,\n        email: emailInput,\n        password1: passwordInput,\n        password2: passwordConfirmInput\n      }\n    });\n  }; //check if username, email, password and 2nd password were filled\n\n\n  useEffect(() => {\n    if (usernameInput !== '' && emailInput !== '' && passwordInput !== '' && passwordConfirmInput !== '') {\n      setAllowButton(true);\n    } else {\n      setAllowButton(false);\n    }\n  }, [usernameInput, emailInput, passwordInput, passwordConfirmInput]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"register-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 5\n    }\n  }, message.type ? /*#__PURE__*/React.createElement(Message, {\n    className: \"message-container\",\n    error: true,\n    header: \"There was some errors with your submission\",\n    list: message.text,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }) : null, /*#__PURE__*/React.createElement(Form, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Form.Field, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 11\n    }\n  }, \"Username\"), /*#__PURE__*/React.createElement(\"input\", {\n    onChange: event => setUsernameInput(event.target.value),\n    value: usernameInput,\n    placeholder: \"Username\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Form.Field, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 11\n    }\n  }, \"Email\"), /*#__PURE__*/React.createElement(\"input\", {\n    onChange: event => setEmailInput(event.target.value),\n    value: emailInput,\n    placeholder: \"Email\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Form.Field, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 11\n    }\n  }, \"Password\"), /*#__PURE__*/React.createElement(\"input\", {\n    onChange: event => setPasswordInput(event.target.value),\n    value: passwordInput,\n    type: \"password\",\n    placeholder: \"Password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Form.Field, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 11\n    }\n  }, \"Confirm Password\"), /*#__PURE__*/React.createElement(\"input\", {\n    onChange: event => setPasswordConfirmInput(event.target.value),\n    value: passwordConfirmInput,\n    type: \"password\",\n    placeholder: \"Confirm Password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Form.Field, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"text-muted\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 11\n    }\n  }, \"Already have an account? \", /*#__PURE__*/React.createElement(\"a\", {\n    href: \"/login\",\n    className: \"ml-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 62\n    }\n  }, \"Sign in\"))), allowButton ? /*#__PURE__*/React.createElement(Button, {\n    onClick: handleOnClick,\n    className: \"submit-button\",\n    type: \"button\",\n    primary: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 11\n    }\n  }, \"Register\") : /*#__PURE__*/React.createElement(Button, {\n    disabled: true,\n    onClick: handleOnClick,\n    className: \"submit-button\",\n    type: \"button\",\n    primary: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 11\n    }\n  }, \"Register\")));\n};\n\nexport default Register;","map":{"version":3,"sources":["C:/Users/Admin/programs/django+react/tutorials/graphql_django/frontend/gui/src/components/Authentication/Register/Register.js"],"names":["React","useState","useRef","useEffect","useMutation","useHistory","Button","Form","Message","USER_REGISTER_MUTATION","Register","usernameInput","setUsernameInput","emailInput","setEmailInput","passwordInput","setPasswordInput","passwordConfirmInput","setPasswordConfirmInput","history","allowButton","setAllowButton","message","setMessage","type","text","registerUser","data","messageBoolean","register","success","errors","Object","entries","map","error","messageError","prevState","push","handleOnClick","variables","username","email","password1","password2","event","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from 'react'\r\nimport { useMutation } from '@apollo/react-hooks'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { Button, Form, Message } from 'semantic-ui-react'\r\n\r\nimport { USER_REGISTER_MUTATION } from '../../Api/user'\r\n\r\n//const authenticationList = ['username', 'email', 'password', 'passwordConfirm']\r\n\r\nconst Register = () => {\r\n  const [ usernameInput, setUsernameInput ] = useState('') \r\n  const [ emailInput, setEmailInput ] = useState('') \r\n  const [ passwordInput, setPasswordInput ] = useState('') \r\n  const [ passwordConfirmInput, setPasswordConfirmInput ] = useState('') \r\n  \r\n  const history = useHistory()\r\n  const [ allowButton, setAllowButton ] = useState(false)\r\n  const [ message, setMessage ] = useState({type: '', text: []}) \r\n  const [ registerUser, { data } ] = useMutation(USER_REGISTER_MUTATION);\r\n\r\n  useEffect(() => {\r\n    //Set default message\r\n    setMessage({type: '', text: []}) //Reset previous state\r\n    \r\n    if (data) {\r\n      //set message to var\r\n      const messageBoolean = data.register.success\r\n      \r\n      if (messageBoolean === false) {\r\n        //set the errors messages to var\r\n        const errors = Object.entries(data.register.errors)\r\n        \r\n        //loop all error messages\r\n        errors.map(error => {\r\n          //get the error message\r\n          const messageError = error[1][0].message\r\n          \r\n          //set the message with previous message\r\n          return setMessage((prevState) => ({\r\n            type: 'error',\r\n            text: [...prevState.text, messageError]\r\n            \r\n          }))\r\n        })\r\n      }\r\n      \r\n      else {\r\n        history.push('/login')\r\n      }\r\n    }\r\n  }, [data])\r\n  \r\n  const handleOnClick = () => {\r\n    registerUser({ variables: {\r\n      username: usernameInput, email: emailInput,\r\n      password1: passwordInput, password2: passwordConfirmInput\r\n    }})\r\n  }\r\n  \r\n  //check if username, email, password and 2nd password were filled\r\n  useEffect(() => {\r\n    if (\r\n      usernameInput !== '' && emailInput !== '' &&\r\n      passwordInput !== '' && passwordConfirmInput !== ''\r\n    ) {\r\n      setAllowButton(true)\r\n    }\r\n\r\n    else {\r\n      setAllowButton(false)\r\n    }\r\n  }, [usernameInput, emailInput, passwordInput, passwordConfirmInput])\r\n\r\n\r\n  return (\r\n    <div className=\"register-container\">\r\n      {(message.type) ? (\r\n        <Message\r\n          className=\"message-container\"\r\n          error\r\n          header=\"There was some errors with your submission\"\r\n          list={message.text}\r\n        />\r\n        ) : null }\r\n      <Form>\r\n        <Form.Field>\r\n          <label>Username</label>\r\n          <input onChange={event => setUsernameInput(event.target.value)} value={usernameInput} placeholder='Username' />\r\n        </Form.Field>\r\n        <Form.Field>\r\n          <label>Email</label>\r\n          <input onChange={event => setEmailInput(event.target.value)} value={emailInput} placeholder='Email' />\r\n        </Form.Field>\r\n        <Form.Field>\r\n          <label>Password</label>\r\n          <input onChange={event => setPasswordInput(event.target.value)} value={passwordInput} type=\"password\" placeholder='Password' />\r\n        </Form.Field>\r\n        <Form.Field>\r\n          <label>Confirm Password</label>\r\n          <input onChange={event => setPasswordConfirmInput(event.target.value)} value={passwordConfirmInput} type=\"password\" placeholder='Confirm Password' />\r\n        </Form.Field>\r\n        <Form.Field>\r\n          <p className=\"text-muted\">Already have an account? <a href=\"/login\" className=\"ml-2\" >Sign in</a></p>\r\n        </Form.Field>\r\n        {/*If both fields were filled -> show undisabled button*/}\r\n        {(allowButton) ? (\r\n          <Button onClick={handleOnClick} className=\"submit-button\" type='button' primary>Register</Button>\r\n        ) : (\r\n          <Button disabled onClick={handleOnClick} className=\"submit-button\" type='button' primary>Register</Button>\r\n        )}\r\n      </Form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Register\r\n"]},"metadata":{},"sourceType":"module"}