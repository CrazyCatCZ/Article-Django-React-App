{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\programs\\\\django+react\\\\tutorials\\\\graphql_django\\\\frontend\\\\gui\\\\src\\\\components\\\\Posts\\\\PostCreate\\\\PostCreate.js\";\nimport React, { useState, useRef, useMemo } from 'react';\nimport { Button, Form } from 'semantic-ui-react';\nimport { useMutation } from '@apollo/react-hooks';\nimport { useHistory } from 'react-router-dom';\nimport { POST_CREATE_MUTATION, POST_LIST_QUERY } from './../../api/post'; //import styles from './Posts.module.css'\n\nconst PostCreate = ({\n  isPublic = false\n}) => {\n  const [allowButton, setAllowButton] = useState(false);\n  const titleRef = useRef();\n  const contentRef = useRef();\n  const history = useHistory();\n  const [createPost] = useMutation(POST_CREATE_MUTATION);\n\n  const updateCache = (cache, {\n    data\n  }) => {\n    // If this is for the public feed, do nothing\n    if (isPublic) {\n      return null;\n    } // Fetch the todos from the cache\n\n\n    const existingPosts = cache.readQuery({\n      query: POST_LIST_QUERY\n    }); // Add the new todo to the cache\n\n    const newPost = data.insert_todos.returning[0];\n    cache.writeQuery({\n      query: POST_LIST_QUERY,\n      data: {\n        todos: [newTodo, ...existingTodos.todos]\n      }\n    });\n  };\n\n  const CreatePost = useMemo(([handleOnSubmit]) => {\n    const user = localStorage.getItem('user');\n    const titleValue = titleRef.current.value;\n    const contentValue = contentRef.current.value;\n    createPost({\n      variables: {\n        title: titleValue,\n        content: contentValue,\n        user: user\n      }\n    });\n    history.push('/');\n  }); //check if title and content were filled\n\n  const checkForm = () => {\n    if (titleRef.current.value && contentRef.current.value) {\n      setAllowButton(true);\n    } else {\n      setAllowButton(false);\n    }\n  };\n\n  const [textareaInput, setTextareaInput] = useState('');\n  console.log('textareaInput');\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"post-create-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    onChange: checkForm,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Form.Field, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 21\n    }\n  }, \"Title\"), /*#__PURE__*/React.createElement(\"input\", {\n    ref: titleRef,\n    placeholder: \"Title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(Form.Field, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 21\n    }\n  }, \"Content\"), /*#__PURE__*/React.createElement(\"textarea\", {\n    onChange: event => setTextareaInput(event.target.value),\n    className: \"post-create-content-container\",\n    placeholder: \"Enter something...\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 21\n    }\n  })), allowButton ? /*#__PURE__*/React.createElement(Button, {\n    onClick: handleOnSubmit,\n    className: \"submit-button\",\n    primary: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 21\n    }\n  }, \"Create\") : /*#__PURE__*/React.createElement(Button, {\n    disabled: true,\n    onClick: handleOnSubmit,\n    className: \"submit-button\",\n    primary: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 21\n    }\n  }, \"Create\")));\n};\n\nexport default PostCreate;","map":{"version":3,"sources":["C:/Users/Admin/programs/django+react/tutorials/graphql_django/frontend/gui/src/components/Posts/PostCreate/PostCreate.js"],"names":["React","useState","useRef","useMemo","Button","Form","useMutation","useHistory","POST_CREATE_MUTATION","POST_LIST_QUERY","PostCreate","isPublic","allowButton","setAllowButton","titleRef","contentRef","history","createPost","updateCache","cache","data","existingPosts","readQuery","query","newPost","insert_todos","returning","writeQuery","todos","newTodo","existingTodos","CreatePost","handleOnSubmit","user","localStorage","getItem","titleValue","current","value","contentValue","variables","title","content","push","checkForm","textareaInput","setTextareaInput","console","log","event","target"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useMemo } from 'react'\r\nimport { Button, Form } from 'semantic-ui-react'\r\nimport { useMutation } from '@apollo/react-hooks'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nimport { POST_CREATE_MUTATION, POST_LIST_QUERY } from './../../api/post'\r\n\r\n//import styles from './Posts.module.css'\r\n\r\nconst PostCreate = ({ isPublic=false }) => {\r\n    const [ allowButton, setAllowButton ] = useState(false)\r\n\r\n    const titleRef = useRef()\r\n    const contentRef = useRef()\r\n\r\n    const history = useHistory()\r\n    const [ createPost ] = useMutation(POST_CREATE_MUTATION)\r\n  \r\n    const updateCache = (cache, {data}) => {\r\n        // If this is for the public feed, do nothing\r\n        if (isPublic) {\r\n            return null;\r\n        }\r\n        // Fetch the todos from the cache\r\n        const existingPosts = cache.readQuery({\r\n            query: POST_LIST_QUERY\r\n            });\r\n            // Add the new todo to the cache\r\n            const newPost = data.insert_todos.returning[0];\r\n            cache.writeQuery({\r\n            query: POST_LIST_QUERY,\r\n            data: {todos: [newTodo, ...existingTodos.todos]}\r\n        });\r\n    };\r\n\r\n    const CreatePost = useMemo(\r\n        ([handleOnSubmit]) => {\r\n            const user = localStorage.getItem('user')\r\n            const titleValue = titleRef.current.value\r\n            const contentValue = contentRef.current.value\r\n            \r\n            createPost({ variables: { title: titleValue, content: contentValue, user: user }})\r\n            history.push('/')\r\n\r\n        }\r\n    )\r\n\r\n    \r\n\r\n    //check if title and content were filled\r\n    const checkForm = () => {\r\n        if (titleRef.current.value && contentRef.current.value) {\r\n            setAllowButton(true)\r\n        }\r\n\r\n        else {\r\n            setAllowButton(false)\r\n        }\r\n    }\r\n\r\n    const [ textareaInput, setTextareaInput ] = useState('')\r\n\r\n    console.log('textareaInput')\r\n\r\n    return (\r\n        <div className=\"post-create-container\">\r\n            <Form onChange={checkForm}>\r\n                <Form.Field>\r\n                    <label>Title</label>\r\n                    <input ref={titleRef} placeholder='Title' />\r\n                </Form.Field>\r\n                <Form.Field>\r\n                    <label>Content</label>\r\n                    <textarea onChange={(event) => setTextareaInput(event.target.value)} className=\"post-create-content-container\" placeholder='Enter something...' />\r\n                </Form.Field>\r\n                {(allowButton) ? (\r\n                    <Button onClick={handleOnSubmit} className=\"submit-button\" primary>Create</Button>\r\n                ) : (\r\n                    <Button disabled onClick={handleOnSubmit} className=\"submit-button\" primary>Create</Button>\r\n                ) }\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PostCreate\r\n"]},"metadata":{},"sourceType":"module"}